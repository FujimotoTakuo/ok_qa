1か2ですね。 運良く少しだけ手直して使えそうなテンプレートが短時間で見つかればいいけど、そうでないなら一からHTML、CSSを作った方が早いので、大抵は1ですね。 3はPhotoshopのデータには無効でしょうね。 もともとが1枚の画像ですから、変換しても1枚の画像のまま。 Wordとかのデータなら、曲がりなりにもHTMLにはできるけど、それだってまともに使えるものではないですけどね。 素人の作ったページ。見れればいいレベル。 Photoshopのデータならまだいいですよ。 世の中にはExcelで作って、ここまでやってあるから楽だろう、それがそのままものになると思っている人が多々いますからね。 やる側としては手書きの原稿と必要な写真データをもらった方が数段楽なのだけど。
こんばんは お返事有難う御座います。 CSSは普通、以下のようにしますが、テンプレ―トには<head>～～</head>がありませんので、じかにタグの中にstyleを書き込みます。 <style type="text/css"> ココに書く </style> htmlの編集画面にstyleを書き込みます。 @media screen and (min-width:1300px) はテンプレートの大きさを考慮すると大きすぎると思います。問題が無ければ外してください。表示されない原因はここにあります。 ＞<body>～～～</body> はhtml編集モードがそれです。 ＞CSSもそういうのがあるんでしょうか？ はてなブログには<head>～～</head>の間に書き込むCSSは不可能です。 ＞CSSを勉強しようと思い ブログではなくて普通のレンタルサーバーを借りた方がいいですね。 最近は無料サーバーでもCGIが使えたり広告なしのものもありますので検討してみてください。 サンプル <style type="text/css"><!-- @import"test.css"; body{background:#DD5906;} --></style> <div style="width: 250px; margin: 0 auto; background-color: blue;">container</div> <p><img style="width: 250px; float: right;" src="http://k.yimg.jp/images/top/sp2/cmn/logo-ns-131205.png" alt="" /> 画像を右に寄せて表示します。</p> 不明点があると思いますので、他の方が回答してくださると思いますので、また情報を返信してください。
例えばJAVASCRIPTでもできますが めちゃくちゃ簡単にとりあえず設置したい！　という形であれば 右側の説明文の所に背景透過のIFRAME置いてしまう　っという方法もあります。 http://www.tagindex.com/stylesheet/frame/background_color2.html 左側に普通にリンクを設置してリンク先のiframeに説明を表示させてしまう形です。 ※margin paddin bordernなどは0　スクロールバーなども消しておく javascriptで書く場合は ここが参考になるかと思います。 ボタンをリンクにして 右半分の画像を置き換えればOKです。 http://weboook.blog22.fc2.com/blog-entry-6.html
プログラムって手順って意味があります。マークアップは手順じゃないですよね。 プログラム言語は処理の手順を書く言語です。
"rotateX(" + p + ")deg" ; ではなく "rotateX(" + p + "deg)" ; でしょう。
Chromeでは以下の記述で問題なく表示されます。 <!doctype html> <html> <head> <meta charset="utf-8"> <title>無題ドキュメント</title> <style> #breadcrumb ol li { list-style:none; display:inline-block; } #breadcrumb ol li::after { content: ">"; padding-left: 7px; display:inline-block; } </style> </head> <body> <div id="main"> <div id="breadcrumb"> <ol> <li><a href="index.html">HOME</a></li> <li>講座案内</li> </ol> </div> </body> </html> 2 コロンの記法 (::after) は CSS 3 で導入されたものですが、まさかのオチでcss3の対象外のブラウザで見てたりしないですよね？
外側は<table>じゃなくて<div>等にすべきじゃないか？と思いつつ、 /* 見分けやすくするだけ */ .resp_tab, .normal_tab{width:100%;} .resp_tab th, .resp_tab td{border:solid 1px red;margin:2px;} .normal_tab th , .normal_tab td {border:solid 1px blue;} /* これだけあれば */ @media only screen and (max-width:800px){ .resp_tab th, .resp_tab td{display: block;} .normal_tab th , .normal_tab td {display: table-cell;} }
拾えるものは、拾ってテンプレート使いまわせば 良いと思いますけどね。 複雑なことをやるなら、そこはちゃんと見積り書を作って これだけかかりますと言う話をすれば良いのと どこか他に案件をご紹介してもらって商談成立なら マージン何パーセントは、支払う。とか とにかくちゃんと見積もりを作るべきでしょう。 でないと余計な修正とか追加、追加を要望されます。 後は、こちらでサイト管理やメンテナンスをして欲しい場合は 小額で良いので月数万円～数千円かかるとか、その内容も 画像加工何枚まで無料とか、オプションでメール設定無料とか ページバグは無料だけど、改修、追加になるといくら～とか どんなサイトとか内容より、サービス内容とクオリティ じゃないですかね。 レスポンシブ対応出来る。とか 軽量するのにこんな技術を使っている。とか CMSも対応可能。とか FLASH使っている。とか ポートフォリオ作るなら、ポートフォリオサイトを 作る方が良いのでは？ CSS3だけで、ドラえもん作った。とか こんな技術を勉強して、こんなこと出来るようになった。とか 良くありますけどね。 それの方が、どんなことが頼めるのか 分かりやすいですけどね。 こんな画像作れます。 こんなイラスト作れます。 とかも、グラッフィックのクオリティが 分かりやすいです。
私も、ブログとしての機能（コメントやトラックバック）を殺したMTを 宅内のLinuxサーバーで動かして、内容を確認した後に、 生成されたHTMLや画像ファイルを　複数の公開サーバーに、 rsyncまたはｆｔｐでミラーリングして公開というのをやっていますが、 ちゃんと、動いてくれていますよ。 ※Movable　Typeを静的コンテンツ生成機として　使っている感じです。 なお、まさにそのようなサーバー配信機能が 　Movable Typeクラウドにはftp(s) 　Movable Type Advancedには、ftp(s)とrsync には搭載されているようなのですが、 私は、自作のCGIでミラーリングしています。 ＃宅内サーバー上の別ディレクトリに、「公開」のボタンを設置したHTMLを置いておいて、 ＃そのCGI内で、rsyncコマンド（ftpしか出来ない公開サーバーには、lftpコマンドのミラーアップロードモード） ＃で同期させて更新するようにしています。 ＃rsyncを使いたいのは、更新されたファイルのみを圧縮でアップロードしてくるので効率がよいのと ＃パーミッションやオーナーまで同期してくれるからです。
あえてこの時代に”frame”タグを使う！ と言う作戦を提案だけしてみます。 と言うより、最悪これがあるから、今まであなたのやりたいことが普及しなかったのでしょうけどね。
もし不可能な場合は、無理だと分かるだけでもすっきりしますので、何かご存知の方がいましたら、情報をいただけないでしょうか。 >セルの外にはみ出させて表現することです。 セルという概念に拘るなら、恐らく無理であろうと思います。 セルの外側とキラキラを含めたエリア全体を一つの何かしらの部品で作れば出来ると思います。 一番簡単なのは、星無しの画像と星有りの画像をマウスオンで切り替える事です。 既にやっていますよね？ その範囲を拡大させるだけです。 今は ■■■■ ■■■■ ■■■■ 　↓ ☆□□□□☆ □■■■■□ □■■■■□ □■■■■□ ☆□□□□☆ ですよね。 大きさも範囲も違う画像を入れ替えても、縮小されて範囲も変わらずで意味不明な事になってます。 周りを含めると下の様な感じ。 □□□□□□ □■■■■□ □■■■■□ □■■■■□ □□□□□□ 　↓ □□□□□□ □☆□□☆□ □□■■□□ □☆□□☆□ □□□□□□ そうではなく、枠を組み直して周りの縁も全部画像にするんです。 □□□□□□ □■■■■□ □■■■■□ □■■■■□ □□□□□□ 　↓ ☆□□□□☆ □■■■■□ □■■■■□ □■■■■□ ☆□□□□☆ そうすれば達成できます。 それ以上となると、 ボタンと周りの枠ではなく、画面全体をアニメ的にしてしまえば、キラキラが２枚の切り替えというショボイものではなく、本当にキラキラします。 その究極の技がフラッシュコンテンツです。 でも、フラッシュコンテンツは対応していない端末があるので、最近あまり誰も使っていません。 JavaScriptをゴリゴリ書きまくって作るか、jQueryなどを使うかですね。
js使うと記載した後考えましたが、それposition;absoluteである必要がないと思います。 普通に ビデオ メニュー とボックスを並べればいいと思います それでメニューにマイナスマージンとれば完成じゃないでしょうか？
<body> <!--既存のコンテンツ--> <div....... </div> <!--既存のコンテンツここまで--> <!--横で見ている場合にjsで挿入されるタグ--> <div id="alertbox"></div> <!--横で見ている場合にjsで挿入されるタグここまで--> </body> ------------------css #alertbox{ position:fixed; width:100%; height:100%; background:rgba(0,0,0,1); z-index:1000; } なんかこんな感じで上を覆ってやるタグを横でみてる場合にjavascriptにて挿入します。もしくはdisplay:noneにしておいてdisplay:blockに変更するのも手ですね。
table.test1 th { font-size: 5em; }
PCの移行も同じようですね。 https://teratail.com/questions/12827
HTMLやプログラム等で色を表す「#FF00FF」などは、RGBカラーコードと言います。 #に続く数字は、R:赤 G:緑 B:青を0から255までの256段階に分け、それぞれ16進数2桁で表したものです。 ですから、はじめに書いた#FF00FFは、赤：255 緑：0 青：255 であることを表し、カラーネームで言うと「マゼンタ」、色のダイアログで言うと、一番右の列の上から3番目です。 ご質問の色「赤：0 緑：0 青：128」なら、「#000080」になります。 16進数は、0123456789ABCDEFの16個が一桁になるので、128÷16＝8余り0となり、16進数では80になります。 本当は、2進数に直して10000000で、4桁で区切って1000＝8、0000＝0　よって80 って考え方なんですけど、この辺の計算は慣れていないと、分かりにくいですね。 簡単にやるならWindowsの電卓で、表示をXPまでなら「関数電卓」、7（Vistaも？）以降は「プログラマ」に切り替えてみて下さい。10進数 16進数 8進数 2進数への切り替えが出来るので、10進数で128と入力し16進数に切り替えると、16進数での表示になります。 ちなみに「色合い（色相）」「鮮やかさ（彩度）」「明るさ（明度）」の度合いで色を表現したものは「HSV（またはHSB）」と言い、別のものになります。 つまり、色のダイアログにある、色合い列の数値の色が、赤緑青の列の色と言う意味です。
サイトがモバイル端末での表示に最適化されていない場合にそのような表示がされます。 Googleがそのように判断しているため、誰が検索しても表示されます。
企業では無く非営利団体ですね。 Webに関連するソフトウェアなどを作る企業が集まって、標準仕様などを策定する業界団体と言った方が分かりやすいかも。
いえ、継承されますし、実際にされてると思いますが…記述式が正しくないか、或いは別途に他の要素からスタイル等が定義されており、実際のページ表示時にはそとらの方が優先されているのだと思います。 P.S. CSSやHTML等をク拾際には、先頭の文字を殊更に大文字表記にする意味は全く有りませんし、逆にそれが誤動作の遠因となる事も有るため。今後は全ての表記を小文字オンリーで統一する事をお奨めします。 body { text-align: center; } 上記の様に記述した方が良い。こう言うのは癖であり習慣なので、もうそう言うモノなのだと割り切って習慣化し小文字表記する癖付けをして行った方が良いです。同様にclass名やid名にも大文字は使うべきではありません。
え～っと、恐らく "line-height" で定義されるスタイルの理解が乏しいor間違っているため、なかなか思うようなデザイン結果を得られないのだと思います。まず第一に "line-height" は行間の隙間をざっくりと上下同時に指定し、また上下は必ず同じ値が適用されます（平均値）。ですので添付画像の様な結果になるのは極めて正しい結果です。 ◆line-height の数値計算式 ・line-height: 18px, font-size:11px の場合... 　( 18 -11 ) /2 == 3.5px が適用値となる. つまり {(line-height - font-size) / 2} が実際に適用される数値になりますので、例文の様に「em」で設定した場合でも「line-height:10em, font-size:1em」と解釈され... ・( 10 -1 ) /2 == 4.5em ～以上の様に計算され、4.5em が "<p>タグで囲まれた文章の上下に適用" となります。 ◆上下左右に異なる数値を設定する この場合は "line-height" では無く、"margin" と "padding" を使って個別に数値設定します。 p.example1 { line-height:1em; margin: 0.1em 0.5em 10em 0.5em; padding:3px; } とりあえずサンプルの数値を適当に弄りながら、質問者の環境に合った最適解を模索してみてください。 P.S. 尚、CSSで上下左右の値をまとめて指定する場合、左から順番に 上, 右, 下, 左 ～となります。これは4つ値を記述した場合で、2つや3つしか値を記述しないと指定順番がその都度に変化します。 ・値が1つ: 上下左右の全てが同じ値に. ・値が2つ: 上下, 左右 ・値が3つ: 上, 左右, 下 ・値が4つ: 上, 右, 下, 左 ～以上の様な記述法則に従いますので注意して値指定を記述してください。
すいません、大きなミスをしてました。 ついでに<center>タグを使ったときと <table align=center>を使ったときの 表示の違いを画像にしてみたので やりたい方の表示を参考にしてください。 tableタグの正解↓ (tr td を使ってセルを指定しないといけないのと、 widthを使って幅を％か数値で指定するのが抜けてました。) <html> <body> <table align="center" border="1" width="50%"> <tr> <td> <br> ページの内容<br> ページの内容を記述します。<br> <br> </tr> </td> </table> </body> </html> また、テーブルの中に<center>タグを使って その部分だけ中心寄せにできます。 <center> 中心にしたい部分</center> でできます。 …なんかミスってしまったのでややこしくしてしまってすみません。
文字コードさえきちんと適切に指定すれば日本語を使用することは何も問題ないはずだと思います。おそらくは何も指定していないのではないでしょうか？ CSSファイルの先頭に @charset "utf-8"; などと記述しましょう。 ファイルが多く面倒な時は、HTMLの方に <meta http-equiv="Content-Style-Type" content="text/css; charset=utf-8"> と記述しても問題ないと思います。 どちらかを必ず行うようにしましょう。記述しないとブラウザの自動判別機能に頼ることになります。自動判別では時々間違えます。
「bauhaus 93」という表記です。 bauhaus 93 - Google 検索 https://www.google.co.jp/search?q=bauhaus-93
「微妙にスタイルが崩れます」では、何を指しているか分からないので、なかなか回答がつかないと思いますよ。明確な問題について、明確な解決策が生まれます。その逆も然り。
>商品を紹介するサイトが多いのですね。 その中で食品が多いなど仕事として多い物はありますか？ 世間に需要あるものが多いですが、ECの場合、ある程度お金を出しても元がとれるようなサイトは、お金をかけて作る傾向が高いです。 雑貨などは利益が少ないんので、あまり需要がありません。 私の中では、家具やサプリメント、健康器具といったところが多いかなと思います。 ポートフォリオにするので、あれば、作りやすい食品とかでも良いんじゃないですか？ 付随してランディングページも作れますよ！みたいなアピールがあればさらに良いかと。 ECと商品のランディングページは切っても切れません。 ちなみに、楽天、YAHOOの知識はあったほうが得です。 引き受けて調べてやれないことはないですよ！
><link rel="stylesheet" type="text/css" href="○○.css">としていないのに ? していないということはHTMLタグで直接フォントや色などスタイルを指定しているということでしょうか。 cssをhttp指定している箇所も無いのでしょうか？あるいはマスターページを指定しているとかも無いのでしょうか？ であればHTMLやスクリプト自体が書き変わっているということになりますが、jspまで込みで自分で作成したものしか指定してないのでしょうか？ 提供されたものを使っているとjspのなかで参照しているものもありますが？
《Ctrl+Uキー》で、いわゆるソースを見ることができます。とりあえずソースを見るのが一番ではないでしょうか。 たとえば、WordPressであれば《wp-content》という文字が入っているはずですし、《meta name="generator"》あたりも参考になります。あるいはウェブサイトを眺めるだけでも、慣れてくると「WordPressっぽいなぁ……」と感じるようになってきます。見た目の構造が似ているというか何というか。 なお、ブログ形式のサイトであればWordPressが多いように感じますが、一般的なサイトだとCMSを使っていないこともあります。更新しやすいのがCMSの利点ですから、そもそも頻繁に更新しないようなサイトならCMSは不要ともいえます。
HTMLのタグにスタイルを指定すれば変えられます。 HTMLのpタグは文章の段落を表していますよね。 例えば、 <p>こんにちは</p> の場合、 <p style="font-size : 20px;color : blue;text-align : center">こんにちは</p> とすれば、フォントのサイズを20pxに、カラーをブルーに、テキストの表示位置をセンターにと変更できます。 pタグの中に書いてある『style="』から『"』までの部分はCSS（スタイルシート）といいます。ググるか本などを買って勉強されると理解できるようになると思います。 現在のところ、HTMLのデザインは全てCSSで行うのが一般的です。 このような直に書く方法は現在あまり推奨されていません（決していけないわけではありません。）が、わかりやすく書いてみました。 CSSというものに慣れてきたら、最終的には別のファイルにまとめてHTMLのlinkというタグでリンクし読み込むのがいいと思います。
回答になっていないかもしれませんが、 「メイリオ」ではなく、最新のWindows/Max OS Xには入っている「游ゴシック体」を選べば、WindowsとMacを気にすることはあまりないかもしれません。 また、「メイリオ」フォントが気に入っているのであれば、MacユーザーでもたいていOfficeを入れていますので、そうすれば「メイリオ」も入っています。 「メイリオ」に似た*標準フォントは*ないので、どうしてもということなら「ヒラギノ丸ゴ」（言うほど丸文字ではない）あたりにしておけばよいかと思います。
変化のスピードが早い世界で、これなら大丈夫なんてものは無いでしょう。 どんなものにも柔軟に対応できる力が大事なのではないでしょうか。
どっちでも良いですよ。 ただ、em指定だと親要素の文字サイズに依存して実際のサイズが決定されますので、細かい調整が面倒かも？px指定はズバリpx数を具体的に、その場その場で指定する方式になるので、そう言った点では簡単になります。 昔のブラウザだと、px指定の場合、Userが個別に文字サイズを拡大縮小しようとしてもpx数の方が優先固定されてて、ページ内の文字サイズ等が調整出来ない不具合がありましたが…。今の代表的なモダンブラウザなら、px指定でもブラウザ側で上手い具合に計算処理してキレイに表示してくれる様になりましたので、まあemでもpxでも特に問題は起きません。 P.S. どっちかと言うと %指定を使って、ページの最初に基準文字サイズを決めて置き。それ以外の要素は全て %指定で文字サイズを指定し。javascript等を用いてUserのモニタサイズ(画面サイズ)を読み取り、その大きさに合わせて動的に最適な文字サイズを調整～みたいな使い方は有ります。
＞　おっしゃる通りなってます！！！ であれば $disp_gazou1 の中身が不適切ですから、 　$disp_gazou1='<img src="./gazou1/'.$gazou1.'">'; という処理を書き直せばいいのです。
画像が添付されていませんよ！
使うために何か設定やソフトウェアのインストールが必要ということはなく、ご自身がCSS3基準で書いているかどうか、によります。 CSS3のプロパティやセレクタなどを使っていればCSS3を使っていることになります。
faviconを作るときのはまりどころあるあるは以下の2点です。 ・href=""のURLがフルパスになっていない。 　⇒ http:// から始まるフルドメインなURLを入力する必要があります。 ・type=""のMIME指定が実際のファイルフォーマットに合っていないか、ブラウザが認識できるMIMEを指定できていない。 　⇒ IEであれば、 type="image/x-icon" とかにしてみてください。 たぶん2個目の該当しそうかなと思いました。 もしアイコン素材をPNG画像で作っている場合などはまたMIME設定が違いますので http://isolaboratory.com/webstudies/upload/favicon.html このサイトの、ファビコンファイルのMIMEタイプ　というところが参考になるかなと思います。
大きな画像が表示されてから少し遅れて女性や吹き出し部分がスライドインする効果なら、jQueryのSlider Proで実装しているようです。 http://on-ze.com/archives/2717 CSSだけでは難しいでしょう。
＞　今回教えていただいたのはPC用とモバイル用の２つを作るがリンクでつなぐだけなので同一ドメイン、同一HP（PC用HPの中にモバイル用HPのページがある）と考えればいいということであってますでしょうか？ 合ってます。 同一ホームページ内にPC用とモバイル用の両方を置くと言う事です。 各ホームページはディレクトリを別けた方が管理が楽だと思いますので、PCディレクトリとモバイルディレクトリを用意するといいでしょう。
<ol>や<ul>は、何もCSSを書かないと左側に空白が入ります。そのため、まずは《margin: 0;》と《padding: 0;》で余計な空白を消し、さらに《margin-left: ;》で左側の空白を調整してあげるといいです。下の例では《25px》を入れてますが、もう少し短くしたかったら20pxとか15pxとか、いろいろな数字を入れて試してみてください。 ol { margin: 0; padding: 0; margin-left: 25px; } 慣れてきたら、 ol { margin: 0 0 0 25px; padding: 0; } こんなふうに短い書き方もできます。 そのほかの《display: block;》とかは、別に書かなくても大丈夫です。
ピンキリです。 制作会社に頼めば１ページ３～１０万円ぐらいです。 だいたいページ単価１０万円出せば業務知識のある制作会社が、デザインもそれなりよくて、収益性のあるページを作ってくれます。 ページ単価３万円ぐらいだと『制作する能力はある』というレベルの人がなんとなく作ってくれます。
基本的に、行頭（先頭）の半角スペースやタブはブラウザ上に反映されず、行中の半角スペースなどはブラウザ上に反映されます。 つまり、 ■■<p>《ここでEnterキー押して改行》 ■■■■あいうえお《Enterで改行》 ■■</p>《Enterで改行》 ↑のような書き方はできますが、 あ■い■う■え■■■■お ↑のような書き方だと、余計なスペースが入ってしまいます。■は半角スペースだと思ってください。 したがって、 <div class="nihongo">《Enterで改行》 ■■<p>《Enterで改行》 ■■■■かきくけこさしすせそたちつてとかきくけこさしすせそたちつてと<br>《Enterで改行》 ■■■■なにぬねのはひふへほ（***任意の場所で改行&空白で先頭をそろえる***）《Enterで改行》 ■■■■まみむめも<br>かきくけこさしすせそたちつてとかきくけこさしすせ<br>《Enterで改行》 ■■■■■■そたちつてと（***<br>と空白で先頭をそろえる***）《Enterで改行》 ■■■■<br>あいうえおかきくけこさしすせそたちつてとかきくけこさしすせそた《Enterで改行》 ■■■■■■ちつてと《Enterで改行》 ■■</p>《Enterで改行》 </div>《Enterで改行》 ↑のように書くと、うまくいくかと思います。ちゃんと行頭にスペースが来るように、しっかりと行末でEnterキーを押して改行するのがコツです。また、スペースは基本的に半角を使います。 なお、必要以上に<br>タグを使いすぎると、極端に画面の大きさが変わったとき（大型テレビやスマホで見たときなど）にレイアウトが崩れかねません。段落であれば<br>よりも<p>タグのほうが適切ですし、箇条書きなら<li>タグもありますよ。
＞HTMLやCSSの知識が無いので、 ＞CMSを活用したいと思っています。 このレベルでWordPressやMovableTypeを使って構築しようというのは難しいと思いますよ。確かに基本のテンプレートはありますが、ある程度自分でカスタマイズしないと使えません。 CMSを構築するのであれば、CSSやHTMLの知識は必須で、さらにCMS独自のソースコードを覚える必要があります。 どのようなHPを作りたいのか不明ですが、まったく知識なく開設できるのはブログくらいです。 それであれば、AmebaやFC2などのブログサイトを利用するのが良いと思います。 ご参考まで。
ごめん。質問を勘違いしていました。 position:fixedなら無理なのはいっしょです。 クリックする為のボタン、バーガーメニューはposition:fixedで、出現するmenuは、position: absolute;にすれば希望のことができると思います。 また、ソースを拝見しましたが、エラーが目立ちます。元のソースもこんな感じですか？ [id="drawermenu"] ul なんで属性セレクタ？って気もしますがそれはおいておいて、今回このセレクタの適用を受ける要素はありませんので、すべて無駄です。 一応他のエラーも 「height: 100% position: fixed;」 100%の後に;が無いので、 「height: 100% position: fixed;」と判断され、結果解釈できない筈です。 「<a class='top-header__social-btn symbol animation-hover action-hover' href="http://twitter.com/share?url=</a> </li>」 <a>タグ内のがhref属性が閉じられていません。
どうでもよいことを長々と書いてしまいましたので、先に結論から言いますと、「どちらでもよい」です。 一つにまとめても、ふたつに分けても、結果は変わりません。変わってくるのは、CSSの管理のしやすさです。ですから、質問者さんが管理しやすいと思う方法で自由に書けばよいと思います。 さて、ここからは補足的なことを書きますので、興味があれば読んでみてください。 まず、 該当記事は2年以上前のものですが、Web関連の技術・ノウハウは、2年も経てば、古く(適切でなく)なってしまうことが多いです。今回の質問内容に関わらず、web関連の情報を探す際は、「いつ書かれたものなのか」に注視するとよいです。新しければ新しいほどよいですが、出来る限り、1年以内に書かれたものをおすすめします。もちろん、本屋で云千円で売っている書籍にも同じことが言えますので、慎重に情報を選択してください。 それから、 語弊を恐れずにいえば、ホームページ制作は誰にでもできます。しかしながら、日曜大工的にやってる一般の方と、それを本業にしている方とでは、やはり、いろいろとノウハウや方法論が変わってきます。質問者さんがどういう立場の方で、どれくらいの専門性を持たれた方なのかは存じませんが、手にしている情報が「誰に向けて書かれた情報なのか」ということに気にしてみるとよいかもしれません。ちなみに、該当記事は明らかに一般の方に書かれている内容なので、それを本業にしている人には該当しない箇所もあるかもしれません。 ここから、 少しだけ話しを掘り下げると、5年ぐらい前までは、CSSは比較的細かく分けて運用されることが多かったと思います。なぜなら、管理(制作)しやすいからです。しかし、スマートフォンなどが普及し、遅い回線が混在する中で、できる限り速くページを表示させる方法が議論されてきました。その中の手法のひとつが「読み込むファイルを少なくする」というものです。詳しい話は割愛しますが、結果として、CSSは複数ファイルを読み込むのではなく、1ファイルにまとめて読み込ませる方法が、2016年の現在に多く見られる手法だと思います。 ただ、冒頭で述べたように、これは「それを本業する人」の話です。すべてのCSSを1つにまとめてしまうと、従来の方法(手で直に記述する)では管理が煩雑になってしまいます。従って「それを本業する人」は、CSSをひとつにまとめるツールを持っているわけですが、一般の方にそういうツールの要求するのは少し違う気もします。 つまり、 一般の方を対象に方法論を選ぶなら、「どちらでもよい」が最適解だと思います。
paddingは領域内の余白ですけど、意図と合っていますか？普通はtdやthにpaddingを指定すると思いますが。 表が終わった直後に余白を設けたいのであれば、領域外の余白＝marginを指定すべきです。
回答が遅くなりましてすいません。 今の段になっても意外に回答される方がいらっしゃいませんでしたので。 cssのセレクタですが、cssの空白区切と同じ意味で空白区切で羅列するパターンがあります。 http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html#pattern-matching ですので下のような記述で、要求は実現可能ですよ! table[summary~="test1"]{ color:red; } もちろんサマリーにこれを当てるのは行儀がいいとは言いませんが、現場だとやむをえない時はありますよね。
以下のようにして下さい。 <table width="100%" border=0 cellpadding=0 cellspacing=0><tr><td nowrap width="1%">天然真鯛</td> <td width="10px"></td><td><table width="100%" border=0 cellpadding=0 cellspacing=0 bgcolor="#000000"><tr><td height="1px"></td></tr></table></td><td width="10px"></td><td nowrap width="1%">７５０円</td></tr></table> <table width="100%" border=0 cellpadding=0 cellspacing=0><tr><td nowrap width="1%">活シマアジ</td><td width="10px"></td><td><table width="100%" border=0 cellpadding=0 cellspacing=0 bgcolor="#000000"><tr><td height="1px"></td></tr></table></td><td width="10px"></td><td nowrap width="1%">８５０円</td></tr></table> <table width="100%" border=0 cellpadding=0 cellspacing=0><tr><td nowrap width="1%">活タコ</td> <td width="10px"></td><td><table width="100%" border=0 cellpadding=0 cellspacing=0 bgcolor="#000000"><tr><td height="1px"></td></tr></table></td><td width="10px"></td><td nowrap width="1%">７００円</td></tr></table> <table width="100%" border=0 cellpadding=0 cellspacing=0><tr><td nowrap width="1%">茹でタコ</td> <td width="10px"></td><td><table width="100%" border=0 cellpadding=0 cellspacing=0 bgcolor="#000000"><tr><td height="1px"></td></tr></table></td><td width="10px"></td><td nowrap width="1%">７００円</td></tr></table> <table width="100%" border=0 cellpadding=0 cellspacing=0><tr><td nowrap width="1%">活さざえ</td> <td width="10px"></td><td><table width="100%" border=0 cellpadding=0 cellspacing=0 bgcolor="#000000"><tr><td height="1px"></td></tr></table></td><td width="10px"></td><td nowrap width="1%">７５０円</td></tr></table> 内側のtableタグのbgcolor="#000000"属性で線の色が変わります。 内側のtableの中の<td height="1px">で、線の太さを１ピクセルにしています。 線の前後の空ける間隔は、品名の次の<td width="10px">で前に１０ピクセル分、価格の前の<td width="10px">で後ろに１０ピクセル分の隙間を空けています。 添付画像のように、ブラウザの幅を変更しても、文字の位置は左右に配置され、線のみ長さが変わります。 こういう裏技はCSSに慣れた人には思い付きません。
一度こちらを読まれるといいんじゃないでしょうか。 http://ascii.jp/elem/000/000/700/700611/ メディアクエリーの詳細は第6回で説明されています。
よくある症状だな、と思ってこちらでも試してみているのですが 貼られている範囲のcss設定では、同じようにならないですね。 再現できるようにもう少し詳しいものが欲しいかなと思ったりします。 今見えている範囲で予想しますと ・liタグの中身の画像が、liタグの高さより大きくて、⓷が⓵に引っかかって、画面の左端まで回り込まない ・clearの設定が、書かれている範囲の外にあって、これが悪さをしている この辺りのどちらかではないかな、と思ったりします。 というかおそらく上の方でしょうね。 回答遅れてすいませんでした。 頑張ってください。 <!DOCTYPE html> <html xmlns="http://www.w3.org/1999/xhtml"> <head profile="http://gmpg.org/xfn/11"> <title>Skyscraper</title> <style> ul { list-style-type:none; overflow:hidden; max-width:310px; margin:20px auto; } ul li { clear:none; float:left; width:48%; } ul li img { width:100%; } ul li:nth-child(even){ padding-left:10px; } ul li:last-child { width:100%; } </style> </head> <body> <ul> <li><img src="#"></li> <li><img src="#"></li> <li><img src="#"></li> <li><img src="#"></li> <li><img src="#"></li> </ul> </body> </html>
サーバーにアップすれば正しく表示されるかと思います。反対にローカル環境（サーバーにアップする前）だと互換表示が優先され、わざわざ解除しないと正しく表示されません。 最初から互換表示を無効にするには、<head>内に次のような<meta>タグを入れてみてください。《IE=edge》とすることで、IEもFirefoxなどと同じように動きます。 <!DOCTYPE html> <html lang="ja"> <head> <meta http-equiv="X-UA-Compatible" content="IE=edge"> </head> <body> </body> </html>
こういう場合の「webフォント」てのは十中八九「Noto Sans CJK」の事を指します。で、この「Noto Sans CJK」はPhotoshopで有名な世界的ソフトメーカーのAdobeと、スマホのAndroidの開発元でも有るGoogle社が共同で開発し無料配布しているモノです。 先立って Android 6.0 Marshmallow では標準フォントがこの「Noto Sans CJK」になりました。従って実質、ロード時間0で表示される訳です。もちろん古いバージョンのスマホではインストールされてないので、ロード時間が余分に掛かる事になりますが…。古い版を容赦無く切り捨て、常に最新技術で埋めていく方針は基本的に正しいwebとITの姿であると信じます。 P.S. PC向けに考えても、googleがケツを持ってくれるなら安心して使用出来ますし。より多くの開発者が1つのwebフォントを重複して使えば、その分はキャッシュとして溜め込まれるので、擬似的にAndroidと同じような状態を生み出し、結果としてロード時間0になります。 という訳なので「馬鹿の考え休むに似たり」で、よく分からないのなら深く考えずに使って置け！～と言うのが宜しいのです。何か問題が起きたら、またその時に天上人達が考えますので…(笑)。
CSS2環境(CSSではclass名に２バイト文字は使用不可なので)での質問だとした場合 単純に全角と半角の文字が違っているので２つは別物として扱われます class="td_ＡＡＡ"とclass=td_AAA"とした場合も同様に別物として扱われます
以前、Webデザインをやっていましたが。いまは、ディレクションにまわっていて、ソースの細かなところは見られませんが… こちら参考になるかもです。 "WP to Twitterのデザインのカスタマイズについて" https://ja.forums.wordpress.org/topic/157660 関連でこちらも "WP to Twitter プラグインでカスタム投稿タイプの記事をTwitter 連携する方法など" http://www.imaginationdesign.jp/blog/wordpress/3533/ 「WP to Twitter 」はソーシャル連携20選にも選ばれてますね～ "ソーシャルメディア連携に役立つWordPressプラグイン20選" http://netaone.com/wp/wordpress-sns-plugin/#Twitter 他にもこれなどはいかがでしょうか "WordPressとツイッターを連携させて更新をツイートする「Simple Tweet」" http://wp-navi.net/customize/wordpress-plugin-tweet/ その他の関連情報を "PHPとcount.jsoonを用いてTwitterのシェア数を取得するWordPressカスタマイズ方法" http://nelog.jp/php-and-count-jsoon "30分で出来る！WordPress簡単カスタマイズ方法 Part.1（全5回）～整理と準備編～" http://knowledge.sakura.ad.jp/beginner/713/ "WordPress（ワードプレス）カスタマイズの基本！初心者必読のテーマ・テンプレートやウィジェット等のカスタマイズ" http://viral-community.com/wordpress/wordpress-customize-4986/ よい画面がデザインできますように。 "wordpress プラグインに関する質問・悩み・回答・方法" http://sp.okwave.jp/search?word=wordpress%20%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3 参考になれば幸いです。
cssは単位が必要です。
そうですね。 レスポンシブデザインは様々な種類の機器(PCやスマートフォン、タブレット端末)や画面サイズに合わせて、自動的にページのデザインを変化させる技術手法を指しています。 CSSでは、メディアクエリという機能を利用することでレスポンシブにできると思います。 PC/スマホというデバイスごとに切り替えるのではなく、表示される画面の幅によって適用するCSSを制御する形になります。 たとえば以下のような形です。 @media (min-width:480px) { /*　画面サイズが480px以下である場合、このスタイルを適用する　*/ ・・・ } @media (min-width: 768px) and (max-width: 990px) { /*　画面サイズが768px～990pxである場合、このスタイルを適用する　*/ ・・・ } @media screen and (min-width:1024px) { /*　画面サイズが1024px以上である場合、このスタイルを適用する　*/ ・・・ } スマホ・ＰＣの画面幅ごとに font-size の記述をすることで、文字のサイズを変更できると思います。 参考: https://developers.google.com/web/fundamentals/design-and-ui/responsive/fundamentals/use-media-queries?hl=ja
突っ込みどころはあるのですが、 結論から言うと、これでいけます。 ------------------------------------------------------------ .box-cell { float: left; position: relative; color: #000; background-color: #fff; } .box-cell:hover { background: #f00; color: #fff; } .box-cell:after { clear: both; } .box-cell a { display: block; width: 100%; height: 100%; position: absolute; top: 0; left: 0; } ------------------------------------------------------------ aタグにposition: absolute;しているため、レイヤーが上位にきてしまい、 aタグが文字の上に覆いかぶさってしまっているのが原因です。 ですので親要素のbox-cellにhoverすれば いけるというわけです。 指摘点としては、 そもそもhtmlの記述として、 ------------------------------------------------------------ <div class="box-cell"> あいうえお<br /> かきくけこ<a href="http://www.yahoo.co.jp/"></a> </div> ------------------------------------------------------------ とするのではなく、 ------------------------------------------------------------ <div class="box-cell"> <a href="http://www.yahoo.co.jp/">あいうえお<br /> かきくけこ</a> </div> ------------------------------------------------------------ とするのがスマートです。 またはhtml5であれば ------------------------------------------------------------ <a href="http://www.yahoo.co.jp/"> <div class="box-cell"> あいうえお<br /> かきくけこ </div> </a> ------------------------------------------------------------ でも可能ですが、いずれにしてもaタグが独立しているのに 違和感を感じます。 通常、リンクエリアはリンクさせたい箇所を囲うのが普通です。 なので先に結論としてあげたCSSもhtmlとの兼ね合いを見たら スマートではないですね。 ただどうしてもhtmlは変更できない事情がおありなら、 先に書いたCSSのようにする必要があります。 その他指摘点として、 cssのプロパティでdisplay: table;とdisplay: table-cell;を使っているのに なぜfloat: left;を使用しているのかが違和感です。 display: table-cell;の時点で横並びは成立しているので、 float: left;を使う必要がないです。 display: table;とdisplay: table-cell;を使うのをやめるか、 float: left;を使うのをやめるとかしたほうがいいと思います。 先に書いたCSSはdisplay: table;をやめてfloat: left;を採用した例です。
企業サイトのメニュー項目ですか・・・ とりま、このページをスクロールした一番下のメニューとか？
＞　<div> の前と </div> の後ろに発生する改行をなくしつつ イメージを中央に置きたいのです。 div はブロックレベル要素なので必ず改行が入ります。 改行が入らないのはインライン要素だけです。 もしかして、おっしゃっているのはマージンなのではないでしょうか。 img や該当する div のマージンをゼロにすると隙間は消えると思います。 マージンを消すと img の上下の要素との隙間は無くなると思います。
画像の上にテキストを表示するには、このようにして下さい。 imgタグは使わず、他のタグで作った空間に背景画像を設定し、そのタグの中にテキストを配置します。 具体的には以下のような感じで。 HTML <div class="box"> <h2>墨会館</h2> <p>愛知良いとこ一度はおいで♪</p> </div> CSSは以下のように。 .box{ background:url(このカッコ内にお好きな画像のURL《パスに注意》); } このやり方は、imgタグは使いません。理解しやすいように書くと、divという『空っぽの空間』を作るタグにCSSで『背景画像』として使いたい画像を配置します。そのdivタグの中にテキストを書く方法です。 と、説明してみましたが… こういったタイトル画像の場合、テキストはデザイン上最適な場所にきっちり配置したいですよね。このまま画像を使った方がナイスじゃないか？と思っちゃいました。 もし、スマホなどの小さい画面への対応をなさっているのでしたら、PC用とは別の最適化した画像を用意するのもいいのではないかと思います。 また『切り替わる画像』は、なんらかのスクリプトで動いているのでしょうから、imgではなく背景画像を利用した場合、今までどおりに動くかはわかりません。
HTMLとCSSだけでも実現できるでしょうが、けっこう手間がかかると思います。 bxsliderやSlider ProなどのjQueryプラグインがお薦めです。 http://fukafuka295.jp/hp/hp_no3.html http://fukafuka295.jp/hp/slideshow_thumbnail.html http://gimmicklog.main.jp/jquery/340/ また、フレームは古い技術なのでHTML4でも非推奨扱い、HTML5では廃止になっています。 http://www.tagindex.com/html5/basic/abolished.html
これだ！というものがないのです。デザインやターゲットにより適切な区切りが変わってきます。 ご提示のサイトを拝見しましたが、こだわる場所が違う様に思います。 粗っぽいですが、私なら、cssファイルは１つにします。リキッドレイアウトで、幅に応じてメニューの横の個数を変えるくらい（下記改造案）。 スマホはただ小さくすればいいというものではありません。メニュー等、指で押す場所は、リンク箇所が一つだけポツンとあるか、指で押せる充分な横と縦幅を必要とします。また、文字も大きめに表示するのが一般的です。でないと読めない豆粒の文字となったり、ちいさすぎて読むのに疲れます。 改造案ですが、おおざっぱですが以下の感じ。細かく作りこんでいませんし、既存の部分と重複がありますが、大意は伝わると思います。 head内のcssは<link rel="stylesheet" media="all" type="text/css" href="Norippy.css">のみに。 Norippy.css内の先頭行と最終行 つまり、 @media screen and (max-width: 1024px){ と} を削除したうえで、最後に以下を追加してみてください。 body{ width:100%; max-width:1024px; } div.top_logo { background-image: url("site_logo.jpg"); height:0; width: 100%; background-size: 100% auto; padding-top: 30%; background-repeat: no-repeat; } div.main_menu { width: 100%; height:auto; } ul.menu { padding: 0px; overflow: hidden; } .main_menu .menu li{ width:25%; } .main_menu .menu li a{ background-color:#ffe8e8; background-size: 100%; background-image: url("sozai/menu_back_image.gif"); background-position:left center; } @media screen and (max-width: 500px){//ここの数値を変えることで、4列から２列への変換値を変更してください。 .main_menu .menu li{ width:50%; } div.main { padding: 15px; } p{ font-size: 14px; line-height: 1.7; } div.footer { padding: 15px; } }
え～っと、適用なCSS内に、 ul.menu { padding: 0; } ～と追記してみてください。多分、お望みの結果が得られると思います。
＞　しかしWin７　IE8では文字が左によってしまいました。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> か <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> を付けたらどうでしょうか。
そうそう。僕もiPhoneで自分のサイトを見た時に、同じ背景色のh4タグとpタグの間にこんな線が入って、あれ？って思いました。 ちょっと状況は違うけど、この状況ならulに背景色指定してliの背景色指定は無くしちゃったら解決するんじゃないですか？
http://parashuto.com/rriver/development/page-speed-optimization#render-blocking-css
私は有料のバージョンについては利用していないのでわかりません。 ペナルティーがあるかどうかわかりませんが、基本的にダメだと思いますよ。 私もカスタム検索を利用（無料のやつ）しています。私は検索窓の中のロゴ画像（同じくGoogle カスタム検索と書いてあるやつ）が、ボヤっとして汚いので消すか解像度の高い画像に差し替えるか迷いましたが結局やめました。 ロゴなどのカスタムについて明確にOKと判断できる文章が見当たらない事と、グーグルが用意しているカスタム機能内ではできない点から、やんない方がいいかな…と思っただけですが。。。 いいとも悪いとも特に記述が発見できてませんが、もし無料エディションなら利用させてもらっているわけなので、グーグルの名前を消すのはどうかと。 しかし、相手がグーグルだと色々考えてしまいますよね。気持ちわかります(笑)
styleの書き方が間違っています。 例として border-top-width: 1px; border-top-color = "#3d9f51"; border-top-style = "solid"; 下2つは間違っています、この3つを書く場合は border-top: solid 1px #3d9f51; とするのが良いです。 他も同様に修正してください。
thへの適用に関しては１の方が仰る通りです。 ただsummaryはそもそも表の説明を記述する要素なので、普通は日本語で書きます。 tabel_1等は何の説明にもなっていないので、それを入れるくらいならsummary自体無い方が良いです。 【例】 <table summary="Tシャツのサイズごとの料金表"> この場合、css側は table[summary="Tシャツのサイズごとの料金表"] td, table[summary="Tシャツのサイズごとの料金表"] th 等で指定してもいいですが、cssファイル内の日本語はうまく扱わないと文字化けの危険があり、文字化けすると当然cssは効きません。 ですので、summaryではなく普通にclassを指定する方が無難だと思います。
呼び出しているjQueryMobileのバージョンが違うので要求されているjQueryのバージョンが違うだけだと思います。 他にjQueryを使ったJavascriptを書いていないのであれば書き換えてしまってもいいと思いますが、jQueryMobileはバージョン毎に呼び出し元のHTML側記述も変更が必要だったように記憶しています。（あんまり良い思い出はありません）
text-indent : -9999px; で、テキストを表示しないようにしているからでしょう。
>アクセス回数制限を設け、例えば5回目のアクセスでユーザー登録を促し、しない人は閲覧不可、登録してくれた人はWordpressへユーザーログイン後、制限が解除され、全ページへの閲覧権限のみを与える 5回目というのがどういうルールかわかりませんが、いずれにしてもそういう都合のよいプラグインは存在しないので自分でサーバーサイドのプログラムをかかないと実現できないと思います。
　 https://support.google.com/maps/answer/2622947?hl=ja 　
エージェントでVIEWを分けてるんじゃないかと想像します。
CSSで、メディアクエリという機能を利用することでできると思います。 PC/スマホというデバイスごとに切り替えるのではなく、表示される画面の幅によって適用するCSSを制御する形になります。 たとえば以下のように指定するとブラウザの幅が 768px～990pxの場合にのみ適用されるCSSを記述できます。 @media (min-width: 768px) and (max-width: 990px) { ・・・ } 参考: https://developers.google.com/web/fundamentals/design-and-ui/responsive/fundamentals/use-media-queries?hl=ja
基本的にはJavaScriptですね。Ajaxを使ってサーバと通信してデータを取得し画面を書き換えてるようですね。
CSS3のCSS basic box modelでは 草案（Working Draft）になってますね。 http://www.w3.org/TR/css3-box/#overflow 普通に色んなブラウザで実装されていることを鑑みると 概ね仕様しても問題ないかと思います。 私も普通に使ってますよ。 scrollとかないと厳しいですよね。
ブラウザが最初から持っているデフォルトスタイルシートですね。 http://kojika17.com/2014/02/ua-style-sheets.html http://bunke-pg.blogspot.jp/2012/09/user-agent-stylesheet.html デフォルトの設定で問題が出る場合はリセットCSSを使いましょう。 http://coliss.com/articles/build-websites/operation/css/2015-awesome-css-frameworks.html http://tonost.com/2015/03/10/%E3%80%90css%E3%80%91%E6%B1%BA%E5%AE%9A%E7%89%88%EF%BC%81%E3%83%AA%E3%82%BB%E3%83%83%E3%83%88css%E7%B7%8F%E3%81%BE%E3%81%A8%E3%82%81/
こちらの回答を参照してください。 http://okwave.jp/qa/q8980106.html
http://matome.naver.jp/odai/2132616911530364801 ここを参考にしてください。
見た感じ、Noto Sans CJKかと思います。 NotoフォントシリーズはGoogleが主導して開発中のフォントプロジェクトとのこと。
ネット上ではなくPC上で作成するソフトを使ってみてはどうでしょうか？ MiBarcode http://www.vector.co.jp/soft/winnt/writing/se135506.html JANコードなども作成できるソフトですがQRコードも作成できます。 ちなみに、QRコードは文字情報なのでURL以外の文字情報もQRにできます。
別に問題ないですが、 a:link{color : gray}; a:visited{color : red}; a:hover{～ほにゃららら～}; a:active{～ほにゃららら～}; のように書けば『スッキリ！』となるのではないでしょうか。
すみませんでした。たしか埋め込みコードはjavascriptで記述されていましたよね。CSSでデザインの調整はできますが、画像に置き換えるのには、たしかinputタグの中をいじりたいですよね。CSSしかいじれない状況ですから、ちょっと難しいかもしれません。 以降は少しでも思い通りのデザインに近づけばと思い書きます。 私がCSSをいじったのは、検索結果の行が重なって表示されたりpaddingやmarginなどがメチャクチャなため非常に見づらく、デザインのミスかのように見えるほど不恰好だったための調整です。 もしかして、こんな部分でしょうか？ と、ソースを貼って頂きましたが、そんなクラス名だろうとは思いますがハッキリとはわかりません。対応箇所を見つけるのに私は少し手間取りました。 多分、あのCSSファイルはカスタム検索の様々なデザインテンプレートに対応している物だと思います。不要な部分がたくさんあります。似たような名前のクラスがたくさんあって、これだ！と思っても反応なかったりしました。似たクラス名が付いている箇所が何か所かあるハズなので、1つずつ試しにいじっていって、何か変化が出たところを変更していくといいと思います。 お望みの答えではなくすみませんでした。
うむむ… ちょっと確実な答えは僕の経験の中から出せませんが、他のブラウザでちゃんと表示されている事と、Firefoxでも表示されていない文字はないらしいのでフォントファイルなどの問題よりブラウザの仕様の問題っぽいですよね。 とすると、CSSのテキスト関連の指定が怪しいかなぁ…と。 justify？とかそんなんありましたよね？たしか。 text-justifyかな？？ 均等割付でしたっけ？行の右端を綺麗に揃えられるのですが。 けっこうブラウザによって違いがあった記憶があります。 こんな指定が影響してるって事はありませんか？ もしかして…的な回答ですみません。
ちょっと念のために補足なんですが。 >スマホのPCビューに対して画像が高解像度すぎた と、ありますが、私が言ったのは逆で画像が低解像度すぎるのでは？という意味です。 たとえばiPhone5のRetinaディスプレイはPCと比べて2倍程度のサイズの画像を用意してやらないとぼやけます。さらに最新のスマートフォンの場合3倍以上の物もあります。 ご存知かと思いますが、PCでもスマホでも、ディスプレイは細かい点がたくさん並んで文字や画像を描いていますよね。 iPhone5の例を挙げるとこの細かい点がPCのディスプレイに比べて縦横2倍に細かいのです。これによって小さい画面でも驚くほど綺麗な画質を実現しています。スマホの画面ってPCのディスプレイに比べてビックリするほど綺麗ですよね？ 画像を画面上で300×300pxの大きさでPCで見た時と同じように綺麗に表示したい時は、用意する画像のサイズを600×600pxにしておいて縮小表示する必要があります。スマホに対応していないサイトのバナー広告などを、ダブルタップとかして見るとぼやけていて汚い場合が多いです。 まぁ、そもそもこの事が原因かどうか確信はないのですが…(笑) この回答で補足したかったのは、試すのならもっとサイズの大きい画像を！という事です。
jQuery mobileをダウンロードし、CSSファイルから.ui-content .ui-listviewの値を直接書き換え、カスタマイズしたファイルをアップロードしてそれを読み込むようにします。（つまり、http://code.jquery.comは使わない） けれど、そのへんのカスタマイズなら、直接CSSを書き換えたりするのでなく、Theme Rollerでデザインをカスタマイズしオリジナルなデザインを作成し、それをダウンロードして使用するのが一般的じゃないでしょうか。
> CSSのVM、VHは、プラグインなどを使って、アンドロイド > ブラウザ4系でも使えるようにすることなど出来ないのでしょうか？ プラグインて、Javascript のことですかね？ 無理かと思います。 そんなものを作るくらいなら、最初から vw, vh を使わないほうが遥かに簡単に開発できるでしょうし。 > まだどうしても実務では無理でしょうか？ それはそれぞれの仕事場の責任者が決めることです。「サイトを使用するユーザ全員が最新版ブラウザを使っている」ことが確定しているところであれば、使用を解禁する判断もあるでしょう。 一般向けのサイトであるならば、ブラウザの利用状況を見ながら決めることになるかと思います。ちょっと古いですが、今年4月の状況は以下のとおりです。 http://uda2.com/blog/share2015/ これをみると CSS Values and Units Module Level 3 に未対応のブラウザが、まだかなりのシェアを握っていますので、利用解禁のGOサインを出すのは難しいでしょう。「未対応のブラウザを使っているようなロートルなど、ウチの客ではない。出入り禁止で良い」と割り切る判断もあるかもしれませんが。
.test は class="test" と記述された要素（タグ）全部に対して適用されます。 例えば <p class="test"> とか <body class="test"> とか。 なお、p.test は class="test" と記述された p 要素（タグ）に対して適用されます。 <p class="test"> には適用されますが、<p class="hoge"> や <div class="test"> には適用されません。 詳しくはこのあたりを参照してください。 http://weboook.blog22.fc2.com/blog-entry-268.html
CSS の仕様では、padding-left に負の値は許可されていません。 https://developer.mozilla.org/ja/docs/Web/CSS/padding-left 従って、質問者さんの予想通り「マイナス値を指定していることが」エラーの原因かと思われます。試しにマイナスを取ってエラーが消えるようであれば確定ですね。
ソースを作る人の都合です。 今でこそ HTML などのソースは UTF-8 で作るのが一般的ですが、UTF-8 はそもそも 2003 年にできた比較的新しいエンコードです。できたのが 2003 年で、普及したのはもっと後の話になりますので、使われだしてから 10 年ほどしか経っていません。 HTML などの Web 技術はそれ以前からありましたから、UTF-8 登場以前に作られたソースは全て UTF-8 以外のコード、例えば Shift_JIS や euc-jp で書かれています。その時代のソースがそのまま使われ続けていることもありますし、その時代に書かれた古い本で学んだ人が使うこともありますし、その時代に技術を学んだ人が会社で偉い人になって後輩に教育しているケースもままあります。
もしかしたら、table[summary="table名"]に border-collapse: collapse; が指定されていませんか？ ※リセットファイルなどにあるかもしれません その場合、border-collapse: separate;と指定しなおすと、 paddingが効く様になります。 また、別の方法として、 table[summary="table名"]にCSSを適用するのではなく、 tdに対して指定したら効くと思います。 table[summary="table名"] td { padding: 5px 10px; }
jquery mobileというのは、jqueryをベースに作られたモバイルサイト用ライブラリです。jqueryに加えて、モバイルサイトのページ生成に関する仕組みが用意されており、それにしたがってページを作ることで、モバイルに最適化されたページを簡単に作れます。 もちろん、jquery mobileを使わなくてもモバイルサイトは作れます。ただ、細かい点でモバイルに最適化されたページを作るのはけっこう大変です。jquery mobileを利用すれば、そうした点で苦労することなく最適化されたページが作れます。 ですから、まずはjqueryを一通り学習されれば良いと思いますよ。jquery mobileでも、jqueryの知識は基本的に必要ですから。
キャリアが用意した専用アプリ以外は、アプリを追加できない特殊なAndroidだと思えばいいです。 フィーチャー・フォン（ガラケー）の形をしているだけで、中身はAndroidベースです。 操作系はタッチパネルではなく、テンキー部分がノートPCのトラックパッドのようになりポインターを動かします。 イメージとしては小型ノートPCと思えばいいです。 ブラウザは基本的にChromeですから、PC用やスマホ用のがそのまま表示されます。 ガラホ専用とか意識して作る必要はありません。
その場合は下記の様にすれば実現できます。 ■html <p class="a">あいうえお</p> <p class="k">かきくけこ</p> <p class="s">さしすせそ</p> ■css .a{ margin-left:10px; } .k{ margin-left:20px; } .s{ margin-left:30px; } 基本的にhtmlは「文書」ですので情報のマークアップのみを行い、 レイアウトは全てcssで行うのが基本です。 スペースで間隔を空ける、という事はしてはいけません。 といっても、仕事ではなく趣味のサイトか何かで検索エンジンも考慮せず、 とりあえず表示だけさせればいい、という事なら スペースを使うのも自由です。 半角スペースはいくつ打ってもひとつ分の間隔しか空きませんが、 全角スペースまたは「&nbsp;」なら打てば打っただけ間隔があきます。 上記の様に、適当に作るならスペースもありだと思います。 が、cssを覚えないと結局はそのうちレイアウトでつまづきますよ。
未更新
WP-Membersがいいよ！　というかそれしか使った事ないのでそれしか分からない。
No. 1のものです。 すみません、ざっと見ただけだったので状況が確認できておりませんでした。 根本設計の部分に関わる 複合的な問題だと思われます。 ( こちらの問題を解消するには 根本設計の見直しが必要になる可能性が高いです ) 1. #content の所で 右側マージンと左側マージンが設定されているため、左側マージンが適用されてズレて見えているような気がします。 2. CSSのレスポンシブ部分に関しまして、 @media (max-width: 400px) { と記載されておりますが、 max-width のみを最後に指定する記述法はあまり見かけません(通例 min-width 等で区切ったりします )。 http://sole-color-blog.com/blog/php/71/ こちら等でお手数ですが一度レスポンシブデザインの書き方を参考にしてみてください。 (更にレスポンシブデザインをiPhoneで適切に表示するためには meta の viewport指定が必須となります。崩れてしまったという事でお話を伺いましたが、一般的なスマホ対応を実施する場合、viewport指定をして 且つスマホでもデザイン崩れせず見られるようにコーディングする必要があります ) また iPhone デバイス対応をする場合 max-width:480px が通例です( 縦画面で見た際320px, 横画面で見た際 480pxのため )。 3. また、こちらは憶測ですが、PCのサイトが元々あって、追加でレスポンシブ対応した形になりますか？？ レスポンシブデザインは モバイルファースト設計といって モバイルでの見え方 PCの見え方 それぞれ考慮した上で設計する必要があります( PC版であらかじめガチガチに組んであるものをレスポンシブ対応するのは 既存のPC版のデザインにも影響が出たり、結構難しい作業になってきます )ので、 レスポンシブ対応する場合は SP / PC 両面で設計を見直す、あるいは SP版、PC版で表示するページを変える 等の対応が良いと思われます。 レスポンシブデザインに関してはこちらの文献に丁寧に記載されており、参考になりますので 是非一度書店でぱらぱらと読んでみてください。 http://goo.gl/NI754B 以上となります。 参考になりましたら幸いです。
このコードだと、 width:200px のところで幅を絶対指定しているので、幅は可変にはなりません。 まずはこれを、 width:100% としてみてください。 幅を縮めたければ、80%、90%など、パーセントの数字を変えてみてください。 ボタンの親要素も可変幅になっていれば、これでボタンの幅も親要素の幅と一緒に変わるはずです。親要素の幅指定も、「width:○○%」という風に、相対指定にしてみてください。
現場による。 もちろんあった方が良いにこしたことはないし、開発現場も広がります。 CSSの知識と何かの言語をやってたら、それなりに分かる。 JS、jQueryより難しくないので、その程度のものだと思います。 それとjQueryやJSの基礎知識程度では、現場ではやっていけません。 俺の関わった現場は、ほとんどがスパゲッティなコードばかり、1つファイルにのhtml、CSSはもちろんのことJS、jQuery、node.js、Rudy、Perl、php、phpテンプレートエンジン(smaty、twig)などなどがごちゃまぜで書かれてます。 それを読み解いて、上手くコーディングすることもしばしありまくり。 だから、周りとの人間関係も重要、調べる能力とすぐ聞いて吸収する能力ないと相手にされなくなるけど、ま、たくさん現場経験したりその都度勉強していけばなんとかなることもある。 必死で食いついて勉強するか、どんどん現場経験をこなしていくかの覚悟を持たないと病んじゃうと思います。 よは、今の能力に見合ったところで働き、その現場で他のことも吸収し、ステップアップするのが良いです。 社内の人間や営業の人間にそそのかされて、出来ないことをやろうとしないことも必要です。 1から教える気もないことをやる必要はないです。 けど、色んなものを見て興味を持ち、こっそり調べたり勉強しておくことは必要です。 それで的を得た回答が出来るようになったら、やって見るのが良いと思います。
定番といえばやはりモリサワかなぁと思うので、 定番7書体パックなどがあります。 http://www.morisawa.co.jp/font/products/basic7/ 年契約で全フォント使えるサービスもあります。 フォントワークスが対抗馬で こちらも年間契約プランがあります。 OpenTypeフォントの29書体はどれもよく見かけますね。 http://fontworks.co.jp/products/package/ 最近はフリーフォントでもいいものが多いので、とくにWebなどでは合わせて使うといいんじゃないかなと思います。
1. xxxxxはhtmlエスケープしてますか？ JSPの場合は普通に書いてもエスケープされなかった気が。 2. value="<%=xxxxx%>" のように["]で囲みましょう 3. これが本題 JSPはWebページとして使うのであれば、要は 「どのようなhtmlを出力するか」 なわけです。 なので普通のhtmlと同じで、<option>タグのテキスト要素として「"&%<>」を出力するのであれば、 「"&%<>」をhtmlエスケープ文字として出力する必要があります。 なので 「&quot;&amp;%&lt;&gt;」として出力するようにしてください。
ダウンロードではなくアップロードではないですか？ アップロード上限を上げるのは、通常php.iniか.htaccessを使います。 それで出来ないサーバーもありますが、その場合は大体サーバーのコントロールパネルからphp.iniが設定できたりします。 ロリポップサーバー等がそれにあたり、確かロリポップは20MBが上限でそれ以上に設定は出来ません。 php.iniや.htaccessのアップロードが有効なサーバーなら書いた数値を上限にできますが、それでも2GBは上げられないサーバーも多いです。 そもそも普通は何GBも上げられるような設定にはしないでしょう。 大量のファイルや重いファイルを上げるなら、ブラウザからやらずFTPを使いましょう。
WordPress PortableのWebページが2013年以降更新されていないようですので、 既にメンテナンス(更新)されていないのではないでしょうか？ 性能は劣るようですが、"Instant WordPress"という同様のツールもあるようですので、 こちらは最新のWordPressにも対応しているようです。
a:link で色を付けようとしている場合は、href は必要です。 href が無い a タグは、リンクではないので a:link で色を付けることができません。 a.a_0ken{ color:red; } ならば href が無くても色が付きます。
HTMLのバージョンによって事情が多少異なるのですが、HTML4系 (現在普通に使われている HTML) では『省略しても動く』程度に考えたほうが良いです。少なくとも「積極的に省略したほうが良い」ものではありません。 そもそも type 属性の内容は、ブラウザが「そのデータが読込不可能なタイプかどうか (読込不可能な場合はそのリンクは無視する)」を判断するために使用します。なので、ブラウザが読込不能なタイプをわざと記載しない限りは、使われることがありません。 HTML のバージョンが HTML5系の場合は、rel="stylesheet" を指定したすれば type 属性は省略しても良いことになっています。「省略しても良い」ですから、書いても別にかまいません (無視されますが)。
宣言を行わないでも、最近のブラウザは文法エラーに対して寛容なので、表示はちゃんとしてくれます。 ですが、HTMLもXHTML1.1などいくつか種類がありますし、ブラウザ毎に文法エラーへの対応強度が違うので、ちゃんとHTML５である事を理解するためにDOCTYPE宣言などをきちんと宣言してから書くべきでしょう。
>> ＞＞ >> relativeの基準位置は親要素は関係なく、「元々居た位置」です。 >> >> もともといた位置とは、その要素を配置した位置ということですか？ そういう事ですね。 static(無指定)の場合と同じ位置、そこが基準点です。 relativeを指定して、left(right)とtop(bottom)が無指定なら配置場所はstaticと同じです。 relativeを指定して、leftやtopに数値（と単位）を入力すれば、staticの位置を基準として入力した数値分動く事になります。
普通にphpを書けばいいと思います。 ・入力欄に書いたphpが有効になるプラグインを導入する ・page.php内に、特定の固定ページだけ有効になるように条件分岐した上でphpを書く ・page-hoge.php等のように、別のテンプレートを作って特定の固定ページに適用させる 等のやりかたが考えられます。 最後の方法が楽だと思いますが、私なら無駄にファイルが増えない2番目のやり方でやりますね。
1×1pxでも1万×1万pxでも、何ピクセルでもいいです。 印刷用のCSSでその画像のwidthとheightを50mmと指定すれば50×50mmで印刷されます。
apache ssi
まず、教員のリスト全体をDIVで囲み、そのDIVに対して固定でwidthを指定します。 その上で、1人の教員の情報をさらにDIVタグで囲み、このDIVに対しても、widthとfloat:leftを設定します。 float:leftを言うのは、要素を左に寄せて配置するCSSです。 float:leftで要素を配置すると、左から要素を並べて表示します。その際、1行に入り切らなくなった要素は、下に下がりまた左から表示するようになります。 つまり上記のfloat:leftの性質を利用して、全体のDIVのwidthを固定で指定し、更に教員のDIVのwidthを全体のwidthに丁度２つ収まる数値で指定すれば、1行に２つずつ教員のブロックを表示する形でページ内に配置することができる訳です。 もっと詳しく知りたければfloat:leftで検索すれば、色々と調べられると思います。 ご参考まで。
こんにちわ。 PHPでPCとモバイルの振り分けを行いたいのでしたら、 User-Agentをチェックすれば良いと思います。 参考URLにも記載されておりますが、 以下に簡単にサンプルを掲載させて頂きます。 ----------------------------------------------------------------------------------------- $ua=$_SERVER['HTTP_USER_AGENT']; if((strpos($ua,’iPhone’) !== false) || (strpos($ua,’Android’) !== false)) { #User-AgentにiPhoneかAndroidが含まれる場合の処理 (モバイル用処理) } else { #PC用処理 } -----------------------------------------------------------------------------------------
＞データ量が多くなり表示に時間がかかるからなどということは実際上問題にならないと思いますが。 サイトの利用量によっては問題。 ただそれだけ
CSSでは親の要素を指定できません。 javascriptを使うしかないと思います。
htmlとjsがないので、正確にお答えできるかわかりませんが、 #page-top　に指定されている bottom:16px;　の値を増やすと位置が上に行くかと思います。 おっしゃっている意味と違いましたらすみません。
#mainと#subのmin-height:100%;をheight:100%;にしただけでできましたよ。 height:auto;も不要。 チェックしたブラウザ：IE9、Chromem(最新)、Firefox(最新)、Safari(Windows最終) なぜmin-heightとheight:auto;なのかが不明ですが、 もしこれをやりたいんだとすればheightが足りてないです。 http://css-eblog.com/csstechnique/min-height-forie.html ただ、目的から考えてmin-heightを実現させる意味がないので普通にheight:100%;だけでいいと思います。
　無駄だと思います。アンドロイド若しくはｉOS端末のみの世界になるわけです。ＰＣで言えば、ＸＰ　ＯＳ向けアプリケーションを開発するようなものです。
でした)。 HTML5 の公式は起源となった WHATWG といいたいところですが、WHATWG では HTML Living Standard に名称変更したので HTML5 とするなら W3C が公式になるのでしょうか。 CSS Level 3 は仕様が分化しているので何を持って CSS Level 3 になるかは難しいところですが…。 厳密にやるなら "CSS Color Module Level 3" や "Selectors Level 3" 等でロゴを分けることになるので、多数のロゴが出来る事になります。 # Re: takuwaveさん
.wrap{ display:table; } .wrap>div{ display:table-cell; vertical-align:middle; } を div.button_area の記述より後ろに加えてみてください。
文章だと説明しづらいので、画像を添付しますので参考にしてください。Photoshop使いなら何となく意味は分かりますよね…？
style.cssの1082行目　#slider .featured-title spanの下にある color: #FFF; の#FFFの部分を他の色に変えれば、大きな文字の色が変更されます。 次に1094行目　#slider .featured-excerpt spanの下にある color: #FFF; の#FFFの部分を他の色に変えれば、すぐ下の小さな文字の色が変更されます。 もう一つ1101行目　#slider .featured-link aの下にある color: #FFF; の#FFFの部分を他の色に変えれば、「Read More」の文字色が変わります。 あとはcssを編集し、アップロードして差し替えればOKです。 もしかしたらこんなことをせずとも、WordPressのテーマの設定で簡単に変えられるかもしれませんね。
web業界では、データ重視で考えられています。 もしかしたらファーストビューに問い合わせフォームを置くデザインがCVRが高いかもしれないですし、説明した後にフォームを配置したほうがCVRが高いかもしれません。 それはそのサイトの発信している情報内容や全体的なデザインによって異なります。なので画一的な答えはありません。つまりやってみないとわからないです。やってみて、アクセス解析をしてそのサイトのデザインを最適化していきます。 というのがweb業界における一般的な考えであると思います。
エクセルで投稿する事は出来ません。 オフラインで作業したければ、普通にオーサリングソフトやテキストエディタで行うのが手っ取り早いでしょう。 私は普段はDreamweaverで組んだものをぺろっと貼りつけて投稿してます。 また質問の趣旨とは違うでしょうが、TinyMCE Advancedのような投稿画面で選択できるプロパティを増やすようなプラグインもあるので、直接htmlを組むのが苦手な人はそういったものを使ってもいいですね。
多分「ライブビュー」を有効にしてるからでしょう。 無効にしてみてください。 https://helpx.adobe.com/jp/dreamweaver/kb/cq20120822.html ※ボタンの位置はバージョンによって異なります。
＞　viewport の設定の問題ではないようです。iPhone は　body tag のマージン設定を無視するように思えます。 私の手元の環境でテスとすると問題無くマージンが反映されますね。 iPhoneは5sでiOS8.3です。 ========== <!DOCTYPE html> <html lang='ja'> <head> <meta charset='UTF-8'> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>サンプル</title> <style type="text/css"> body { margin-left: 20px; } </style> </head> <body> あいうえお </body> </html> ========== 何か他のスタイル設定が邪魔してるんじゃないでしょうか？ 開発者ツール等で、適用されているスタイルを細かく調べてみるといいと思います。
ソースコード上で以下のように改行されていた場合、 半角スペースが挿入されることがあります。 ---- 1 <span class="test">2</span> 3 ----
CSSで指定する場合、単に noscript {...} だと上手く機能しないので…。 -------------------- ◆CSS記述 p.noscript { color:#f00; } ◆HTML記述 <noscript><p class="noscript">当サイトはjavascriptを使用しています。</p></noscript> -------------------- ～上記の様に何か適当な<p>なり<div>なりを割り振って、それにCSSを当てる様な方法にしてみてください。
解決した様で良かったです。 おっしゃるとおりです。
サイトの利用者にとって『自分がサイト内のどこを見ているか』がわかりやすくなる効果があります。サイトが大規模で構成が深い場合(いくつものサブメニューがある場合)、そのサイトを閲覧している人は『今、どのサブメニューにいるのか』『さっき選択したサブメニューに戻るにはどうしたら良いのか』を見失いがちです。パンくずリストは、トップページから選択したメニューを順に表示することで、『さっき選択したサブメニューに戻る』ことを容易にします。 ですので、メニューの構成が単純なサイト(メインメニューくらいしかないサイト)では、効果が薄いです。また、『検索されやすくなる』などのSEO的な効果は全くありません。
こういう感じでどうでしょうか。 <div style="display:table;"> <div style="margin-right:20px; width:220px; display:table-cell; vertical-align:middle;"> 東京都.......<BR> 03-.......<BR> </div> <div style="width:220px; display:table-cell;"> <img src="../map.jpg" /> </div> </div> 基本的にhtml+cssというのは、テーブルのセル内を除き、縦方向の中央寄せが出来る仕様ではありません。 （特にプレーンテキストがある場合） 無理矢理できなくはない場合も多いですが、結構めんどくさいんですよね。 今回は、display:table-cell;を使って疑似的にテーブルの様な表示方法にさせた上でvertical-align:middle;で縦の中央配置を行いました。 floatは不要なので削除してます。 ※display:table-cell;はIE6以下には無効なので注意 > ブラウザーの横サイズを小さくしていくと > 要素が縦並び(上：住所　下：地図)になって中央配置にしたいと考えています。 これはメディアクエリを使用して、 指定した横幅以下になった場合にdisplay:table-cell;とdisplay:table;をdisplay:block;で打ち消した上で、 width:auto;でも入れてtext-align:center;を指定すればOKでしょう。 また、恐らくは質問しやすいようにタグに直接cssを書いてるんだと思いますが、外部ファイルでやってくださいね。 レスポンシブはインラインスタイルだけでは実現しません。
掲示板はこんな感じですかね？ http://blogger-base.com/ 下記のところを見たら、勉強になるかなと思います。 http://naifix.com/buddypress-bbpress/
こんにちは。 ＞ブログタイトルの文字色の変更 h1 a {color:#000000;} h1 a:hover {color:#000000;} h1 a:visited {color:#000000;} のカラーコードを変更します。 上記ではすべて同じ色（#000000＝黒）が設定されていますが、それぞれ別の色を指定することも可能です。 なお、それぞれの要素の意味は下記ページなど参考にしてください。 http://www.tagindex.com/stylesheet/basic/format5.html
>padding:0px 5px; paddingは1～4つの値が設定でき、値を設定した数により適用位置が決まります。 padding : 1px;　　　　　　　　上下左右:1px padding : 1px 2px;　　　　　　上下:1px 左右:2px padding : 1px 2px 3px;　　　　上:1px 左右:2px 下:3px padding : 1px 2px 3px 4px;　　上:1px 右:2px 下3:px 左:4px また、paddingは上下左右を一括定義する方法ですが、個別に指定する事も出来ます padding-top : 5px; padding-bottom : 5px; padding-left : 5px; padding-right : 5px; これを踏まえて、上のpaddingだけ0にする場合の一例です 例1) padding : 0 5px 5px; 例2) topだけ上書きする padding : 5px; padding-top : 0;
JavaScriptを使ってリンクがクリックされた時にスタイルを書き換えるのです。
同じでないのだまとめられません。 0px 10pxの間違いなら下記のようにできます table[summary="テーブル"] th, table[summary="テーブル"] td{ padding:0px 10px; }
imgにもborder-radiusを指定しましょう。
ふしぎだねーと思って見ましたが笑いました。 <link href="/card/style.css" rel="stylesheet" type="/text/css" charset="UTF-8"> type="/text/css"　× type="text/css"　○ 今後このような現象が発生した時に慌てずにすむようになりました。 逆に感謝します！
> Error: Not a valid Facebook Page url. 「facebookページのURLとして有効ではありません」と書かれています。 意味はそのまんまです。facebookページのURLではないんです。 多分個人アカウントのウォールを埋め込もうとしているんだと思いますが、 Page Pluginは「facebookページ」用のウィジェットです。 個人アカウントとfacebookページは別のものです。 個人アカウントを埋め込む方法はありません。 facebookページを作りましょう。
文字装飾は何を使っても良いです。自由です。あとはCSSで指定して書けばよいです。 これがよくわからないなら、もう少しCSSの知識を深めた方が良いでしょう。
どこの事かよくわかりませんが、 css の　opacity　と　text-shadow で再現できるのでは？
CSSはバージョンによって書き方が変わる事はありませんが、使える機能が大きく変わります。
ハイパーリンクは関係なく、英字が改行しないという問題ではないのですか。 table{ width:345px; word-break: break-all; }
(1)は、リンクの部分に、title=""　で、できるのでは？ ただし、フェードなどをかける場合は、その記述が必要 (2)に関しては、最初に表示する部分を設定で！ (3)に、関しても(1)と、同じ方法で対処できるのでは？・・・ あとは、それぞれのtitleに、classを設けCSSを記述する。
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) { 　.sample:not(:target) { 　　top: 0.5em; 　} } この部分は、CSS（Mediaqueries）では？・・・ Hackは下記のようにかくのでは？・・・ <!--[if lt IE 7 ]><html class="ie ie6" lang="ja"> <![endif]--> <!--[if IE 7 ]><html class="ie ie7" lang="ja"> <![endif]--> <!--[if IE 8 ]><html class="ie ie8" lang="ja"> <![endif]--> <!--[if (gte IE 9)|!(IE)]> <![endif]-->
HTMLの記述は、正しく書かれていますか？・・・ ブロックレベルのものを、center表示するには、もう一つ大きなブロックレベル（大きな入れ物）の中に、 記述すればできます。 <div class="naka"> <div class="text"> </div> </div> CSSは、下記 .naka{text-align:center;}
私のPCには、2014 CC しか入っていませんので、失礼しました。 しかも、使うことがないので・・・すべて手入力です。 CC 2014にはボーダーの部分に、プロパティを設定できるようになっていました。
ご質問者様の方法だと、常にPタグのフォントサイズが小さくなってしまいます。 特定のtdタグだけ、フォントサイズを小さくしたい場合は、たとえば、以下のようなやり方が良いと思います。 <html> <head> <title></title> <STYLE type="text/css"> <!-- .small { font-size: 20%; } --> </STYLE> </head> <body> <table border=1 cellspacing=1 cellpadding=1> <tr><td>普通</td><td>普通</td></tr> <tr><td>普通</td><td class='small'>test</td></tr> </table> </body> </html> これを参考に、小さくしたいtdタグは、<td class='small'>とクラスを振ってください。
<Chrome> F12、または 表示＞開発／管理＞デベロッパーツール　 または右クリック＞要素を検証 http://www.buildinsider.net/web/chromedevtools/01 <Firefox> F12、または 右クリック＞要素を調査 https://developer.mozilla.org/ja/docs/Tools/Page_Inspector/How_to/Open_the_Inspector 何れもブラウザの下部にソースが記載されたウインドウが表示されます。 そのウインドウの右側にCSSが表示されている筈です。
タイトルは変えたみたいですけど、 http://okwave.jp/qa/q8952779.html 同じ質問に見えますね。
CSSの記述が必要です。 #header { background: linear-gradient(90deg, #05a 10%, #21b3b2 90%); } となっているようです。 ☆#headerはヘッダー（div）に割り当てたIDです。
Windows・Mac両方に対応しているスライダーを作成するソフトですね。 まずは、Downloadを行い解凍すると、ｃcssSlider-full-setup.exeというアイコンができます。 このアイコンをダブルクリックすると、インストールが始まります。 インストールが終わると、ディスクトップ上にcssSliderアイコンができているので、これをダブルクリックする。 Add imagesをクリックし、画像を追加（有料なので、お金を払っていれば）SaveHTMLで自動的に書きでしてくれるようです。タイトルなどもこの時に設定しておけば、できるようですが、８,265円というのは、いささか高いかも？・・・モーヒングなど非常にきれいなので、初心者には価値があるかも？・・・ 書き出される、csslというファイルは、xmlファイルなので、これだけを利用するのであれば、無料で利用できる。 ただし、HTMLが、書き出しできるかどうかは、あなたしだいでは？・・・ 元のソースは、lightboxなので、lightbox2などを参考にすれば、ご自身でも作れるのでは？・・・
CSSの記述方法が、理解できていないのでは？・・・ table[summary="テーブル１"]{ background-color: gray; } は、テーブルに対しての設定 table[summary="テーブル１"]th{ background-color: gray; } は、記述が間違っている。 th の前に、spaceが、抜けている。 table[summary="テーブル１"]　th{ background-color: gray; } これで、table[summary="テーブル１"]の中の、thの設定となる。 table[summary="テーブル１"]　th{ background-color: #cccccc; } と、カラーを16進で、指定してもいい！
以下の部分以外は、基本的な使用をするのであれば共通ですね。 _gaq.push(['_setAccount', 'UA-*******-*']);
HTMLの仕様書を熟読されることを、お薦めします。 一般的に、ブロック要素の、子要素としてインライン要素を、記述できるが、インライン要素の中に、ブロック要素は、記述できない！ <div> <p> <span class="#"></span> </p> </div> と、いうように記述するが、 <span class=#"><p></p></span> とは、記述できない！ HTMLは、文書構造を正しく記述することが基本です。
StudioMX作ってたマクロメディア社をadobeがお買い上げになって 今はクリエイティブクラウドという製品の中の一つとなってます。 Adobe Dreamweaver CC 月額制っす。 1ヶ月無料試用できるっす。
table=表に、text-align:center;を指定すれば、table内の文字は、当然ですが、center割りつけになります。 テーブル全体を、center割り付けにするには、table自体を内包する入れ物が必要になると考えれば、簡単に理解できると思います。 そのために、仮に、入れ物の名前を、box1 としてみましょう。 .box1{ text-align:center; padding:10px; } .box1 summary{ font-size:80%; color:#ff0000; } などと、cssに記述しておき、HTMLは、下記のように記述します。 <section class="box1"> <table border="1" summary="表１"> </table> </section> HTML5以前の記述の場合は、section⇒div　ということになります。
ココナラというサイト(他にもありますが)にらそういったチューターさんがいると思いますよ。 http://coconala.com/
<abbr title="Horizontal Rule">hr</abbr>は、水平罫線といういみですが、 hr{border: 2px red}ですと、2pxの赤い線を引くということになってしまいます。 線の形状が、指定されていません！ hr{border:solid 1px #00ffff;} あるいは、hr{border:double 2px red;} などと、指定されては、いかがでしょうか？・・・
<!DOCTYPE html> <html> <head> <link type="text/css" rel="stylesheet" href="stylesheet.css"/> <title>About Me</title> </head> <body> <img src="http://s3.amazonaws.com/codecademy-blog/assets/46838757.png"/> <p>We're Codecademy! We're here to help you learn to code.</p><br/><br/> <div> <a href="https://facebook.com">Join us<span>Facebook<span> </a> </div> </body> </html> 質問の回答とは、少々違いますが、HTML自体の記述に間違いがあります。 タグの意味が理解できていないのでは？・・・ <br />の、繰り返しは、ありえません！（冊子などによく書かれていますが、間違いです！） <br>・<br />の意味は、brake・ブレーキ、すなわち強制終了という意味です。 その行で、強制的に終了する。ゆえにブラウザのレンダリングは、改行して表示するということです。 正しくは、このHTMLの場合、Pタグのbottomに、２文字分の、marginあるいは、paddingを、とる必要があります。 また、＜abbr title="division">div</abbr>⇒最近のHTML5では<section>は、段落などの集まりを、あらわすので、classを用いて利用するのが、一般的です。 ブロック要素ですから、この中に、text-decoretionを、書くことはないでしょう！ ブロック要素内の、インライン要素（たとえばｐ）に、指定しないと、意味がないでしょう。 <div> <p><a href="https://facebook.com">Join us<span>Facebook<span></a></p> </div> のように、記述しないと、文章構造的におかしくないですか？・・・
このHTMLタグだとCSSは .over p input:hover{ opacity: 0.6; filter: alpha(opacity=60); -ms-filter: "alpha( opacity=60 )"; } なのでは
<meta name="description" content="" /> <meta name="keywords" content=”" />では？・・・ パンくずとは？⇒意味がわかっていますか？・・・ 用語の意味を、まず、学んだ方がいいのでは？・・・
回答ではありません！ CSSのソースを、UTF-8で保存しているのか、Shift-jisで、保存しているのか？・・・ テーブルの、summaryの色と枠線を表示したいのではないかと推測しますが・・・ table summary{color:#007fff;border:solid 1px #007fff;} というような、記述になっていますか？・・・ HTML側は、 <table border="1" summary="***の表"> ・・・・・詳細省略・・・・・ </table> CSS側の詳細が、わからない？・・・
tableに触れたら色が変わる⇒というのは、各<tr>に触れたらという、ことでしょうか？・・・ CSSでの指定でしょうか？・・・それとも、scriptということでしょうか？・・・ CSSの質問欄なので、CSSとしてお答えすると、各<tr>項目に、classを設け、：hoverを指定すれば、できると思います。指定順位は、回答者No.2のとおりです。 tableに、CSSを指定すると、table全体に、対応してしまいますので、必ず、<tr>に指定してください！ tr .bg1{color:#000000;} tr .bg1:hover{color:#336699;background-color:#336699;}
<abbr title="Paragraph">p</abbr>は、段落という意味ですが、Lineを引くだけで使用するなら、<hr>タグに classを設けて（汎用的に利用）利用した方が、いいのでは？・・・ また、ラインを引くだけであれば、border-bottom:#ffffee; とか、border:url(***);と書かれた方が、よりベストではないでしょうか？・・・ <img src="" width="" height="" alt="" />でも、表示結果は同じですが、CSSを使う意味がなくなります。 background-image:url();というのは、”背景にこの画像を使います”と、CSSで宣言している！ ｐ以外にも、span class="line1"とか、表現方法は、いろいろあります。 .line1{border:solid 1px #336699;}とか、.line2{border:dotted 1px #008000;}など
参考にされているサイトが、ふるいのでは？・・・ ブロックレベルとインラインレベルの違いが理解できていますか？ 最近では、HTML5での記述が多くなりましたが、考え方は、まったく同じです。 ただし、tableの表示領域を、divではなく、sectionで記述するようになりました。 <section class="表" > <table border="1" summary=""> 　・・・途中省略・・・ </table> </section> 表示位置は、table{text-align:center;} で、どのブラウザで、表示されても、中央表示になります。 W3Cなどの仕様書を熟読されることをお勧めします。
スマホ対応を考えるならシングルページで作ったほうがいいでしょうね。 http://ascii.jp/elem/000/000/921/921580/ テンプレートもありますので、ここから練習するといいでしょう。 http://websae.net/html5-templates-20140519/
まさかとは思いますが？・・・ <ul> <li>1.・・・・</li> <li>2.・・・・</li> </ul> などと記述しているのでは？・・・ <ol>は、番号付リスト項目 <ul>は、ただのリスト項目 に、使用するタグです。 仮に：100から番号を振る場合は、<ol start=100"></ol>という、記述になります。
　</head>の直前でいいと思いますよ。 ◆ウェブ トラッキング コードを設定する - アナリティクス ヘルプ 　https://support.google.com/analytics/answer/1008080?hl=ja#GA ◆トラッキングコードの確認と設置 - Google Analyticsの使い方 　http://www.adminweb.jp/analytics/setup/index7.html
例えば背景を指定しているcssに background-size:100% auto; という指定を追加すれば、横幅はブラウザ幅に合わせて可変になります。 縦との関係もあるので万能ではないですが。 その他、jsを使えばスマホの場合に読み込む背景画像を変える様な事も出来ますが、 それよりはメディアクエリで分ける方が簡単だと思いますよ。
そのままというのは左揃えでということと解釈しまして、 div, ol, ul, pなどのブロック要素を中央寄せするには左右のmarginにautoを設定します。 ブロック要素はwidth: auto;がデフォルト（横幅いっぱいになる）ので固定値なり%なりを指定します。 以下、例です。 #filter{ width: 250px; margin:0 auto; }
borderの1pxだけが消える、という事でしょうか？ 親ボックスにoverflow:hidden;が指定されていて、並べたものの一番下がはみ出した扱いになっているという可能性は考えられます。 jsを使っていると思うので、その計算が上手くいっていないという事も考えられます。 まぁこれだけの情報で特定するのは難しいので、まずは親ボックスにoverflow:hidden;があるかを確認して、あれば削除してみて挙動を確認するのが良いと思います。 それで解決しない場合は、もう少し情報を出しましょう。
liはブロックレベル要素ですので、本来はブラウザや親ボックの端から端までの幅を持っています。 端から端まで行かないのは、li自身か親ボックスのどれかにwidthが指定されているか、float , display:inline; , display:inline-block;のどれかが指定された上で内容物（テキストや画像）の横幅が少ないか、等の原因が考えられます。 「cssに何と書くのか」ではなく、「cssのどれを削除するのか（または打ち消すのか）」という話だと思いますので、 せめて現在のcssくらい書かないと情報不足で誰も回答できませんよ。
body { overflow: hidden; } を外せばブラウザにもスクロールバーが出るので、そのスクロールとdiv2のスクロールを合わせればENDまで見る事が出来ますよ。 スクロールが二つになって扱いづらいですが、div2にheight:100%;を入れている限りは必ずブラウザからはみ出す部分が出てくるのでその方法しかないです。 div2の高さを「ブラウザの高さ - div1 - 隙間」という数値に設定したいなら、隙間はブラウザの初期値を全部消した上で<br>を使わずピクセルで指定し、javascriptでdiv1の高さを取得した上で100%からマイナスするといいでしょう。
このあたりの記事が参考になると思います。 サンプルコードをしっかり読んで、うまく組み込んでみましょう。 http://weboook.blog22.fc2.com/blog-entry-359.html http://ri-mode.com/rainbow/2014/06/11/simple_css_dropdown_menu/
post-titleやh2は記事タイトルなのでそこを変更しても「各投稿同士」を詰めるのには適してないでしょうね。 デモサイト（http://demo.alxmedia.se/hueman）を見る限り、 投稿一覧の各記事の下の隙間は .archive .post に対するmargin-bottom: 40px;が効いてます。 各記事の右の隙間は .post-list .post-inner に対するmargin-right: 30px;が効いてます。 このあたりを修正する事になるでしょうね。 firebug等を導入してチェックすれば、簡単にcssを調べる事が出来るので便利ですよ。
「 important!」では無く「 !important」です。
スライスした画像の場所とHTMLを記述している場所が違っているのでは？・・・ スライス画像を、仮に、imagesというホルダーに保存しているとします。 この画像を表示するタグは、下記のようになります。 <img src="images/表示したい画像名" width="幅" height="高さ" alt="画像が表示されない場合の代替え文字" />
cssやphpの知識があれば、コードの編集はwordpressから直接行えます。Dreamwaverなどは必要ありません。今さえよければ、wordpressのみで完結できます。直接行っても構わないですが、特にphpをいじると、失敗した場合にはログインすらできなくなることがありますので慎重に行ってください。 ★子テーマ wordpressから直接行うとテーマに上書きします。テーマがバージョンアップされると、それを上書きすることになり、折角のカスタマイズが消えてしまいます。そのことを防ぐために、子テーマというものを作り変更の必要な部分のみの別ファイルを作ることが多いです。 子テーマを作ろうとすると、テキストエディターが必要です。macに付属しているテキストエディットでも可能です。愛用のものがあればそれでもOK。 編集時には、壊れていもいいようにバックアップをとるのを忘れないようにしてください。 子テーマを作成・アップするのには、FTPソフトも必要です。 ★ローカルテストサーバー ネットに公開中のサーバーのソースを直接いじると、設定が反映や正しく動くかの確認が取れていないのに公開して試すということになってしまいます。そこで、実験用のwordpressをローカルで動し、確認が取れたら公開しているサーバーにソースをコピーする方法をとる人も多いです。 wordpressをローカルで動かすには、テストサーバーが必要になります。macですと、MAMPがよく紹介されています。 ★ 以上まとめると、「子テーマ wordpress」を解説しているページを読んでみてください。 本格的にカスタマイズするつもりなら、「mamp wordpress」を解説しているページを読んでみてください。 蛇足ですが、他人のテーマはカスタマイズがやりにくいです。コーディングルールを把握しないと、なかなか詳細度が把握できず四苦八苦してしまいます。そんな時には、firefoxやchromeのブラウザで、要素の検証を行うとかなり助かります。
ないです。
手元で確認する限りは、例示されているスタイルで横並びになります。 スタイルの問題ではなくHTMLの記述に問題が有るのではないでしょうか。
【】 】【 こういう素材をつくればいいです。
こんにちわ。 例のサイトと同じような機能を提供しているjqueryのプラグインは見つけられませんでした。 サイトでは、jsを普通に書いて実装されているようでしたので、もしよければ、サイトを参考にご自身で書かれてみるというのも面白いかもしれません。 sub-nav要素とglobal-nav要素辺りの処理を確認すれば、似たような処理は書けるかと思います。 また、以下のサイトはcssやjsの参考になるものが色々ありますので、見てみると参考になるポイントがあるかもしれません。 http://codepen.io/ 最後に私がチラッと見た感じ以下のcssのみで実装している動きはrossi46mail様が求められている動きに似ているかなと思いました。 http://codepen.io/must3r/pen/tqrLJ 回答しておいて、ちゃんとした質問への回答になっておらず、すみません<(_ _)>
何が聞きたいのか、いまいちわからないのですが、こんな感じでしょうか？ <<html> <head> <style type="text/css"> body{border-left:50px solid #000000;border-right:50px solid #000000;padding:10px 50px;} body *{border:1px solid #999999;padding:1em;} div{margin:1em;} </style> </head> <body> <div id="example">&lt;div id=&quot;example&quot;&gt; <div class="about">&lt;div class="about" &gt; <h3>&lt;h3&gt;</h3> <p>&lt;p&gt;</p> </div> <div class="about">&lt;div class="about" &gt; <h3>&lt;h3&gt;</h3> <p>&lt;p&gt;</p> </div></div> </body> </html>
自分は、PCからのスマホサイトのプレビュー用として「Mobilizer」を使っています。 どんなサイトでも確実にプレビュー出来るかどうかはわかりませんが 複雑なサイトを作っていないので、特に不満なく使っています。 http://mobilizer.softonic.jp/
コレがおすすめという決定打は出ないでしょう。 1冊購入してみて、不足するなら、その不足部分を網羅した書籍を購入すれば良いと思います。 複数冊を一気に購入しても内容がかぶって無駄になることも多いのがそういう解説書等です。 最初の一冊はネットでも良いでしょうが、2冊目以降、内容を絞って購入するときは書店で 中身を確認しながら購入するのがお勧めです。 どの本がというのは、その人のレベルなどにも左右されますので、適切な回答は付きにくいと思いますよ。 htmlやCSSなどは慣れですから、頑張って下さい。
input { } とすると 全てのinputタグが対象になりますが [属性=属性値] をつけることで inputタグのうち、この属性がその属性値を持っているものだけを対象にする と言うことができます http://www.webword.jp/cssguide/basic/ この辺がまとめられているかも？
より上位のセレクターを使うか、!importantを追加して優先度を上げれば大丈夫だと思います。
このテーマ、セッティング付ですね。 ワードプレスの管理画面 ダッシュボード　＞　外観　＞　Parabola Settings これで、このテーマのセッティング画面になると思います。 ＞TEXT SETTINGS という場所にタイトルのPXを設定する項目があると思いますが、そこで変更セーブできますか？
別にマテリアルデザインでもフラットデザインでも好きなほうを 選べば良いかと思います。時期によってデザインの『流行』は ありますが、どちらでなくてはダメと言うようなルールはありま せん。 また、「CSSを使うか」「画像を使うか」も好きに選択すれば良い かと思います。画像の重さなど、動画などに比べれば屁でもありま せん。それよりは『自分の満足できるデザインが作れるか』のほう がよほど重要です。 技術的な問題はいったん全て忘れて、自分の好みで考えたほうが良い です。マテリアルとフラット、あなたの好みはどちらでしょうか？ # 『流行』に敏感になりたいのなら、色々ファッショナブルなデザ # インを見て感性を磨くしかありません。ここらへんは服飾と全く # 同じです。
スマホ用にレスポンシブデザインにしていない場合、 全体のwidthによるけど、PCサイトならば、 AndroidでもiOSでも、 　・ viewport 　・ text-size-adjust にて、全体幅をスマホ用の縦画面デフォルト：960pxで普通に全体表示する事ができますが、 他のサイトも全体表示されていないという事であれば、 Androidの設定が全体表示になっていないのでしょう・・・ Androidの「高度な設定」「全体表示」
文字のフォントを変更するもう一つの方法を紹介します。 ・文字の編集/入力できる状態にして、文字をドラッグして選択します。 ・文字が選択されて色が反転したら、フォントを選び直します。 多分これで出来ると思います。
・メールアドレスのとこの幅が 　theadとtbodyで一致していない ・theadにスクロールバー分のスペースが用意されていない てとこじゃないかしら
＄マークはphpの変数か配列を表しています。『query』や『augs』はこのプログラムの製作者がつけた名前です。このように名前を付けておくと、中身を変えるだけで勝手に書き換えてくれるサイトができます。 $query->という書き方は『PHP　オブジェクト指向』とググれば詳しく説明してあるサイトが出てくるかなぁ？ mayomayo123さんの理解できないのはPHPのコーディングのようです。PHPのリファレンス系サイトに詳しく載っているはずです。
Androidの標準ブラウザーでは一部のバージョンでfont-faceが有効にならない場合があるみたいです。ただ、Chromeなどの他のブラウザーでは問題なく表示されるようです。 http://stackoverflow.com/questions/20890489/font-face-declarations-dont-work-in-android-4-3-internet-browser
.test:hover img {} testクラスの領域にマウスが入っているときのtestクラス内のimgに対するスタイル ※マウスがtestクラス内であってimgの外でもimgに対してスタイルが適用されます。 .test img:hover {} testクラス内のimg内にマウスが入っているときのimgに対するスタイル
chromeとie10で確かめましたが、問題なく動きました。 どの環境で試したのでしょうか？ リンクが機能しないというのは、遷移できないのでしょうか？ それとも、リンクにすらなってないのでしょうか？ 言語系に関する質問は、ブラウザ環境などを書くようにするとスムーズに進みますよ。
＞１．上下のスクロールだけでなく、左右のスクロールも出てしまう（こちらは常時出ています）ので、左右のスクロールをなくしたいのですがどうしたらよいのでしょうか？ 　scroll:autoをつかう。CSS3のscroll-yでもよい。 ＞２．高さを固定すると、上下のスクロールが常時出てしまうのですが、メインメニューへのオンマウス時のみ出現させるためにはどうしたらよいのでしょうか？ 　動的擬似クラスの:hoverをつかいます。 ごく簡単なサンプル ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済み HTML4.01 + CSS2.1　border-radiusはCSS3 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* ここから */ div.header div.nav{/* header内のナビゲーションブロックについて */ ＿width:50%; ＿margin:0 auto; ＿text-align:center; } div.header div.nav ul,div.header div.nav ul li{/* ulとli */ ＿margin:0; ＿padding:0; ＿line-height:30px;/* 一行の高さを指定 */ ＿list-style:none; ＿position:relative;/* 以下のサイズや位置の基準にする */ } div.header div.nav ul li{ ＿display:inline-block; ＿width:40%; } div.header div.nav ul li ul{ ＿position:absolute; ＿top:30px; ＿width:100%;/* position:relativeな親liに対して */ ＿height:90px;/* 見せる範囲 */ ＿overflow:auto;/* またはoverflow-y:scroll; */ ＿display:none;/* 隠しておく */ } div.header div.nav ul li ul li{ ＿display:block; ＿width:100%;/* position:relativeな親liに対して */ } div.header div.nav ul li:hover ul{ ＿display:block;/* liにhoverするとblock、詳細度が大きいので上書きされる *. } div.header div.nav ul li{ ＿background-color:black; ＿color:white; ＿background:linear-gradient(gray,black); ＿border-radius:20px 20px 0 0; } div.header div.nav ul li ul li{ ＿background: linear-gradient(gray,gray); ＿border-radius:0px; } div.header div.nav ul li ul{ ＿background-color:rgb(40,40,40); ＿border-radius:0 0 20px 20px; } div.header div.nav ul li ul li:hover{ ＿background: linear-gradient(black,black); } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>あ行 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>あ</li> ＿＿＿＿＿＿<li>い</li> ＿＿＿＿＿＿<li>う</li> ＿＿＿＿＿＿<li>え</li> ＿＿＿＿＿＿<li>お</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>か行 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>か</li> ＿＿＿＿＿＿<li>き</li> ＿＿＿＿＿＿<li>く</li> ＿＿＿＿＿＿<li>け</li> ＿＿＿＿＿＿<li>こ</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
CSS の記述自体に誤りはありません。 他のCSSで設定が上書きされているか、CSS のセレクタの記述 が目的の要素と合っていないかのどちらかと推測されます。 回答No.1 さんがおっしゃるように、『CSSの適用状況を目視 できるツール』を利用して確認されることをお勧めします。
　デザインのためにHTML書くのじゃなく、あくまでHTMLは（文書）構造だけ、プレゼンテーションはスタイルシートで指定します。 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) 　がすべての出発点です。 　あなたの場合文書構造は <body> 　<div class="header"> 　　<div class="header"> 　　　<ol> 　　　　<li>あいうえお</li> 　　　　<li>かきくけこ 　　　　　<ol> 　　　　　　<li>かきくけこ1<a href="">かきくけこ</a></li> 　　　　　　<li>かきくけこ2</li> 　　　　　　<li>かきくけこ3</li> 　　　　　　<li>かきくけこ4<a href="">かきくけこ</a></li> 　　　　　</ol> 　　　　</li> 　　　　<li>さしすせそ</li> 　　　　<li>たちつてと 　　　　　<ol> 　　　　　　<li>たちつてと1</li> 　　　　　　<li>たちつてと2</li> 　　　　　</ol> 　　　　</li> 　　　　<li><a href="">なにぬねの</a></li> 　　　</ol> 　　</div> 　</div> ・・・・ 　あとは、それをスタイルシートで 横並び プルダウン にデザインするだけでよいです。 　文書構造さえきちんとできていれば、どうにでもなります。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html ) 　にてブラウザの[表示]メニュー→[スタイル(シート)]→　で任意のスタイルを選択したり印刷プレビューを試されると、考え方はわかるかな？？ 　とりあえず、 1) あなたのナビゲーションの文書構造を具体的内容は伏せて上記例のような形でよいので示すこと。 2) そして、それをどのように表現したいかを明確に
まず、HTMLから HTML4.01,XHTML1.0,XHTML1.1 <div class="footer"> ＿<address> ＿＿〒123-4567 東京都杉並区1234-5678<br> ＿＿TEL:012-345-6789<br> ＿＿FAX:012-345-6789 ＿＿<a href="/form">問合せ</a> ＿</address> </div> HTML5 <footer> ＿<address> ＿＿〒123-4567 東京都杉並区1234-5678<br> ＿＿TEL:012-345-6789<br> ＿＿FAX:012-345-6789<br> ＿＿<a href="/form">問合せ</a> ＿</address> </footer> 下記はいずれもスタイルシートで指定します。 ※ プレゼンテーションに関わる要素(<font>)は使いません。 ※ プレゼンテーションに関わる属性は使いません。 　　align=　color=　face= ※ DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 ) 　　refarenceは意味が合いません。この場合はaddress要素を使うべきでしょう。 HTML4.01 7.5.6 ADDRESS要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#edef-ADDRESS ) HTML5 4.3.9 address 要素( http://www.html5.jp/tag/elements/address.html ) スタイルシートの実際 div.footer address{ color:silver; ffont-family:sans-serif; width:20em; position:fixed; right:5px; bottom:10px; font-size:12px; } div.footer address a{ color:#aaa; text-transform:uppercase; text-decoration:none; text-shadow:1px 1px 1px #000; } div.footer address a:hover{ color:#ddd; } HTML5用 footer address{ color:silver; ffont-family:sans-serif; width:20em; position:fixed; right:5px; bottom:10px; font-size:12px; } footer address a{ color:#aaa; text-transform:uppercase; text-decoration:none; text-shadow:1px 1px 1px #000; } footer address a:hover{ color:#ddd; }
ブラウザに表示するってことはhtmlとcssやJavaScriptで作ることになる。 んで仰るとおりフレームワークやライブラリを使うことになると思う。 (あんな機能を1から作るのは現実的ではない) 一緒のUIってのはなかなか見つからないと思うけど javascript リッチ　UI とかで検索すれば結構出てくるからお好みのものをどうぞ。
No.2です。 ＞iPhone、iPadだけでもこれだけの種類に別けなくてはならないのですね。 ＞・・・【中略】・・・ ＞実際に皆さんはかなり多くの解像度振り分けをされているのでしょうか？ 　そんな無茶はできません。今後も益々増えていきますし・・ 　viewportをつかってデバイスの解像度で振り分けています。 　viewportを使うと、逆に文字数との指定は楽になります。 ＞取引先の言い分は、「スマホでも文字を見やすい大きさにしつつ、1行に収まるように、もし<br>を使っていたらきちんと改行も正しくなるようにしろ」 　ここは整理したほうが良いですね。 <br>を使う場面と言うと <address> 株式会社ABC<br> 東京都品川区<br> ・・・・町・丁目・番<br> </address> などでしょうが、その場合に 株式会社ABC 東京都品川 区 ・・・・町・ 丁目・番 と改行されてはまずいのはわかります。しかし、 <p>取引先の言い分は、<q>スマホでも文字を見やすい大きさにしつつ、1行に収まるように、もし&lt;br&gt;を使っていたらきちんと改行も正しくなるようにしろ</q>という感じでした。</p> が、 　取引先の言い分は、「スマホでも文字を見やすい大きさにしつ つ、1行に収まるように、もし<br>を使っていたらきちんと改行も 正しくなるようにしろ」という感じでした。 だろうが、 　取引先の言い分は、「スマホでも文字を見やすい大 きさにしつつ、1行に収まるように、もし<br>を使って いたらきちんと改行も正しくなるようにしろ」という 感じでした。 と表示されようと構わないというか、そうあるべきです。 　あなたが言われるように、 　これはテストサイトです。これはテストサイトで 　す。 　これはテストサイトです。これはテストサイトで 　す。 がまずい状況と言うのが思い浮かばない。 ★ウェブページをまるでカタログや印刷物のようなイメージで捉えているクライアントも存在します。その方には、実例を上げて説明して納得してもらう。それも請けた側の仕事の一つですね。 　端末によってと言われる方は、「携帯電話、モバイル機器、音声入出力機器、点字端末、プリンターはどうされますか？？」と問いかければ(^^) 　
＞ありがとうございます！では通常、ブラウザからサーバーのファイルを見ることは不可能ということでしょうか？（ハッキングなどは抜きにして） ブラウザからファイル名を指定した場合にどういう動作をするかはサーバー側で設定されています。 HTMLファイルや画像ファイル等の場合は、そのままブラウザに送られます。 PHPファイルの場合は、そのままファイルを送るので無く、サーバー上でそのPHPプログラムを動かしてその出力をブラウザに送ります。 ＞不可能であれば他にサーバーのファイルをみることが可能になる方法はありますでしょうか？ ワードプレスをインストールしたようですが、どうやってインストールしたのでしょうか？ サーバー上で直接インストールした場合なら、サーバーにsshでログインして見るのが普通です。 PC上でファイルを設定して、FTP等でサーバーにファイルをアップロードしたのなら、ファイルをダウンロードしてみるのが普通です。もしくはアップロード前のPC上のファイルを見るか。
ナビゲーションでしょうから、文書構造が分かるようにclass名をnavにしたdivで囲んでおきます。 <div class="nav"> 　<ul> 　　<li><a href="">トップページ</a></li> 　　<li><a href="">メニュー2</a> 　　　<ul> 　　　　<li><a href="">メニュー2のサブメニュー</a></li> 　　　　<li><a href="">メニュー2の長いんだよサブメニュー</a></li> 　　　　<li><a href="">メニュー2のサブメニュー</a></li> 　　　</ul> 　　</li> 　　<li><a href="">メニュー3</a></li> 　　<li><a href="">メニュー4</a></li> 　　<li><a href="">メニュー5</a></li> 　　<li><a href="">メニュー6</a></li> 　　<li><a href="">メニュー7</a></li> 　</ul> </div> /* ナビゲーションのリストのスタイルをリセット*/ div.nav ul,div.nav ul li{ margin:0;padding:0; line-height:2em; text-align:center; width:100%; position:relative; background-color:white; z-index:100; } /* 横並び */ div.nav ul li{ display:inline-block; width:13%;/* ７項目なので100÷7≒14.29 */ } div.nav ul li ul{ position:absolute; top:2em; width:300%; } div.nav ul li ul li{ display:block; text-align:left; width:auto; } /* hover */ div.nav ul li ul{display:none;} div.nav ul li:hover ul{display:block;}
示された部分以外に原因があるようです。 とりあえず、それをmedia="screen"に変更(screen用のスタイルと置き換えて)して、firebigなどで、スタイル指定を確認すること。 ・HTMLからプレゼンテーションに関わる物をなくすこと ・セレクタは基点セレクタからきちんと書かないとメンテナンス出来ないですよ。 (例) <div id="table_pnl" class="table-responsive"> じゃなくて、 <div id="data1"> div.section div#data1{} とかね。
Google Chromeでやってみてください。
フォントファイルが５MBあるのであれば、クライアントはアクセス時に５MBダウンロードします。 通常Webフォントを使用する場合は、使用する文字分だけのサブセットフォントを作成して使用します。 http://takachan.jra.net/blog/archives/926
レスポンシブ対応のこと？
＞転職時に提出すると一目置かれるようなものってどんなものがありますか？ もしかして完全に違う分野から？ それともWebじゃないけどプログラマ？ 違う分野からならまあこの会員のシステムみたいなのであれば、一通りの基礎 (データベースの利用、登録、削除、更新、画面表示) が含まれてるからいいかもしれない。 ただ、どんな開発をしたいかによって評価されるものが違うからなぁ。 Webシステムでいいのかな？ まあ今のものを進めていいと思うよ。
まず、定番のチックサイト 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) ウィンドウ巾は皆さんが1200px以上の環境で使用するわけではありません。最近はスマホなどでの利用も多いです。640px巾でも横スクロールなしで利用できるように・・ 　ウェブページにHTMLを利用する最大の目的は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より 　なのですから、それを忘れると・・
要するに、http://hogehoge.com/wp/ のような場所で構築したサイトを http://hogehoge.com/ として公開したいという事でしょうか？ そういう事なら、管理画面の設定 > 一般の画面で サイトアドレス (URL)：http://hogehoge.com/wp/ となっている所を、下記の様に変更すればOKです。 サイトアドレス (URL)：http://hogehoge.com/ 間違えてWordPress アドレス (URL)の方を変更してしまうと管理画面にアクセスできなくなり 非常に面倒な事になるので注意してください。 あとはサイトルートにindex.phpかindex.htmlがあると意図通りにならないかもしれないので、削除しといた方が良いと思います。
色々とブラウザを試してみましたが、Operaの場合には50%等の縮小表示で解像度を上げた場合を疑似的に再現できますよ。 ※200%等の場合、解像度の低い場合を疑似再現できます 他のブラウザは、解像度そのままで内部を拡大縮小する仕様でした。 ※とは言っても私が試したブラウザの範囲のみ、継続的に試してるわけじゃないので、バージョン違いで仕様が変わっていても把握できていませんが…Opera以外では、IE、FireFox、Chrome、Safari(いずれもWin版) 640×480、あるいは1600×900などをピンポイントで再現するのは不可能(あるいは非常に調節が困難)ですが、たぶんピンポイントの再現は不要だと思うので問題はないかと。
background-position の複数指定は CSS3 からの仕様ですね。 http://www.w3.org/TR/css3-background/#background-position http://hp.vector.co.jp/authors/VA022006/css/colors.html#background-position background-position の複数指定は IE9 以降から対応するようですが、IE9 以降で検証されているのでしょうか。 IE8 以下が対象ブラウザに含まれるなら複数指定しない方法で実装する事を検討する必要があります。 https://developer.mozilla.org/en-US/docs/Web/CSS/background-position#Browser_compatibility # Re: sousou0309さん
. : クラス > : 直下の要素 , : セレクタの併記 table-hoverクラス直下のtbody直下のtr上にマウスが来たときの直下のtdまたはth の背景色を#550055、文字色を#eeeeee
それはできないのです。（無理やりは可能でしょうが) 理由は ・並列した要素は互いに他に属していないために、他の要素の子孫足りえない。 　あなたのあげられたサンプルでいうと、三行目の新たな要素の巾が３つの要素の巾を決定したとしても、他の要素がそれを参照できることはない。 　※無理やりなら可能です。 　display:table,display:table-rowを指定してもダメです。 　　三番目の要素がもっとも長いと分かっていれば、それを元に親要素の巾を決定し、他の要素はその親要素の子孫としてabsoluteないしrelativeで指定する。 　理由はお気づきのようにtableは、その描画方法が特殊だからです。
ご希望のリスト（<ul><li></li></ul>）で作成する方法です。ちょっと無理やりですが、 cssのulやliに関わる記述を削除し、次のcssを乗っけてみてください。 ul li{ margin-bottom:10px;{/*liと次のliとの間のスペースです。*/ } ul li p{/*liの中のpをテーブルのセルとして表示させる事により、お隣のセルと高さを揃えています。また、縦方向の中央揃えも可能となります。*/ display:table-cell; border:1px solid #cccccc; } .title1{ width:180px; background:#444AFF; color:#fff; padding:5px 0 5px 14px; vertical-align:middle; border:none; border-right:10px solid #ffffff;{/*白い罫線をタイトルの右にいれることで、空白に見せかけています。*/ } .content1{ width:500px; padding:5px 0 5px 14px; } ーーーーーーーーーーーーーーーーーーーーここまで tableでborder-spacingが効かなかったのは、border-collapseでcollapseを指定しているからだと思います。 <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css"> にtable{border-collapse:collapse;border-spacing:0}の記述があります。 border-collapse: separate; を指定し直せば、効く筈です。
解決しますよ。でも10万くらいのじゃまたすぐ同じになるかと。。。 高いのが難点ですがクリエイター向けのPCにしとけば問題なくサクサクです。 DELLの　Graphic Pro や http://www.dell.com/jp/p/deals.aspx?c=jp&l=ja&s=dhs&#!dlpgid=graphic-pro-deals&&ST=dell&dgc=ST&cid=33420&lid=786910&acd=1059166192234149 mouse computerのクリエイターPCなど。。 http://www.mouse-jp.co.jp/abest/creator/ 本題。イメージ図ですが、 > そこに一つ一つパーツや文章を作ってイメージ図を完成させてます こうなるとイメージというより、デザインですよね。 やり方は人それぞれ異なりますし自分が効率良い方法を探っていけば 自然と一番の方法にたどり着くかと思います。 全ページデザイン起こしてからコーディングに移る人もいれば トップ＋中1ページのデザインのみ作成して後はコーディングしながら組み込んでいくなどなど、 クライアントに全ページデザイン見せて！と言われれば嫌でも作りますし。笑 時と場合や気分と案件によってやり方変えてもいいと思います。 Photoshop以外はないと思ってます。 余談ですが、試してませんでしたらメモリ不足も考えられますので 環境設定 > パフォーマンス > メモリの使用状況でphotoshopで使う容量とか設定できますので 現PCでも試してみるのもありかと思います。
Wordpress アーカイブテンプレートで <?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?> <dl class="accordionLister"> <dt><?php the_title() ?><span class='showExcerpt'>[概要表示]</span><a href="<?php the_permalink() ?>">[詳細表示]</a></dt> <dd><?php the_excerpt() ?></dd> </dl> <?php endwhile; else: ?> <p>404</p> <?php endif; ?> <head>内に以下のjQueryを $(function(){ $('accordionLister dd').hide(); $('document').on('click','.showExcerpt',function()){ $('accordionLister dd').hide; $(this).parent().find('dd').show(); } }); 内容が約わからないのですが、だいたいこんな感じ？
＞　でも２バイト文字はなんで改行するんでしょうか？ HTMLがどうと言うより、文章表記のルールが基になっているからでしょう。 英文は単語の途中で改行しないのが表記上のルールだから、基本的には改行されません。 日本語は単語の途中であっても普通に改行しますよね。（一部句読点なんかは禁則処理のルールがありますが） それに準じているだけです。
＞という認識であってますでしょうか？ 　プロパティには継承されるものと継承されないものがあります。 　borderやwidthは継承されません。 　line-heightやtext-align、font-familyなどは継承されます。 　　とは言っても常識的なものですね。 　　bodyに枠をつけたら子孫要素にすべてborderがつくわけない 他人に薦めている＝私自身が役立ったと思う仕様書は HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) 　特に「5 セレクタ」「6 プロパティ値とカスケーディング、継承の割り当て」 HTML5,CSS3に比較してずっと簡単ですからね。 その後、HTML5なら、その上で HTML 5 differences from HTML 4( http://www.html5.jp/trans/w3c_differences.html ) とか・・
＞すべてのモニターで写真が切れずにぴったりフィットすることは出来ないと言われました。 　それはないでしょう。 　そもそもHTMLでウェブページが作られる最大の目的は・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 　・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より なのですよ。 　そしてWordpressがここまで人気なのは、基本的に「ウェブ標準である」であること。すなわち、「どんな環境からもWebの情報を利用できる」 　HTMLはスタイルシートで「デスクトップのパソコン、ノートブック、iPad,iPhoneとでかなり違うのです」・・それらはスクリーンメディアと呼ばれる環境で、それ以外にプリンター、携帯電話(handheld)、スクリーンリーダー、展示端末も利用対象なのですよ。検索エンジンも・・ 　そのデザインじゃ印刷には向かないでしょ!! 出力メディア( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/types.html#type-media-descriptors ) ＞そんなに難しいことなのでしょうか？ 　きちんとテンプレートがマークアップさえされていれば・・・ ＞別のプログラミング出来る方にお願いすれば、修正出来るのでしょうか？ 　プログラミングではなくて、マークアップとスタイルシートですね。 　多分、ゼロから作り直すほうがずっと簡単でしょう。 　まあ、酷いテンプレートを選択してしまったようですね。 ★サイトの評価は決してデザインではありません。そんなもの製作者の自己満足でしかない。 　最も重要なのはコンテンツ（内容）です。たとえシンプルで地味なデザインでも内容が充実して、他の同内容のサイトに比較して秀逸ならたくさん利用されるでしょう。 ★テンプレートを決めるまでに、様々な端末で試してみるべきでした。 　私は公的なサイトの依頼が多いので、印刷やスクリーンリーダー、場合によったら視覚弱者向けのデザインもユーザーが選択できるように作成します。
https://www.google.co.jp/search?num=100&newwindow=1&q=jquery+%E3%82%B9%E3%83%A0%E3%83%BC%E3%82%BA%E3%82%B9%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%AB jQueryで出来ますよ。 検索で丁寧に解説されたサイトが山のように出てきます。 多分、プラグインを探すまでもないかと思います。 ちょっと最初は戸惑うかも知れませんが、jQueryをサイトに導入して、数行だけJavaスクリプト（jQuery）の打ち込みをすることになるかと思います。 そして、HTML部分も多少のID要素やclass要素を追加することになるかも知れません。 とりあえず、検索に引っかかったわかりやすそうなサイトのソースをコピペして改造していけば、初心者でも導入できますよ。 分からないと思ったら、とりあえず「jQuery+○○」で検索です。この手の解説サイトはネットで飽和状態になってます。 ID要素、「＜div id="なんとか"＞いろいろ＜/div＞」とか Class要素「＜div class="なんとか"＞いろいろ＜/div＞」とかが jQuery（Javascript）とHTMLを繋ぐ鍵です。 難しくないので、とりあえず動くまで辛抱して勉強してみるのをお勧めします。 最初はスクリプトとか取っつきにくいですが、特にjQueryの構文だけで動くこういうエフェクトの場合は、やってみれば数学とかやるより遙かに楽だと思います（笑） ページの構成は、1ページ完結のトップページですね。 フレームなどで他のページを呼んでいる様子はないです。映像データとか画像データなどを除けば。（と言うことを聞かれてます？）
ヘッダ部分の飛び出ているところよりz-indexを下にすれば行けそうな気がするけど
img[0] = "img/common/bnr-ad-header1.png"; 表示されているページでは、img/でいいですけど 表示されないページでは階層が違うから、/list/img/になってしまってます。 絶対アドレスで書くとかすれば表示されるのではないでしょうか。 img[0] = "/img/common/bnr-ad-header1.png";
> ヘッター部分やフッター部分 というからには、「この部分をヘッダーにする」と決めている個所があるかと思われます。 以下、ヘッダーに対する手順を書きますが、フッターの場合も同様の手順でできるはずです。 （１）もしその箇所が複数の要素になっている場合、つまり、 ＜！－－ ここからヘッダー －－＞ 　……（何らかの要素）…… ＜！－－ ヘッダー終わり －－＞ となっていたならば、まずそこを header (HTML5 の場合)または div （既存の HTML の場合）で囲みます。このとき div の場合にはクラスとして header を設定します。 すでに上記のような状況になっている場合はそのまま次に進みます。 （２）上記で設定した header または div に対して CSS で背景色・背景画像を設定します。 たとえば背景色を赤にしたい場合は 　header { background-color:red; } または 　div.header { background-color:red; } となります。
phpのframeworkと言うと、 zendFramework fuelPHP drupal cakePHP Larvel くらいでしょうか。 http://www.google.co.jp/trends/explore?hl=ja&q=cakephp,+larvel,+ZendFramework,+fuelPHP,+drupal&geo=JP&cmpt=q&content=1 たしかに、google trends でみても、cakePHPですね。 利用したほうがやりやすいかどうか？ という意味で言えば利用者が多いほうがQAも揃っているでしょうし、なにかわからない時の対処法が得やすいのではないでしょうか？ 自分も過去、「流行りのframwork」に手を利用せざるをえない状況が有り利用しましたが、自力解決するしかない状況に陥り困ったことが有ります。 基本どんなフレームワークも海外で作られ伝わってくるものがほとんどだと思います。 新しいもののほうが処理が高速だったり、コードがわかりやすかったりする場合もありますが、 所詮どんなフレームワークも欠点もあり、ドキュメントを読むだけでは意味がわからなかったりします。 それを上回るだけのメリットがあれば別ですが、 何かあった時に解答を得やすい = ユーザーが多い フレームワークを選ばれる方が、賢明ではないでしょうか？
ブラウザのデフォルトの背景色が異なる。 <body style="background-color:white;">
＞テンプレートを利用して何ページか作っているのですが、 　それでは絶対に不可能!!根本的に間違っている。 　最初の最初からきちんと本道を歩むと、決して難しくもなんともない事です。 ＞　テンプレートをつかって文字を入替えるのはDTPです。　 絶対に理解すべきこと [HTMLはDTP( http://ja.wikipedia.org/wiki/DTP )じゃない] 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より 　なぜそうなのかは、HTMLが考案されたときのヒントになったのはSGML--背景( http://ja.wikipedia.org/wiki/Standard_Generalized_Markup_Language#.E8.83.8C.E6.99.AF ) ★HTMLには文書構造だけを書きます。 　　文書を構成する要素(部品)をタグを用いてマークアップします。 　<h1>ここは見出し</h1><p>ここから新しい段落で、<strong>ここは重要</strong>なところ</p> 　 　とね。これをブラウザで見ると<h1>は大きな太字で、<p>で間隔をあけて改行され、<strong>は太字。スクリーンリーダーは<h1>ぱ男声の大きめな声で、<p>で間を空けて<strong>でアクセントをつけて・・・。それらの機能はHTMLを利用するソフトによるもので、HTMLがそれを指定しているわけではない。 　その上で、スタイルシートでscreenメディア(PCやスマホ)向けに、携帯電話向けに、あるいはプリンター向けにデザインして行きます。 ＞三本線のとこをクリックすると画像のようにメニューが出てくるようになっています。 　三本線らしきところはないし、メニューらしきものもないので分からないですが、はじめはデザインではなく、ひたすらHTMLをきちんとマークアップすることを身につけましょう。検索エンジンは無論、誰しもページのデザインでサイトを訪問してくれるわけではありません。決め手になるのは内容ですから。 　この説明の意味・・多分、急には理解できないと思いますので、(Chrome以外)のブラウザで下記サイトをご覧ください。　 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html ) ・最初にHTMLソースを確認する。 ・次に、ブラウザの[表示]メニューから[スタイル(シート)]に進んで、色々なスタイルを選択してみる。 ・それぞれウィンドウ幅を変えたりフォントを大きくしたり小さくしたり ・印刷プレビューでプリントアウト時の状態を確認 　HTMLさえ、きちんと書けていたら後はスタイルシートで自在にデザインできるのですよ。
多分、こんな感じ通るはず（未検証）。 div.entry_body img { width: 600x; overflow: hidden; transition: 0.4s; } div.entry_body img:hover { -moz-transform: scale(1.2,1.2); -webkit-transform: scale(1.2,1.2); -o-transform: scale(1.2,1.2); -ms-transform: scale(1.2,1.2); } 要は「div.entry_body img」でピンポイント指定するのがポイント。こうする事で「<div class="entry_body">に囲まれた<img>のみ」と言う意味になる。でもまあ後々、誤動作の遠因となるので、早い段階で面倒でも個別にimgタグに何らかのclass名を割り振って置いた方が良いと思います。
ちゃんとHTMLがマークアップされていれば難しくはないです。 a要素をサイズ指定のブロックにして並べればよいだけです。 ★デザインのためにHTML書かれている『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )ができていない』と、悩むことになるかも・・・ <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/Products/1">製品1</a> ＿＿＿＿＿<p>新製品です。</p> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Products/2">製品2</a> ＿＿＿＿＿<p>この製品は当社のベストセラー・・</p> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Products/3">製品3</a> ＿＿＿＿＿<p>ロングセラー商品で当社の基礎をつくった製品</p> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Products/4">製品4</a> ＿＿＿＿＿<p>説明するまでもなく・・</p> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿</div> だとして、 div.header div.nav{サイズを指定して} div.header div.nav ol{位置を上の50%にしてtext-align:center;} div.header div.nav ol li{display:inline-block、幅を20%程度} div.header div.nav ol li a{display:block;にして背景画像をつけて} div.header div.nav ol li a p{その下に置く} ★リンクを ＿＿＿＿<li><a href="/Products/2"><img src="" width="" height="" alt=""></a> ＿＿＿＿＿<p>この製品は当社のベストセラー・・</p> ＿＿＿＿</li> のように書かれていたら、完全なリキッドに出来ますから、幅広ディスプレイでもスマホ縦置きでもデザインは崩れないでしょう。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html ) にて、[表示]→[スタイル]で、「画像の上に配置」が同様な方法が使われています。(Chromeは代替スタイルシートが使えないので他のブラウザで) 　ソースをご覧になると分かるように、HTMLに文書構造しか書いてないと、自在にデザインは可能なはずです。
名前はないでしょう。 ＞一般的なナビゲーションとは違う 　そうとは思いません。 　デザインが少し異なるだけです。 　それらのサイトflashを使っていたりCSSだったりjavascriptだったりするだけです。
input[type="text"] {height:30px;} input[type="submit"] {height:30px;} そりゃダメでしょう。行内ブロックとして扱われる物と行内要素として扱われる物。 どうしてもなら、 input[type="text"],input[type="submit"]{line-height:40px;} 同じ設定をするのなら統一部分は一つのグループに書くほうがメンテナンス楽になりますよ。 念のため input[type="text"],input[type="submit"]{line-height:40px;display:inline-block;} かな。
F12押すと大体のブラウザは開発者ツールが開くからそれで見てみるといいよ。 Canvasを使ってるみたいね。
＞borderが継承されないと言う点は理解しているのですが、<table>に対して指定したclassがその下に位置する<td>に継承されないという点で困っております。 　それは「継承」ではありません。 ★それは、tdに指定したスタイルが適用されないという事です。 　　カスケード処理の順序( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#cascading-order ) table.sample td{} は、 ・class属性の空白で仕切られた値リストの一つにsampleを持つtable要素の子孫であるtd要素という意味です。詳細度は[0 0 1 2]＝12です。 　これが適用されないと言う事は、 ・より高い詳細度の指定がある。 　　一意セレクタ[0100]とか、スタイル属性[1000] 　　より詳細な記述がある。body div.section table td [0 0 1 4]、 ・同じ詳細度で後述の指定がある。 ・HTMLの文書構造かセレクタの記述に誤りがある。 　の何れかでしょう。 　Web開発されているなら、開発者ツールが豊富なfirefoxお使いだと思いますがそのアドオンにFirebug( https://addons.mozilla.jp/firefox/details/1843 )があります。それでスタイルが適用されない要素を選択すると、カスケードの順番に従ってスタイルが明示されます。 　それを使うのが、最もよくわかる。
HTMLも書き直しますよ、いいですかね。 <div id="container"> <!--***** 左サイドメニュー *****--> <div id="leftside">leftside </div> <!--*****// 左サイドメニュー *****--> <!--***** メイン部分 *****--> <div id="main">main </div> <!--*****// メイン部分 *****--> <!--***** 右サイドメニュー *****--> <div id="rightside">rightside </div> <!--*****// 右サイドメニュー *****--> </div> /*ページ全体の幅、レイアウトをセンタリング*/ #container { width:1130px; margin:0px auto; text-align:left; } /*ヘッダー*/ #header { width:100%; padding: 20px 0; clear:left; } /*左サイド*/ #leftside { float: left; width: 200px; background-color: #0ff; } /*メイン*/ #main { float: left; width: 700px; background-color: #f0f; } /*右サイド*/ #rightside { float: left; width: 200px; background-color: #ff0; } /*フッター（コピーライト）*/ #footer { padding: 30px 0; width:100%; clear:both; color: #666; text-align: center; border-top: 1px solid #ccc; }
olに対してmargin: 0 auto:を与えればいいかなと思います。 widthは親の要素より小さく設定してください。 ボックス要素の中央寄せはolに限らず上記で対応できます。
#container_aと#container_bを囲う1000pxのラッパーを追加してはいかがですか？ #container_wrapper{ width:1000px; margin:0 auto; } さらに#container_a と　#container_b　にはfloat:left;が必要ですね。 floatさせた場合、親となるボックス（#container_wrapper）の高さが思い通りに ならないことがありますのでclearfixを使うか、簡単に済ませるならoverflow:hiddenを入れるなど。
はっきり言ってうんざりです。あなたはそれ以上にうんざりでしょう。 ＞iOS 　これはOSですから、直接は関係ないブラウザをターゲットにしたウェブ製作です。 <a class="button--large" href="mentenance_index.html">テスト1</a> <a class="button--large" href="mentenance_index.html">テスト2</a> <a class="button--large" href="mentenance_index.html">テスト3</a> 　こんなHTMLは書きません。スマホが主たるターゲットでしたらHTML5で構わないと思いますが、他のユーザーエージェントだと使えないじゃまずい・・。なぜならHTMLは本来 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より 　なのですからね。検索エンジンはスタイルシート利用しませんし・・ HTMLは <body> 　<header> 　　<nav> 　　　<ul> 　　　　<li><a href="/">トップ</a></li> 　　　　<li><a href="/abcd">ABCD</a></li> 　　　　<li><a href="/efgd">EFG</a></li> 　　　</ul> 　　</nav> 　</header> とかになるはずです。デザインは関係ないし、いちいちclass名なんてつけなくても文書構造から要素は指定できる。もしボタンを小さくしたいときclass名をsmall--largeにかえるのですか(^^)。そんなことしないですよね。 　そしてスタイルシートは <style media="screen"> <!-- header nav{ width:98%;margin:0 auto;/* ウィンドウ幅の98% */ } header nav ul{/* 以下は継承されるプロパティなのでここで指定 */ list-style:none; line-height:2em; text-align:center; margin:0;padding:0; } header nav ul li{position:relative;} header nav ul li+li{margin-top:5px;}/* ボタン押し難いので二つ目以降マージンあける */ header nav ul li a{/* A要素(リンク)のデザイン */ display:block; width:90%; padding:0 5%; height:100%; border-radius:5px; text-decoration:none; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; } /* 色を指定しておこう */ header nav ul li a{color:white;background: linear-gradient(blue, navy);} header nav ul li a:hover{background-color:blue;} header nav ul li a:active{background-color:aqua;color:yellow;} --> </style> これだけでよい。 ・HTMLはデザインではなく文書構造【だけ】を記述する。 　そのためのスタイルシートです!!→構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) ・スタイルシートは、その文書構造を元にセレクタを記述する。 　セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html )を知らないと、「構造とプレゼンテーションの分離」は実現できない。 ・継承されるプロパティは下位では書かない 　プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html ) ・ブラウザのもつデフォルトの指定を利用する。 　font-weight:400;なんて書く必要ない ・文字を白くするときは、meadia=screenを書かないと印刷できない。 　ためしにPCのブラウザで見て印刷プレビューしてみる。 ・スマホ縦でも横でも使えるはず 1) HTMLの仕様書を一度目を通しておくべき スタイルシートを使うときは特に 2) スタイルシートはプロパティを覚えるより先に、セレクタやカスケーディングの仕組みを理解しないと、絶対に使いこなせない。仕様書でもプロパティの説明よりも前に詳しく書いてある。 3) CSS3より先にCSS2.1を、HTML5より先にHTML4.01strictをマスターしましょう。 　そのほうが絶対に上達は早い。 [サンプル] ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　で検証済みのHTML5+CSS3 ★タブは＿に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿<style media="screen"> <!-- header nav{ width:98%;margin:0 auto; } header nav ul{ list-style:none; line-height:2em; text-align:center; margin:0;padding:0; } header nav ul li{position:relative;} header nav ul li+li{margin-top:5px;} header nav ul li a{ display:block; width:90%; padding:0 5%; height:100%; border-radius:5px; text-decoration:none; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; } header nav ul li a{color:white;background: linear-gradient(blue, navy);} header nav ul li a:hover{background-color:blue;} header nav ul li a:active{background-color:aqua;color:yellow;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p>本文</p> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
■質問１ <?php the_permalink(); ?>を<?php bloginfo('url'); ?>/test/ に変更すれば意図したカテゴリーへリンク出来ますが、この方法で正しいのでしょうか？ 「カテゴリーのアーカイブへリンク」でしたら、もしアーカイブのパーマリンク形式がそうなっていれば、別に固定urlでも構いません。 わざわざ絶対リンクになる<? bolog_info() ?>使わなくても、単に"/wp-name/bcategory-name/ でOKです。 要はパーマリンク設定や、サイト設定に左右されずに、正しいurlを得るのがベストなんだけど、最初から決まっていて変えないのなら固定でもOKよ、というだけです。 ■質問２ 「アイキャッチに対応した記事」 書き方があいまいで意味不明ですが、「アイキャッチつき投稿のみ表示」ということでしたら、ループ中で <?php if ( has_post_thumbnail() ) { the_post_thumbnail(); } ?> で判定してやればOKです。 ■蛇足 特定カテゴリの記事をループで表示する程度でしたら、query_poosts()だろうが、WP_Query()だろうが、ほとんど違いはありません。 どうせ中でWP_Queryに変換されているだけなので
えー、かなりぼっこぼこにされちゃったようなので少し助け舟。 基本的な話をします。 あなたがフリーランスである以上、客のサーバを代理で借りる事はありませんし、 その費用負担をする事もありません。 （そこまでセットでやる会社は存在しますが、ここでは割愛します） あくまでも客のサーバの上にサイトを構築するのが普通です。 でも、客側に知識が無い事もあります。 そんな場合には、いくつかおすすめを出し、選んで契約してもらいます。 ここで重要なのは、あなたが決めない事、そしてあくまでアドバイスであって責任は持たない事。 （でなければトラブルがあった場合にあなたにクレームが来てしまいます） そこまで知識の無い客であれば、サーバだけでなく、ドメイン取得も分かってない可能性がありますので、 その場合にはそこもアドバイスしてあげます。 これらにかかった時間は作業と看做し、制作費に上乗せして請求します。 （あくまで作業費であってサーバの費用は関係ありません） ではあなたはサーバを持たなくていいか？というとそんな事はありません。 テストアップしなければいけないからです。 まともな客であればテスト環境も自前で持っていますが、 恐らくあなたに依頼をする客は持っていない事がほとんどでしょう。 この費用はもちろんあなた自身が負担します。 その客の為に持つのではなく、WEBデザイナーとしてのあなたの道具ですから。 このサーバはどこが良いのか？これも実は答えはありません。人によって異なるからです。 しかし、少なくとも一般的な構成であること、ある程度の自由度があることが必須になります。 例えばhtaccessが使えるか、cgi、phpやperlが使えるか、SQL関係はどうか、WordPress（以下WP）やMovableType（以下MT）は、マルチドメインは、などなど。 よく聞くところで言えば、 さくらインターネット http://www.sakura.ad.jp/ エックスサーバー http://www.xserver.ne.jp/ あたりでしょうか。 客にすすめるとしてもまずはこの辺でしょう。 普通のサイトも作れるし、MTやWPなどのCMSを入れて更新性の高いサイトも作れます。 （CMSを入れる場合はあなたの方にもその知識が必要ですけどね） サービス系はあなたの手に余るので、話が来たら断った方が良いです。 他にも注意事項は沢山あるのですが、最後にひとつだけ。 ど素人の客は出来るだけ避ける事。 何故か？作業の価値を理解してもらいにくい＋一度仕事すると手離れが悪いからです。 そういう客を悪く言うのではありませんよ。仕方ないんです。 でも、相手をする側としては、これほどやっかいな客もいません。 そういう客には、まず軽はずみな気持ちでウェブサイトなんて持ってはいけない事を説明します。 ウェブサイトの戦略、人員を計画的に考え、十分な投資が出来る状況でなければサイトなんてもつべきではない。 どうしても何かやりたいなら飲食店ならぐるなびや食べログでページを持てば良いし、 ショップなら楽天、一般企業ならFacebookで十分です。
○○○.phpだけは文書量が少なく、スクロールバーが出ていなかったというオチ？
質問がありますって言ってるけど、これ１．２．３の通りに作ってってのと一緒だよね。 lancers.jp このあたりで依頼出せば3,000円くらいでやってくれるひとがいると思うよ。
こんな感じでいいですか？ <!DOCTYPE html> <html lang="ja"> <head> <meta charset="utf-8"> <style type="text/css"> body{margin:0;padding:0;} #wrap{ width:100%; width:100%;} #header{ width:100%; height:145px; background:#fcc; position:fixed; top:0;z-index:10;} #nav{ width:100%; height:69px; background:#ccc; position:absolute; bottom:0;} #a{ width:100%; height:522px; background:#ccf; margin-top:150px;} #b{ height:758px; background:#cff; padding-top:44px; padding-left:24px; position:relative;} .c_box{ width:332px; height:328px; border:1px solid #000; padding:6px 15px 20px -25px; } #c1{ position:absolute; left:0; bottom:0;} #c2{ position:absolute; right:0; top:0;} #footer{ height:100px; background:#fac; } </style> </head> <body> <div id="wrap"> <div id="header"> header <div id="nav">nav</div> </div> <div id="a">a</div> <div id="b" class="box">b <div class="c_box" id="c1">c1</div> <div class="c_box" id="c2">c2</div> </div> <div id="footer">footer</div> </div> </body> </html>
されたいことが理解できていないのですが・・ イメージで上げられた形は ┌──┬──┬─────┬──┬──┬───┬──┬──┐ │html│css │javascript│php │CGI │Python│Ruby│java│ └──┴──┴─────┴──┴──┴───┴──┴──┘ なのですが、どのようにアコーディオンするのですか・・ 　それぞれに二階層目のリストがあって ┌──┬──┬─────┬──┬──┬───┬──┬──┐ │html│css │javascript│php │CGI │Python│Ruby│java│ └──┼──┴┬────┴──┴──┴───┴──┴──┘ 　　　│CSS2.1│ 　　　├───┤ 　　　│ CSS3 │ 　　　└───┘ と開くのか。
sizeはブラウザによって大きさが変わるのでスタイルで指定したほうがいいと思います。 レスポンシブにする場合は、幅か小さい時は横いっぱいに広がるようにwidth100%を指定したら良いのでは。
保存するとき、metaで指定してあるものと異なるコードで保存してしまった。
＞imgタグなどのようなインライン要素は、ブロック要素で囲まないといけないと聞いたのですが、 　また聞きではだめですよ。基本から 　HTML(Hyper Text Markup Language)は、文書をそれを構成する要素に分解し、ひとつひとつの要素をタグを用いてマークアップするメタ(機械相手の)言語(機械相手の)です。 　由来はSGMLです。⇒Standard Generalized Markup Language#背景 - Wikipedia( http://ja.wikipedia.org/wiki/Standard_Generalized_Markup_Language#.E8.83.8C.E6.99.AF ) ★そのために、それぞれの要素は、何を含む事ができるかが決められています。 　段落(Paragraph)要素は、 <!ELEMENT P - O (%inline;)* -- paragraph --> 　　　( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/text.html#h-9.3.1 ) 意味は <!要素 P 開始タグ-必須 終了タグ0省略可 (%inline行内要素)*0個以上 --段落 --> 　p要素には、他のブロック要素は含むことができないことを意味します。そして、終了タグが省略可能ですから、つぎにブロック要素が登場すると、自動的にこの段落要素は終了と見なされます。 　body要素は、 <!ELEMENT BODY O O (%block;|SCRIPT)+ +(INS|DEL) -- document body --> 　ですから、 <!要素 BODY 開始タグO省略可 終了タグO省略可能 　　　(%block;|SCRIPT)ブロック要素かスクリプト要素+一つ以上 +および(INS|DEL)の何れかも可能 -- 文書の本文 --> 　ということ。 ※HTML要素は、BODY要素のみ必須ですから、<body></body>で囲まれていなくても、それがbodyだと判断されます。(開始タグ/終了タグとも省略可能なので) ★以上のことから、 　※body要素内にはブロック要素しか置けないために、画像のような行内要素(%inline)は、必然的に必ずブロック要素の中にしか存在しないことになります。 『imgタグなどのようなインライン要素は、ブロック要素で囲まないといけない』 は結果としては正しいですが、根本的な意味は間違っています。 　body要素直下にimg要素は置けない!!です。 ・・・・・以下、サンプルに対して・・・・・・・ ＞<div class="copyright"> <img src="img/base/copyright.png" alt="のコピーライト" width="382" height="24" /> </div> 　DIVはむやみに使いません。HTML5ではこの使い方はできなくなります。 <p class="copyright"><img src="img/base/copyright.png" alt="のコピーライト" width="382" height="24"> </p> 　とかです。 <td class="copyright"> <address> ★決して、文書を成型するためにtableを使用してはなりません!! 『単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/tables.html#h-11.1 )』 『　⇒ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )』 　と、1999年HTML4.01勧告以来、随所で厳しく指摘されています。 ＞下記のimg をフルイドイメージにしたい場合は ＞のように入れれば良いのですよね。 　いいえ、リキッドの場合は、img要素をブロック要素にして、static以外の抱合ブロックのサイズを参照させます。 ＞下記はだめですよね。 <H2>画像</H2><!-- h2はブロック要素ですからOK --> <IMG src="img/img0.jpg" width="120" height="90" alt="写真" border="0" align="top"> <!-- h2を含む全体がDIVで囲まれていれば文法的には誤りではありませんが、文書構造上は 謝りになります。なぜなら、次にブロック要素が現れた時に、仮想ブロックを作らなければならなくなる。--> <!-- imgのborder,align属性は非推奨です。--> 文字が上揃えになります<BR><BR> <!-- brは段落内の視覚的強制改行です。行間を調整するために使用してはなりません。ブラウザによると連続したbrは無視するものもあります --> <IMG src="img/img1.jpg" width="120" height="90" alt="写真" border="2"> <!-- border要素は非推奨です スタイルシートで --> 　以上ですが、一言で言うとHTML4.01移項のHTML文書作成の根幹である「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」が、まったくできていません。 <body> 　<div class="header"> 　　<!-- 文書のヘッダ部であることをclassで --> 　</div> 　<div class="section"> 　　<!-- 文書の本文であることをclassで --> 　</div> 　<div class="footer"> 　　<!-- 文書のフッタであることをclassで --> 　　<address> 　　　〒***-***　**県**市**町 1-5-10　<span class="tel">TEL.0977-84-****</span> 　　</address> 　　<ul><!-- フッターのナビゲーションは囲まない --> 　　　<li><a href="/index.html">トップ</a></li> 　　　<li><a href="/sitemap.html">サイトマップ</a></li> 　　</ul> 　　<p>株式会社ABC</p> 　</div> </body> ※DIVに使用するidやclassは、あくまで『文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』ですよ。デザインのためじゃない。 　これが理解されなかった反省からHTML5では文書構造を示す要素が追加され( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )、DIVは他に適切な要素があるとき以外は使えなくなります。 　『Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html#the-div-element )』 　比較のため最後にHTML5で書いた例を上げておきます。 1) リキッドでデザインしましょう。 2) 画像自体がそのページのコンテンツでないときは背景にします。 　リンクの背景とか、見出しの背景とかにする。 3) HTML4.01勧告時に「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1 )」 　とされました。HTML5が勧告を迎えました。(2014.09.16)５日前 [HTML5] <body> 　<header> 　　<!-- 文書のヘッダ部 --> 　<header> 　<section> 　　<!-- 文書の本文 --> 　</section> 　<footer> 　　<!-- 文書のフッタ --> 　　<address> 　　　〒***-***　**県**市**町 1-5-10　<span class="tel">TEL.0977-84-****</span> 　　</address> 　　<ul> 　　　<li><a href="/index.html">トップ</a></li> 　　　<li><a href="/sitemap.html">サイトマップ</a></li> 　　</ul> 　　<p>株式会社ABC</p> 　</footer> </body>
確かにウチの環境でもずれています。 .footer-nav li { の要素に white-space: nowrap; margin: 0 0.5em; を入れたみたらどうでしょうか。 0.5emの部分は、まあ適当に調整するとして、ですけど。
目的と合致するかどうかは判りませんが、bootstrapとadminで検索してみてはどうでしょう？ 著作権フリーのデザインも結構あります。 表画面(訪問者が見るもの)なら、bootstrapなんか使えないというデザイナーさんも多いかも知れませんが、裏画面で使う分には非常に便利ですよ。
こちらをどうぞ。 http://developer.yahoo.co.jp/webapi/auctions/
> ※上記以外のことは一切行っておりません それが本当なら、肝心のjQuery本体（jquery.min.js）がないよ。 ダウンロードしてくるなりCDNを参照するなりしないと。 あと、ファイルの指定ミスとか初歩的な間違いなら エラーが絶対に出てるはずなのでエラーメッセージくらいは確認しましょう。 ブラウザにもよるけど、開発者向けにエラーメッセージを確認する手段が普通は準備されてます。 エラーメッセージを表示させる - とにかくやってみるブログ - Ingwer Design http://ingwer-design.com/blog/javascript/post-5.html
>ただサーバーなどが無い場合は、リスクを理解してもらった上で、こちらのサーバーにjavascriptを置くこともありですね。 料金にもよりますが、ディスクスペースを再販するよりは、その顧客専用のサーバーを用意した方が良いですね。 特にディスクスペース再販で顧客ごとに専用ドメインを用意しないのであれば、サーバー管理業務を引き継ぐ時にお客様のウェブサイトのファイル（外部サーバーへのリンクURL）を更新しなければならなくなります。 顧客ごとにホスティングサービスを契約していれば、ホスティングサービスのアカウント情報を引き渡すだけで簡単に処理できます。 （支払いも代行していれば、支払い情報のデータを削除しておくことに注意。） >No.2お礼 >世の中にはお客様に何も言わずにとりあえず自社サーバーにjavascriptを置いて、知らないうちに廃業や病気でサーバーが解約されると将来的にお客様に迷惑かけてるようなところもありそうなので、 直リンクOKな素材配布やライブラリ配布を行っていて、そこにリンクさせているだけならともかく、（それでもサーバー停止時や配布停止に関係する利用規約、契約内容は細かく規定されています。） 業務ならありえませんね。 契約不履行で管理料金の返却、もしくはウェブサイトが停止した事による損害賠償を訴える事が出来ますし、そうでなければ詐欺となります。
＞　会社概要に書かれている会社名に引っかかったんだと思うのですが、 ＞　理想としてはまず、会社名をリンクとし、会社のホームページの ＞　ホーム画面が表示されるようにしたいです。 グーグルのウェブマスターツールやアナリティクスに登録していますか。 最低でも前者はやっておきましょう。 そして、トップページを頻繁に更新して、それをGoogleに通知します。 それから、一般に言われている、以下には注意してください。 　・各ページのtitleは絶対重複させない 　・サブページにはトップページへ戻れるリンクを設置 　・サプページの内容は、トップとかぶらない固有の内容にする ＞　もっと言うと会社名の下に事業内容や会社概要等４項目ぐらい表示される ＞　ようにしたいです。 これは、サイトリンクと言って、グーグルがそれなりの優良サイトと判断した 場合に表示されるようです。 ご自分で操作することはできないと思います。
はは、いくつかミス ＞<div class="sevtion">　訂正 →<div class="section"> ＞<sevtion> 訂正→　<section> <body> 　<div class="header"><!- タブは　(全角スペース)に置換してある --> 　　<div class="nav"> 　　　<ul> 　　　　<li><a href="/siteMap.html">サイトマップ</a></li> 　　　　<li><a href="/privacy/">プライバシーポリシー</a></li> 　　　</ul> 　　　<ul><!-- 抜けてる。 --> 　　　　<li><a href="/contactUs/">観光協会について</a></li> 　　　　<li><a href="/FAQ">FAQ</a></li> 　　　</ul> 　　</div> 　</div> でしたね。
なにはともあれ、仕様書だけはチェックする癖をつけないと、自己流解釈のサイトをいくら見たって役に立たない。 　⇒9.9 レイヤーの表現( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visuren.html#layers ) 　ご覧になるとわかるように（初期値: auto）ですからデフォルトはautoです。 auto 　現在のスタックコンテキストでの生成ボックスのスタックレベルは0になる。ボックスはルート要素でない限り新しいスタックコンテキストを設置しない。 　スタックコンテキストを設置しないのですから、対象外ですね。 　ですので、position:relative;ないし、absoluteなどで親となるブロックのスタックを指定しないと、このz-indexの値が、スタックコンテキストを精製していない場合の負の値が理解できなくなっちゃうのです。 　仕様書を見ればお分かりのように、集計結果が負になるときの挙動は書かれていませんね。--ブラウザによって解釈が変わる場合があります。--- 　あくまでスタックレイヤーを作成して、そのうえで負の値を指定してご覧なさい、きちんと順番どおりに重ねられるはずです。
＞transform や font-stretch以外にも、何かご提案いただけるものがあれば是非ご指導くたさい。 　ないです。これは議論が続いていて、ひょっとするとひょっとしてCSS3 font に入るかも・・(他の段落との競合やブラウザ(OS)のフォント処理などの問題があって現状では難しい) 　一連の質問で、気になるのは「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」という基本部分。HTMLは文書構造を示すもの、プレゼンテーションはスタイルシートに任せる。その効果はリンク先に簡潔に書かれいている。 　すなわち「段落の中の一部だけ、サイズを変える方法はないのでしょうか。」の部分、例えば、本文はHTML5の場合<section>、それ以前のHTMLでは<div class="section">でマークアップしてきました。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』 　その本文内で、重要な語句があれば・・ <section> 　・・・・・・・ 　<p><strong>文書の構造をプレゼンテーションと切り離すことで</strong>広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になる。</p> 　のようにマークアップされていて、「本文(section)内の段落(paragraph)中の重要(strong)な語句は、普通の太さで赤文字で背景は黄色」としたければ section p strong{color:red;font-weight:normal;background-color:yellow;} とスタイルシートを書きます。伸縮したければ、本来の用途ではないが・・ section p strong{display:inline-block;font-weight:normal;transform:scaleY(1.6);} で可能でしょう。 　ただ、transformはすべてのブラウザに対応していないので、 section p strong{display:inline-block;font-weight:normal;transform:scaleY(1.6);background-color:yellow;} など他のスタイルも付け加えておいたら良いでしょう。
アメーバブログでどこまでの情報をいじれるのかは知らないので、とりあえずずれる理由だけを。 現在のhtml構造は、 <body> ... <div class="skinContentsArea"> 　<div class="skinContentsArea2"> 　　<div class="layoutContentsA">...</div> # ←中央＆右サイドバー 　</div> 　<div class="layoutContentsB">...</div> # ←左サイドバー </div> ... </body> となっています。 レイアウトがくずれている理由は メインコンテンツ(layoutContentsA)でfloat:rightで右寄せを行い、 その後メインコンテンツを包含しているラッパー(skinContentsArea2)のafter要素でclear:bothで寄せ指令を解除し、 サイドバー(layoutContentsB)でfloat:leftで左寄せを行っているからです。 解決方法としては2つあり、 1つ目はclear:bothで寄せ指令を解除する前に左サイトバーを入れること。 具体的には <div class="skinContentsArea"> 　<div class="skinContentsArea2"> 　　<div class="layoutContentsA">...</div> # ←中央＆右サイドバー 　　<div class="layoutContentsB">...</div> # ←左サイドバー 　</div> </div> とする。 2つ目はラッパー(skinContentsArea2)のafter要素でclear:bothを削除すること。 これはblog.1.009.cssに記述されているようです。
私の場合はimgタグのname属性を使用してjavascriptでPCの場合とスマホの場合で変更するようにしています。 if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf('iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) { var tags=document.getElementsByName("name属性の値"); for(var i=0;i<tags.length;i++){ 　　 tags[i].・・・命令文 } } と書くことによってスマホの場合の挙動を指定しています。
<img src="img001.jpg" />はmargin:0 auto;を指定して、 <img src="img002.jpg" />はposition:absolute; right:0; でいいのではないでしょうか。 あと、imgにはdisplay:block;をつけてみてください。
cs4のドリームウィーバーさんの場合、デザインビューでinline-blockなどはあまりうまく動作してくれないっぽいです。 http://cssnite.jp/ginza/vol29/ cs4にライブビューって入ってましたっけ？ そっちを使った方が良いかも。 　 ブログで横並びにならないのも謎。 たとえばliの親のulにwidth設定してみてはどうでしょう？ 　 入れ子は気になるなら一旦消してから検証してみた方が良いかもしれません。
reset.css 全て0にしてから設定したい数値を指定する normalize.css デフォルト値を設定してから0にしたいものに0を指定する という違いだけなので、使いやすい方を使ってください。 新しいファイルは新しいHTMLタグが追加されていますので、できるだけ新しい方が良いです。
　略号、頭文字ですから、必ず大文字で書きましょう。 　いまさら、XHTML1.0 はないでしょう。(^^)HTML1.0はXHTML4.01をXMLに適合するように整理したもので、本質的にHTML4.01と変わりません。 　１５年前の1999年のHTML4.01の勧告以来・・『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1 )』とされていまして、transitinalやframesetは将来的に廃止されると予告されてきた。 　学ぶならXHTML1.1またはXHTML2.0でしょうが、XHTML2.0は御存知のように中断です。 　このあたりの流れは、 ・HTML5が持つ本当の意味 － ＠IT( http://www.atmarkit.co.jp/news/200801/25/html.html ) ・HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (1/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/news106.html ) 　をじっくり読まれると良いでしょう。 ＞xhtml5よりか、html5にしたほうがいいと聞いたことがあるのですがなぜなのでしょうか？ 　HTML5ではXML流儀で記述する方法も用意されています。Polyglot マークアップ: HTML 互換の XHTML 文書( http://standards.mitsue.co.jp/resources/w3c/TR/html-polyglot/ ) 　単にXML文法で記述するとそれはXHTML5になります。 　XMLのよいところは、文書が整形されていますから、他のアプリケーションとの整合性が極めて高いということです。その必要がなければ、文法に緩やかなHTMLでよいという意味です。 ＞XHTML1.0とHTML４の関係が、HTML5とXHTML5の関係と同じ関係で 　HTML4.01 -- (XML化)--> XHTML1.0 ＞HTML5を厳格にしたのがXHTML5かと思ったのですがそうではないのでしょうか？ 　HTML5には、XMLに準拠した書き方もある。 　　だいぶ意味が違います。 ＞現場の人たちはXHTML5は厳格すぎてコストがかかるので自由度の高いhtml5を採用するからと言うことなのでしょうか？ 　いえ、HTML5で記述するときも文法的にはXML的に記述するほうが楽でしょう。すなわち ・終了タグは必ず記述する。 ・要素名、属性名は小文字 ・属性値は""で囲む。 　これは守ったほうがHTMLで記述するのも楽です。 　XHTMLの記述をするのは他のアプリケーションから出力されることが多いため、XHTML方式のほうが楽ですし、コストも低い。整形されていますから、機械的な処理がずっと楽になります。 　製作コストに差はないでしょう。 　HTML5は勧告目前とはいえまだまだ未確定の部分があります。非対応ブラウザは少なくなったとはいえ無視できない状況がしばらく続くでしょう。 　その間に ★HTML4.01 ただしstrictを徹底的に身につけておくこと。 　特に、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」に関わる部分は徹底的に身につけておくこと。HTML5ではプレゼンテーションを指定する要素はなくなります。 　むやみやたらと<DIV>は使えなくなります。 　 　　
bind/unbindはもう古いのでon/offを使いましょう。 検証してないけど、 $("#pic").removeClass("trans"); が原因なんじゃないですかね？ こちらは何のための処理ですか？ また $("#pic").removeClass("trans"); $("#pic").attr('src', ''); は $("#pic").removeClass("trans").attr('src', ''); とつなげて書くことができます。
<table summary="見本の表" border="1"> 　<tbody> 　　<tr> 　　　<th abbr="項1">1項</th><th abbr="2項">2項</th><th abbr="項3">3項</th> 　　</tr> 　　<tr> 　　　<td>値</td><td>値</td><td>値</td> 　　</tr> 　　<tr> 　　　<td>値</td><td>値</td><td>値</td> 　　</tr> 　　<tr> 　　　<td>値</td><td>値</td><td>値</td> 　　</tr> 　</tbody> </table> table[summary="見本の表"]{ border:blue double 4px; border-collapse: separate; border-spacing:0 5px; line-height:1.6em; } table[summary="見本の表"] th, table[summary="見本の表"] td{ border:solid 1px green; width:10em; text-align:right; } table[summary="見本の表"] th{ border-color:red green; text-align:center; }
C#やVB.NETのような、マイクロソフトの言語には、統合言語クエリ＝LINQ(Langage INtegrated Query)という、集合型データ処理専用の拡張モジュールが存在するため、ステートメントレベルで配列を一気にフィルタリングしたりできます。 LINQには、DBアクセス専用のLINQ for EFやLINQ for SQL、XML用のLinq XMLなどもありますが、もっとも汎用で使用されるのがLINQ for Onjectと呼ばれる、内部オブジェクト専用のLINQモジュールです。 で、そのJavascript版に、LINQ.jsというライブラリがあります。 こちらをご確認。 http://www.atmarkit.co.jp/fdotnet/dotnettips/1058linqjsbasic/linqjsbasic.html ちょっと文法的な慣れが必要ですが、集合型データの処理を革新する強力な手段になるでしょう。 また、LINQ.jsには、jQueryのチェイン・ステートメントに対応するタイプもあり、jQueryの構文中でそのまま使用できます。
たとえば、 ★Another HTML Lint Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict + CSS2.1 ★タブは＿に置換してあるので戻す。 ★印刷やガラケーには適用されない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html{padding:0;position:relative;background-color:black;height:auto;height:100%;} body{position:relative;width:95%;height:95%;padding:0;background-color:gray;border:red solid 1px;margin:1.25% auto;padding:0;} p{height:50%;text-align:center;position:relative;margin:0;} p span{display:block;position:absolute;bottom:0;width:100%;} --> ＿</style> </head> <body> ＿<p><span><input type="button" value="新規(N)" tabindex="1" accesskey="N"><input type="button" value="変更(C)" tabindex="2" accesskey="C"></span></p> ＿<p><input type="button" value="戻る(R)" tabindex="3" accesskey="R"></p> </body> </html>
floatを使わない。 　使うなら、DOCTYPEスイッチ( https://www.google.co.jp/search?q=DOCTYPE%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:ja:official&hl=ja&client=firefox-a )を標準モードで起動するように正しく記述する。 　そのブロックと抱合ブロックの幅をリキッドでかつ、mi-widthで指定する。 ※標準モードにするのは、ブロックのサイズの計算方法が違うためです。 ※抱合ブロックに最低限必要なサイズをmin-widthで指定しないと折り返されるから position:absoluteがベスト
ヘッダーに画像を使用するのであれば、 <img～タグを、<h1></h1>で囲って、alt=""に店名と説明を書きましょう。 それでOKです。
　ウェブページ作成となると、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/developer_tools/ )の豊富なfirefoxをお使いだと思いますが、 Firebug( https://addons.mozilla.jp/firefox/details/1843 )があれば、F12でスタイルの適用が確認できるはずです。 　CMSやブログツールで、テンプレートを、そのまま使用しないのでしたら、当然HTML/CSSの知識はテキストエディタで作成できる以上の知識が必要です。なぜなら、しばしば複雑で分かり難いソースを相手にしなければならないし、そのツール独特の癖やルールの知識が必要だからです。 　★ここは理解されていますよね。 <td height="15px"> 　HTML要素の属性での指定は、 『ユーザーエージェントは、HTMLソースドキュメントの体裁用の属性を尊重してよい。その場合、これらの属性は0に等しい詳細度と対応するCSS規則に変換され、それらは著者スタイルシートの先頭に挿入されたかのように扱われる。( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#preshint )』 　です。詳細度は0にしかなりません。 　一方、 <td style="padding:0px;"> の場合は「HTMLでは、要素の"style"属性値は、スタイルシート規則である。これらの規則はセレクタを持たないので、a=1、b=0、c=0、かつd=0。( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#specificity )」 　他での指定（セレクタや詳細度）がどうなっているか分かりませんが、 tableの関連したプロパティは 　border-collapse、border-spacing、line-height、height、paddingなどが関わります。 　firebugで、その要素にどのようなスタイルが、どうカスケーディングの上、有効になっているかを確認してみましょう。 　少なくとも、セレクタやカスケーディングはCSS(カスケーディングスタイルシート)の命ですから、それを理解したうえで指定すると簡単です。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html )
発想がそもそもちょっと違うような気がします。 レスポンシブでの制作の場合には、「レスポンシブ対応できるようにデザイン等を企画する」というのが大前提です。 既存のサイトをそのままレスポンシブ化するわけではないです。 ですので、レスポンシブに出来ないデザインになるわけがないですよね。 既存のサイトをレスポンシブ化しようとした場合でも、 レスポンシブに出来ないデザインというのは基本的には無いです。 最悪津堂の悪いものは消せばいいだけなので。 レスポンシブを意識していないサイトは9割以上が「やりにくい、やらないほうがいい、やる意味がない」サイトです。 レスポンシブへの対応は無理ではないですが、無理矢理感の強いサイトになるでしょう。
ブラウザによって記述法が変わってくるのですが http://www.webcreatorbox.com/tech/css-hack-list/ のサイトなどが参考になると思います。
IETesterはインストールされているIE以下の機能で動作します。 現在IE8なら、IE8、7、6での表示は可能。 IE8をアップデートすると、アンインストールしない限り、もとには戻りません。 互換表示設定で対応するしかないでしょう。
absoluteを使います。absolute(絶対配置)の場合、直近のstticでない親コンテナブロックの位置が基準になります。 　⇒'display'、'position'、'float'の関係( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visuren.html#dis-pos-flo ) 　⇒'display'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visuren.html#containing-block )
こんにちは。 キャンペーンページとはたぶん「ランディングページ」の事だと思います。 ランディングページを集めた参考サイト→　http://lp-web.com/ キャンペーン商品に特化したランディングページはそこそこ需要があります。 ランディングページはアフェリエイト広告やメインサイトから飛ばしたりする事が多いので、時間経過でのSEOは気にしないと思います。 （SEO最適な形でのサイト制作は基本ですが） デザイン力・説得力・構成力がランディング制作には必要なので、しっかりしたランディングページが作れれば普通のサイトも簡単だと思います。 頑張ってください。
まず、根本的なこと。 HTMLは徹底して文書構造だけを記述すること。将来のメンテナンスが格段に楽になります。 スタイルシートは、プレゼンテーションを指定します。 「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」必読!! <section> 　<h2>商品一覧</h2> 　<section id="NewGoods"> 　　<ul> 　　　<li>2014年8月1日(金) 　　　　<p> 　　　　　　<a href="">商品説明・・・。商品説明・・・。商品説明・・・。</a> 　　　　　　<img src="" width="" height="" alt=""> 　　　　</p> 　　　</li> と、まったく率直(すなお)に文書構造をHTMLでマークアップしていきます。 上記は、HTML5ですが、HTML4.01には文書構造を示す要素が用意されてなくて、『id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』します。 <div class="section"> 　<h2>商品一覧</h2> 　<div class="section" id="NewGoods"> 　　<ul> 　　　<li>2014年8月1日(金) 　　　　<p> 　　　　　　<a href="">商品説明・・・。商品説明・・・。商品説明・・・。</a> 　　　　　　<img src="" width="" height="" alt=""> 　　　　</p> 　　　</li> 　そのうえで div#NewGoods{padding:10px;} div#NewGoods ul,div#NewGoods ul li{ list-style:none; margin:0;padding:0; font-size: 12px; } div#NewGoods ul li{ float: left; width: 170px;height: 240px; padding:0 10px 8px 0; position:relative; } div#NewGoods ul li p{ margin:0;text-indent:1em;line-height:1.6em; } div#NewGoods ul li p img { display:block; width:140px;height:auto; position:absolute; bottom:5px;left:15px; } だけでよい。 ※ただし、標準モードで動作するように<DOCTYPE>を指定すること。IE7への対策が不要になるし。
アンダースコア（ _ ）で始まるファイル名で作成し、 アンダースコアと拡張子を抜いた名前で@importを指定してください。 たとえば _mixin.scss というファイル名なら @import "mixin"; となります。
floatの挙動を理解しておられないようです。 結論から言うと、「float:left」を全てに入れ、5つめに「clear:left」を入れてください。もっと続くなら、同様に4つごとに入れてください。 なぜそうなるかですが、 まず何も指定しないdivはブロックレベル要素であり、ブロックレベル要素は通常では横に並びません。 これを通常の流れから切り離して横にも並ぶようにする指定がfloatです。 ですので横に並べる全ての要素にfloatを入れなければなりません。 そして、そのままでは横幅いっぱいまで並ぶところ、それを解除する指示がclearです。 具体的には、それ以前の全てのfloatした要素より下に表示されるようになります。 floatとclearについてはこちらのページがとても参考になります。 http://webdesignrecipes.com/css-visual-formating-model/ 4つごとにclearを入れる方法ですが、個別に入れるのは望ましくないので、cssを分離した上で、親要素に「nth-child(4n)」で指定するのが常套です。 なお、No1さんの書き方のように、divの代わりにliを使っても構いません。最近の流行りですね。 また(説明がありませんが)親要素の幅を子要素の4倍にすることで4つ置きに改行させているようですが、子要素の内容やマージンの指定で大きさが変わった時に破綻しますので、個人的にはあまり好きではないです。 (きちんと調整できれば)古いブラウザでも確実に動くのは利点なのですが…。
>・1行目の「○○○○」の部分はjsファイルのどの単語を入れればいいのでしょうか？　※jsファイルの内容は下記の通りです。 他の人が作成したライブラリ、テンプレートなどと重複していなければ何でもいいです。 >　・また1行目、2行目の「template_url」の部分はそのままでいいのでしょうか？もしくは固定ページのテンプレートファイルを指定するのですか？ 　（template-fullwidth.phpのようなファイル） テンプレートのURLを指定するのであれば、"template_url"でなければなりません。 >　・2行目の「●●●●」の部分はスタイルシートの＃以下の単語を記載するのでしょうか？　※スタイルシートの内容は下記の通りです。 他の人が作成したライブラリ、テンプレートなどと重複していなければ何でもいいです。
CSS2以降、基点セレクタを書くことになってますが？？？ *.ranking:after { content:"";background:url(../image/arrow.png) no-repeat;position: absolute;display: block;top: 50%;right: 10px;width: 20px;height: 20px;} margin要りますか？？absoluteされる要素のmarginは他と相殺しませんけど・・ でもひょっとして *.ranking:after { content:url(../image/arrow.png);position: absolute;top:50%;right:10px;}で良さそうな気もしますが(^^)
>　これをそのままHTML5で作られたサイトやブログに貼り付けると、ブラウザは気を利かせて表示はしてくれるかもしれませんが、HTML5のルール上は違反ですよね。 勘違いされているようですが、HTML4でも<table>でレイアウトするのはルール違反です。 http://www.w3.org/TR/html5/tabular-data.html#table-layout-techniques HTML5では<table>でレイアウトする人が非常に多いという状態を鑑みて、レイアウトテーブルという考え方を導入しています。 CSSレイアウトが推奨されてはいますが、HTML5の方が<table>の扱いに対して寛容です。 >　単に楽天側が修正してないだけなのか、それともHTML5でも廃止された要素や属性を使っても問題無いということなんでしょうか？ ブラウザはHTML4とかHTML5という区別をしていません。 サポートしているタグか、サポートしていないタグかの区別しかありません。 http://www.w3.org/TR/html5/text-level-semantics.html#the-ruby-element たとえば<ruby>のように、HTML5で定義されていてHTML5に対応しているブラウザでも表示できないブラウザもあります。 表示上は、サポートしているタグであれば問題ありません。
他の接続環境からは？？ 　個人のスマホから等・・ 　プロキシ使ってませんか？？
ブラウザは何を使っていますか？ justify はIEしか対応していないはずです。 また、justify で行われる均等割り付けは1行の幅に満たない文章は均等割り付けしませんので、全ての行が1行以内に収まる文章の場合は、目的のような配置にはならないと思います。 そもそもの用途は、英語圏の文章で単語単位で行を改行していった場合、行末がガタガタになって長い文章だとどこまでが1文なのか分かりにくくなるのを補うためのもので、日本語のように単語単位では無く文字単位で改行する言語のことはあまり考慮されていません。
SublimeTextは、高機能のテキストエディタです。 乱暴に言えば、Windows付属の「メモ帳」を機能拡張したものです。 いろんな使い方ができるうちの一つが、HTML/CSS等、というだけです。 Web開発に便利なように機能を追加していくと、DW等になります。 持論にはなりますが、エディタはプログラマにとっては筆記用具です。 鉛筆でもシャープペンでも万年筆でも小説は書けますが、自分にしっくりとくる道具が書きやすいように、テキストエディタも自分との相性になってきます。 勧める人が目立つのは、その人と相性がよく、そのことを他の人にも知って欲しいからでしょう。 # 多機能というだけなら、太古の昔から「なんでもあり」だったemacsがありますし。 たとえ、DWが下火になったとしても、それがその人によって使いやすく、もっとも作業効率のよいものなら、周りにかかわりなく使い続けるでしょう。 イラレやフォトショも、同等以上の質の作品が、同等以上の早さでできるなら、Windowsのペイントでやったってかまわないのです。 それに「弘法筆を選ばず」ではないですが HTML/CSSについて詳しい人ならば、メモ帳でもちゃんとしたサイトを作ることができます。 中途の条件にDW経験者、等とあるのは、そういう道具の使い方からイチイチ覚えさせることはしません、という意味です。 極端にはなりますが、DW は使えるけどHTMLがめちゃくちゃな人を採用するくらいなら、HTMLの熟練だけどDWの使い方は不案内という人の方が役に立ちます。後者の人なら、道具の使い方くらい、独習でなんとかするでしょうし。 「使えない」というのは、会社が許可しない、ということです。 特に大きな会社ほど顕著なのですが、PCの管理に厳しく、認められたソフト以外のインストールが禁止されていることがあります。 Adobeのような大企業のソフトだと、ちゃんと保守契約を結んだ上でインストールを許可することがあります。 が、SublimeTextのようなものだと、そういう保守契約が結べるのか、もしものときの保証は、等の問題から、許可されないことがあります。
640X480は『１３インチ』の表示です。ー＞テレビの標準表示 ［モバイル］※幅 480px（スマフォ） ［タブレット］※幅 768px ［デスクトップ］※幅 1000px の画面を作成しレスポンシブウェブデザインで作成します。 画面サイズごとにレイアウトを変化させる仕組みは、CSSのメディアクエリーを使い、 画面サイズごとに読み込むCSSのソースコードを切り替えて行います。 　【例】レスポンシブウェブデザインのカネボウ化粧品 　< http://www.kanebo-cosmetics.co.jp/ > ビデオがアドビのサイトに有ります。
現状では無理なようですね。 >※また、なぜmixinを自動生成するのかというと、mixinを大量に作成し、全てシングルトン構成にしたいからです。 たぶん @include test1; @include test2; という書き方をしたいということだと思いますが、 @include test(1); @include test(2); カッコ付の方が基本ですし、その方が汎用性がありますし、 よほどの理由がない限り、動的にmixinのIDを作る方法はサポートされないと思います。 ------------------ 連番のセレクタを作りたいのであれば、@includeをループさせればいいです。 引数をセレクタにすれば、子セレクタなども作れます。 @mixin test($i) { .test#{$i} { /* style */ } } @for $i from 1 through 5 { @include test( $i ); } @include test( " span" ); ---- 出力 ---- .test1{/* style */} .test2{/* style */} .test3{/* style */} .test4{/* style */} .test5{/* style */} .test span{/* style */}
＞テーブルでとspace.gifを使ってやるしかないのでしょうか？ 　最低限仕様書は理解しなくても一度は目を通しておきましょう。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから そのためのテクニックには思わぬ副産物があった。こうしたテクニックは、特定の人々、特定の時代状況でしか成り立たず、すべての人々、すべての時代状況において成り立つものではないのだ。こうしたテクニックの例を挙げよう。 　・ メーカー独自拡張のHTMLを使う。 　・ テキストを画像に置き換えて表現する。 　・ 余白制御のために画像を用いる。　　★★space.gifを使って 　・ ページレイアウトの目的で表を用いる。★★テーブルで 　・ HTMLでページを作らずにプログラムに頼る。 　こうしたテクニックによって、Webページはより複雑化し、限られた環境にしか適応しなくなり、相互運用性問題に悩まされることとなり、障害を持つ人々にアクセス障壁が設けられてしまう。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )］より 　1999年のHTML4.01の勧告以来強く言われ続けてきた事です。 　大事な事は、HTMLは文書構造を、プレゼンテーションはスタイルシートという大原則です。構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) 　例えば、ナビゲーションリストなので次のようにマークアップされていたとします。 <div class="nav" id="globalNavi"> 　<ol> 　　<li><a href="/">トップ</a></li> 　　<li><a href="/products">製品一覧</a></li> ・・・・ 　このようにHTMLではデザインをまったく考えずにひたすら文書構造をマークアップします。 　そして、スタイルシート(media="screen")で #globalNavi{ background-image:url(images/index_main01_02.jpg); width: 629px; height: 390px; positio:relative; } #globalNavi ol li{ list-style:none; position:absolute; } #globalNavi ol li{ left:0; top:60px; } #globalNavi ol li+li{ top:100px; left:100px; width:520px; } #globalNavi ol li+li+li{ top:300px; left:200px; width:420px; } とか、好きにデザインすれば良い。 こうしておけば、携帯電話や印刷、読み上げブラウザでは、きちんとリストで表示、印刷、読み上げてくれるが、PCやスマートフォンでは、629px; height: 390px;の背景画像の上に、最初の項目は右サイドに上から60px、二番目は上から100px左から100px、三番目は上から100px左から200pxに表示してくれる。 　もちろん、先でデザインをまったく変えたくなってもHTML書き換える必要はないし、必要なら印刷用、携帯用でデザインを変えることもできる。
　掲示板の文書構造が表でもおかしくは無いと思います。 　横軸が各項目（投稿時間・投稿者・メルアド・発言内容）で、縦軸が時系列とすれば、立派な表ですね。一発言が表の１行として表現される形です。 　個人的には、どちらかというと、構造化された（入れ子の）リストと考えた方が、すっきりするように思います。 　特に、発言へのレスを元発言に対して、インデントして表現するとなると、ますますリストっぽくなります。 　 　どちらにしても、レイアウトは完全にＣＳＳでコントロールできます。 　リスト構造の一部を横に並べる方法がよく見られるのは、ページトップのメニューです。 　このＯＫＷＥＢサイトの上部にあるカテゴリのメニュー表示が、一番近くにある実例。（スクリプトが絡んでいますが、スクリプトの部分は、マウスを置いた時に子メニューがでるようにするためです。これを無視すればたんなる単純なリストです。） 　classをきちんと分けていけば、あまりdivに頼る必要も無いはずです。
こんばんわ 原因としてIEの不具合が原因だと思います。 一度、下記の事をする必要があります。 ０：不要なIEツールバー削除 http://ebid.cals-ehime.lg.jp/info/20080905.html １：０が終わりましたら、IE設定初期化 富士通Q&A - [Internet Explorer] 設定を初期化する方法と検索、IE設定の初期化をします ２：１が終わりましたら、ドライバー更新 ・Driver Booster Free - 窓の杜ライブラリと検索し、Driver Booster Freeを使い、ドライバー全体を更新します。 ・DirectX エンド ユーザー ランタイム Web インストーラによるＤｉｒｅｃｔｘの更新 http://www.microsoft.com/ja-jp/download/details.aspx?id=35 ３：２が終わりましたら、FLASH　PLAYERの更新をします。 ４：３が終わりましたら、PC　チェックディスクと検索し、チェックディスクを行います。
モーダルウィンドウで検索してみてください。 理屈としては、同じページに非表示の部品として記述しておき、ボタンを押したりしたタイミングで表示に切り替えることによって実現しています。
ルール的な理由は先の回答者に譲りますが。。。 　 記述する時は「#id 要素」みたいな書き方をするケースは多いと思います。 理由としては「idをつけた方がどの要素の箇所なのかわかりやすい」ということ、 そして、「適用の優先度」の問題があります。 　 たとえば、 td { background-color:#ffffff; } よりも、親要素を書いた #id td { background-color:#333333; } の方が優先されたりだとか。 (但し衝突しないスタイルは引き継ぐ) 　 あらためて。 どの要素どのスタイルがあたっているなどで混乱しないよう、 そして、仮にぶつかっててもなんとかするために(本当はダメな考え方でしょうねｗ)、です。
Multiviews機能でできないかな？と思ったけど、よくわかりませんでした。 できそうな気がするけど・・・ 今、ささっと思いつく方法は・・・ --------------------------------------------- .htaccess RewriteEngine On RewriteRule ^/gazou/1/([1-9][0-9]*)$ is_img.php?n=$1 [L,QSA] --------------------------------------------- mod_rewrite でサーバサイドプログラムに数字を引数として渡して（例ではPHP） プログラム側で画像の有無を判別して heder location して、その存在する画像に誘導
解像度と表示サイズがイコールになるかどうかは機種依存です。 横解像度をdevicePixelRatioで割った数が仮想的なスクリーン幅（viewport width、device-width）です。
以前少しwebページ制作の営業をやっていました。正直需要はどこにでもあるのですが、電話していてアポが取りやすいのは美容院やレストランでした。病院はまず受付から委員長に繋げるのが難しいのと、つながってもネットがわからないおじいちゃんが多いのでキツイです。 また、実際起業する際は人づてでの仕事がある程度見込めないと厳しいと思いますので、必然的に案件=交友関係のある年齢層からが中心となります。そうなると病院や大企業、法律事務所などのHPを受ける機会はあまりないんじゃないでしょうか。 しかしその反面、個人経営の美容院やレストランが投資できるお金は少ない(一案件100万円いけばかなりいい方。それでブログつけてくれとか通販できるようにしてくれとかメンテナンスもしてくれというリクエストが来る。)なので、一長一短です。 例えば病院なんかはお金もある事が多いし、仕事を受注してからは簡単なことが多いですからね。 結局は自分の交友関係と、やりたい物と相談することになるかと思います。言うまでもありませんが、スキル・センス的にはあらゆる業種のwebページを作れなければ独立することは難しいと思いますが。
サイトのどこにおいても良いように書き換えた。 サーバーのどこかに置いてください。 ★HTMLとCSSの基本を身につけましょう。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』であって、デザインのためではありません。 ★スタイルシートの 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html ) は、絶対にひつような知識。これがないとDIVをデザインのために書いたり、煩雑なHTML/CSSになる。 頑張ってください。 <style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;line-height:1.8em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;position:relative;} div.header h1,div.header h2{width:49%;display:inline-block;position:relative;} div.header h1 img,div.header h2 img{width:90%;height:auto;} div.header div.nav{width:100%;line-height:2em;text-align:center;} div.header div.nav a{text-decoration:none;font-weight:bold;color:black;} div.header div.nav ul,div.header div.nav ul li{list-style:none;margin:0;padding:0;} div.header div.nav ul li{display:inline-block;width:13%;position:relative;margin-left:1px;font-weight:bold;} div.header div.nav ul li+li:before{content:"|";position:absolute;left:-1px;top:0;} div.header div.nav ul li ul{position:absolute;top:2em;width:100%;display:none;z-index:10;} div.header div.nav ul li:hover ul{display:block;} div.header div.nav ul li ul li{font-weight:normal;width:100%;} div.header div.nav ul li ul li:before{content:"";} div.section h2,div.section p,div.section div.section,div.section div.aside{width:auto;margin:0 300px 0 0;min-width:0;border-color:gray;border-style:dotted;} div.section{min-height:800px;} div.section div.section{min-height:0;} div.section div p{width:auto;margin:0;} div.section div.nav{position:absolute;width:295px;top:0;right:0;font-size:0.95em;} div.section div.nav h4{line-height:33px;border-bottom:ridge 5px rgb(255,100,100);} div.section div.nav h4:before{content:url(/wp/wp-content/uploads/2014/07/icon_sidebar1.png);position:relative;top:10px;} div.section div.nav ul{list-style-type:none;line-height:1.8em;} div.section div.aside{font-size:0.95em;} div.section div.aside h4{line-height:3em;margin:1em 2em;text-align:center;font-size:1.5em;} div.section div.aside dl{margin-left:170px;line-height:1.6em;position:relative;} div.section div.aside dt{position:relative;font-widght:bold;} div.section div.aside dd{min-height:2em;margin-left:0;text-indent:1em;} div.section div.aside dd a{position:absolute;background-color:rgb(255,200,200);width:8em;text-decoration:none;display:block;right:10px;} div.section div.aside dt a:before{content:"";background-image:url(/wp/wp-content/themes/stinger3ver20140327/images/no-img.png);position:absolute;top:0;left:-160px;width:110px;height:110px;display:block;background-size:cover;} div.section h2{border-width:1px 1px 0 1px;} div.section div.section,div.section * p{border-width:0 1px;} div.section * p{border:none;} div.section div.aside{border-width:0 1px 1px 1px;} div.section div.aside h4{border-style:dotted;border-width:1px 0px;border-color:gray;background-color:rgb(200,200,200);} div.section h2,div.section p,div.section div.section{background-color:white;} div.section * p{background-color:transparent;} div.header div.nav ul li ul li{background-color:rgb(255,240,240);} body{background-image:url(/wp/wp-content/uploads/2014/07/04-polish-wood.png);} div.section div.aside dl a{text-decoration:none;} div.section div.aside dl a:hover{text-decoration:underline;} div.section div.aside{background-color:rgb(255,225,225);} --> </style>
はじめに、基本的にwebページの公開ははじめに内部で製作 > 完成したら外部に公開する設定にするという手順で進むので、2つ目の工程を踏まなければ自動的に内部限定での公開となります。以下必要なものと簡単な手順です。 【ハードで必要なもの】 ・サーバー(普通の古いノートPCでもいい) ・市販のルーター 【ソフトで必要なもの】 ・ネットワークの基本的な知識(CCNA1程度) ・osがwinならXAMPPというパッケージソフトを入れれば一気にサーバーが出来上がります ・XAMPP使わないならLPIC1程度のLinuxの知識 ・webサーバー扱うのでApacheに関する知識 【手順】 1. サーバーのIPを固定します。 2. 一応ルーターでポート解放されていないか確認and心配ならwebサーバーの設定で外部からはアクセス出来ないようにする。 3. webサーバーを立ち上げます(=Apacheを立ち上げます) 4. webサーバーで設定している公開ディレクトリにhtmlファイルを置きます。 5. あとは普通に同一ネットワーク内の他のPCからブラウザのURLバーにIP入れてアクセスすればOK 6. もしもhttp://localnet.comなどのホスト名でアクセスさせたいなら、各PCのhostファイルか、社内のDNSにその情報を登録。
display: table-cell と、メディアクエリーを組み合わせです。 table-cell もサポートしていなければ dipslay: inline-block とメディアクエリー、 それもサポートしていなければ display: block と float: left とメディアクエリーで段組み数の切り替える方法が使えます。
gotodate(this.id)　の中でどんな処理をしているかにもよりますが、少なくとも関数の戻り値としてfalseを返す必要があると思います。
まず、同じスタイルを複数の要素に割り当てたい場合は カンマ区切りで指定できるので table, table tr, table th, table td {border:1px solid red;} のように書けます。 枠を消したい場合はそのtableにid(たとえばnoborderとします)を付与して table#noborder, table#noborder tr, table#noborder th, table#noborder td {border:none;} とすればよいです。白線にしたい場合はwhite;とでもしてください。 透明な線にしたい場合はborder-color:transparent;とすればよいです。
そんな難しいものではありません。 ＞web初心者ゆえ参考サイト等色々調べて見よう見まねでやってみたのですが、 　それでは、時間ばかりかかって、決して上達しません。 　この世界、理数系の勉強と似たところがありますね。基礎からきちんと積み上げていけば簡単で、応用が利きます。しかし、問題集をいくらこなしても応用は利きませんね。 　HTML/スタイルシートを使用するのは、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」でしたね。 　HTMLでひたすら文書構造だけをマークアップして、スタイルシートでscreen(パソコンやスマホ)用、handheld(携帯電話、フィーチャホン)用、print(印刷機)用にプレゼンテーションを指定していきます。 　すなわち、<h1>ここは見出し</h1><p>ここから一つの段落</p><ul><li>順不同リストの項目</li><li>二つ目の項目</li></ul>とマークアップさえされていれば、 ・ロゴ画像のすぐ横にメニューボタンが綺麗にならべようが ・画像の中心部から横１列にしたいのですが ・ウィンドウを縮めると連動してテキストが勝手に動いて段分かれ 　も自在に出来るでしょう。 他のくだらないサイトをまねするのではなく ・HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) ・CSS 2.1仕様（日本語訳）( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) 　くらいは、しっかりと読んでおきましょう。 　それから始めたほうが断然早いですよ。 　
私が不可解に思うのはなぜ情報を全て出さないのか、です。 htmlに<div id="header">が無いのに急にcssでは出てくるし… さらに、下記のものをそのまんま組んでみましたか？ <div id="header"> </div> <div id="content"> <div id="main"> </div> <div id="left"> </div> </div> #header { position: relative; width: 100%; height: 160px; } #content { width: 950px; height: auto; margin-right: auto; margin-left: auto; padding-right: 6px; } #main { width: 700px; height: 1020px; float: right; } #left { text-align: center; width:230px; float: left; height: 1020px; margin-right: 0px; margin-bottom: 5px; margin-top: 0px; } 少ない情報で回答が必要なら、まず削った情報分だけでもご自身でブラウザで確認してください。 今回の件で言いますと、全く問題は起きていません。 全てのボックスにbackground-colorを指定して確認してみればどういう状態かわかるでしょう。 #headerと#left及び#mainは密着しています。 heightは隙間には関係ありません。 縦に意図しない隙間が空く、と言うのなら質問者様が情報を出していない部分に原因があります。 回答者もエスパーじゃないので、情報が無くては回答のしようがありません。 #mainと#leftの間に隙間が空く、という事については 950pxのボックスの中で230pxを左寄せ、700pxを右寄せにしているのですから、#leftと#mainの間に20pxの間隔が空くのは当然です。 #leftと#mainを密着させたいのなら、その20pxは一体どこへやりたいのでしょう？ 本当に解決させたいのなら、情報を全て出した上で何が意図しない挙動なのか、意図しない隙間は何ピクセルなのか、目的としてはどうしたいのか、こういう事を全て書く事をお勧めします。 スクリーンショットを添付するとよりわかりやすくなります。
結果だけを求めて、適当と思われるソースをひっぱってきて・・ なんて最悪です。 $・・はSassの書き方ですよね。CSSもHTMLもその段階でSassまで飛躍しても役に立たないです。 jaquery、mediaqueryも混同されているような・・ さらに!importantの意味はごぞんじないと思われます。 レスポンシブデザインとは、CSS2.1の時代に存在した、media別スタイルシートの拡張で、端末のscreenの幅によってスタイルシートを切り替える手法です。 　その前提として、サイト自体はリキッドで製作してあることが前提と言っても良いでしょう。 1) まずブラウザ間の誤差をなくするためHTML4.01以降ではstrictを使用(XHTML1.1,HTML5にはstrictdかない) 2) DOCTYPEをブラウザが標準モードで動作するよう適切に記述する。 　　・・・これでブラウザ間の誤差はほとんど解決する。 3) HTMLには文書構造以外書かない。 　　・・・デザインに合わせてHTML書くとスタイルシートで困る。 4) それをスタイルシートを用いてリキッドで製作する。 　　・・・ たったこれだけです。必要なら 5) mediaqueryを使ってディスプレイサイズに合わせてスタイルを変更する。 mediaquery( http://www.w3.org/TR/css3-mediaqueries/ )は、media( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/media.html#media-types )の拡張です。 !importantは最重要宣言と言われ、 6.4.1 カスケード処理の順序( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#cascading-order ) 6.4.2 !important規則( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#important-rules ) 　を読まれたら分かるように、示されたような用途に使用するものではありません。 単純にリキッドでデザインし、その上にmediaquery(jqueryじゃない)でスタイル鋪切り替えれば済む話です。 ・つぎはぎではなく、ちゃんと基礎から順を追って身につけましょう。そうしないと応用はできません。それは、HTMLから必要なように見受けます。
kyabochaさんのｃｓｓは、考え方はある意味間違っていますが、記述はほぼ合っています。 cssの余分なスペースを取ると、思った通りになると存じます。つまり、プロパティの前のスペースに、余計な物が入り込んでいるため解釈されていないだけです。スペースは削除するかtabか「半角スペース」に置き換えてみてください。それと、その記述だと、影が上に乗る気が。透明gifで問題ないのですかね？ 次に間違っている部分ですが、ｈｔｍｌ＋ｃｓｓでは、装飾的なことはｃｓｓを使い、ｈｔｍｌには入れないという基本理念があります。ですので、影をｈｔｍｌに入れるのは、間違いだと思います。私ならこんな感じで影を付けると思います。こっちだと、影はgifでなくても、jpgでも問題なく使用できます。 <div class="staffphoto"> <img src="写真.jpg" width="160" border="0"> </div> .staffphoto img{ background:url(影.gif) no-repeat 5px 5px; padding:0 5px 5px 0; }
＞レイアウトを決めるために画像を作り、これを基に、 　そのようなウェブページの作り方は、絶対に避けましょう。HTMLはDTP（Desktop publishing--卓上出版( http://ja.wikipedia.org/wiki/DTP )とはまったく逆の発想による仕組みです。 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )の後半 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 ) は必ず読んで理解して置いてください。 　Dreamweaverは、優秀なWebオーサリングツールですが、HTML/スタイルシートのこれらを知らないと、しばしばそのような作り方をしてしまいます。 1)まず、率直にHTMLを用いて、ひたすら文書構造をマークアップします。HTMLが正しい事を確認して 2)スタイルシートでプレゼンテーションを指定していきます。 [HTML4.01strict] ← HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1 ) ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- --> ＿</style> </head> <body> ＿<div class="header" id="Top"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section" id="A1"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される。</p> ＿＿</div> ＿＿<div class="section" id="A2"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>class名のheader,section,nav,aside,footerはHTML5では、そのまま&lt;header&gt;,&lt;section&gt;,&lt;nav&gt;,&lt;aside&gt;,&lt;footer&gt;になります。もちろん、その用途も合わせてあります。</p> ＿＿</div> ＿＿<div class="section" id="A3"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>HTMLでは文書構造だけをマークアップしているため、後日のメンテナンスがとても楽になります。スタイルシートの技術も楽になります。さすがにDreamweaverでは無理ですが・・</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="#A1">A</a></li> ＿＿＿＿<li><a href="#A2">B</a></li> ＿＿＿＿<li><a href="#A3">C</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足記事</h3> ＿＿＿<p> ＿＿＿＿本文と直接関係ない記事 ＿＿＿</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2014-06-03</dd> ＿＿</dl> ＿</div> </body> </html>
なるほど、けっこうなボリュームがありますね。 wordpressのようなCMSを使おうというのも頷けます。 さて、WordPressでご希望のマニュアルを作成しようとした場合、マニュアルを記事として投稿、サイドバーに記事一覧として索引を載せる、という方法しか思いつきません。 こうなるとある程度自分でコーティングする必要があるでしょうね。
こんなところで聞いたってまともな答えは得られない。なぜ仕様書を確認しないのですか？？ 4.3.3 パーセント値( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/syndata.html#percentage-units ) 6.1 指定値、算出値、実効値( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#value-stages ) 8 ボックスモデル( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/box.html ) 10.2 内容の幅: 'width'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visudet.html#the-width-property ) 　特に「10.1 "包含ブロック"の定義」 　これだけの情報が絡むので、ここで説明しきれる内容ではありません。 bodyに幅を指定しても、その祖先にstaticでない参照すべき親コンテナブロックがないのですから無意味です。 html{margin:20px;position:relative;} body{width:50%;margin:0 auto;} 　仕様書だけはかならず目を通しておきましょう。そうしないとつまらないところで足踏みしてしまう。 <body style="background:red;width:100%"> aaaa </body> 　こんなHTMLはありえません。こんなことしてるとだめです。bodyにはブロック要素しか置けません。 <!ELEMENT BODY O O (%block;|SCRIPT)+ +(INS|DEL) -- document body -->( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#edef-BODY ) それがないため、ブラウザは匿名ボックスを作ってしまいます。そうすると、スタイルシートがうまく機能しなかったり・・ 　⇒メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。.( http://jigsaw.w3.org/css-validator/#validate_by_input )
＞望みどおりに実現できてしまっているのでしょうか？ 　出来てないです。! 　左に配置する要素(ここでは#left)の内容「あの文字数」を減らせば一目瞭然です。 　それは、floatで後続の内容が回り込んでいるためですね。 　これを回避するためには、#right p{margin-left:200px;}とすると回り込む要素がなくなると、自身のmargingが生きてきます。(floatではmarginは相殺されない) 　⇒Box model - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/box.html#collapsing-margins ) 　まだ始めたばかりだと思いますので、細かいことも含めて指摘しておきます。 ・HTMLは文書構造だけ記述する。 　2.4.1 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) ・idやclassは文書構造を補完するため 　「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )」 　container,left,rightというのは(内容の意味)文書構造じゃないでしょう。 　header,footerはその意味から一つの文書内に行くとも登場する可能性があるので、idじゃなくclass。HTML5の新しい要素を見ると <body> 　<header> 　　<h1></h1> 　　<nav></nav> 　</header> 　<section> 　　<section> 　　　<article> 　　　　<header></header> 　　　　<section></section> 　　　　<footer></footer> 　　　</article> 　　</section> 　</section> 　<footer></footer> </body> のようになることを考えても ・<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"・・略・・ 　XPもサポート終了、HTML5が勧告直前でいまだにTrnsitinalはさすがにないでしょう。 　1999年のHTML4.01の勧告以来『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1 )』 ・*{} 全称セレクタでブラウザのもつすべてのmarginを０にしてしまうと、登場するすべての要素に対してスタイルを追加しなければならなくなります。どこかの糞オーサリングツールが行なっている手法ですが、必要なとき必要なものだけリセットしましょう。 ・#headerではなく、きちんと基点なるセレクタを書きましょう。 　「単体セレクタは型セレクタもしくは 全称セレクタのいずれかの直後に、0個以上の属性セレクタ、IDセレクタ、擬似クラスが任意の順序で続くものである。( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html#selector-syntax )」 　後方互換でCSS1の書き方で通用はしますが・・。 ・<a href="#" onClick="history.back(); return false;">戻る</a> 　javascriptを使用するときはjavascriptが無効なUAのことも考慮すること。 [サンプル] ☆Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) ☆タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=UTF-8"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;min-height:400px;} div.section div.nav,div.section div.aside{position:absolute;top:0;width:150px;height:100%;padding:0 5px;font-size:0.9em;} div.section div.nav{left:0;} div.section div.aside{right:0;} div.section div.section{width:auto;min-width:0;margin:0 160px;min-height:0;} div.section h2,div.section p{margin:0 160px;} div.section div p{margin:0;} /* 色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.aside{background-color:lime;} div.section div.nav{background-color:silver;} div.footer{background-color:fuchsia;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section" id="section1"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section" id="section2"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="nav" id="contentTable"> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li>１項</li> ＿＿＿＿<li>２項</li> ＿＿＿＿<li>３項</li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足記事</h3> ＿＿＿<p>ここには、本題から外れた(aside)、本題とは直接関係しない記事を書く</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
補足ありがとうございました。 このエラーですが、必要な終了タグなどが抜けている場合に起こるようです。 <body>タグの開始で起きていると言うことは、</head>とかが抜けていたりしないでしょうか？ 一度、検証で構造チェックしてみると良いと思います。 ウィンドウ→結果→検証で検証ウィンドウを表示し、検証ウィンドウのW3Cバリデーターを実行すれば、構造エラーをチェックできるので、終了タグの抜けがないか確認できます。 ご参考まで。
windows8.1のPC上でホームページビルダーの再インストールを行ってください。 そうしないとレジストリィなどにホームページビルダーの登録情報が無いため素材のある場所も登録情報が見つけられないためです。 ウエブ・デザイナーも同様です。 実際、それでとりあえず動くだけでもマシです。 普通はファイルを移しただけでは起動できずインストールしないとダメというのが多いですから・・・
　まず、HTMLを徹底的に復習しましょう。HTMLがきちんとできないとスタイルシートもへったくれもない。 　「スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )」のですが、それはHTMLからプレゼンテーションの役割を取り除くということです。（構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )） 　ここらはしっかり読んで理解しておくこと。上っ面だけまねてもダメです。 　スマホも他のPC用と同じscreenと呼ばれるメディアですから、スマホ用と区別してはなりません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より HTML5だと <header></header> <section> ・・・記事・・・ 　<figure> 　　<img src="" width="" height="" alt=""> 　　<figcaption> 　　　<p>記事</p> 　　</figcaption> 　</figure> ・・・記事・・・ 　<figure> 　　<img src="" width="" height="" alt=""> 　　<figcaption> 　　　<p>記事</p> 　　</figcaption> 　</figure> </section> のようになるでしょう。それより前のHTMLでしたら <div class="header"></div> <div class="section"> ・・・記事・・・ 　<div class="figure"> 　　<img src="" width="" height="" alt=""> 　　<div class="figcaption"> 　　　<p>記事</p> 　　</div> 　</div> ・・・記事・・・ 　<div class="figure"> 　　<img src="" width="" height="" alt=""> 　　<div class="figcaption"> 　　　<p>記事</p> 　　</div> 　</div> </div> と、DIVに『id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』して構造を示しますね。 これをスタイルシートでデザインして行きます。HTML5用 figure{ width:80%;min-width:380px; margin:0 auto; border[solid 2px white; position:relative; } figure img{ display:block; width:95%;height:auto; margin:5px auto; } figure figcaption{ width:80%;left:10%; background-color:black;color:white; text-indent:1em; position:absolute; bottom:5px; border-radius:5px; } とか・・HTML4.01だと div.figure{ width:80%;min-width:380px; margin:0 auto; border[solid 2px white; position:relative; } div.figure img{ display:block; width:95%;height:auto; margin:5px auto; } div.figure div.figcaption{ width:80%; left:10% background-color:black;color:white; text-indent:1em; position:absolute; bottom:5px; border-radius:5px; } 　今日は出かけるのでテストしてませんが、こんな簡単なものでよいはず。HTMLには文書構造しか書いてないので分かりやすいし、当然スタイルシートも分かりやすくなる。
＞css,htmlは同じ場所に入れています 同じ場所であればcssの指定は、以下のようになります。 　　css/main.css　→　main.css また、gifファイルのパスも間違っていますよ。
ブラウザを変えて1通り動作チェック。話はそれからだ。 P.S. 最近のブラウザはセキュリティチェックが高く設定されてるので、別窓リンクを「ポップアップ」と見なして自動的にブロックする機能がDefaultで働いてる事もある。 他には同時に別の何かJavascriptが裏で走ってる場合、上手くリンクが機能しないと言う事例をgoogleのフォーラムで見た覚えあり。何か心当たりは？ 考えられる要素を全て書き出し、それを愚直に1個1個ずつ潰していくしか方策は無い。Try＆Error
指定の仕方から、もしかしたらposition:absolute;で指定してますでしょうか？ 　 ぱっと思いつく対策として ・絶対配置の基準(親)となるボックスを作る （body以下をdivで囲んでcssでposition:relative;width:○○px;margin:0px auto;指定） くらいでしょうか？ 　 多用すると編集がめんどくさくなりがちなので、あまりレイアウトでは使わない方が無難とは思います。
手がつけられない・・ Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) でチェックすれば分かります。 あまりに酷すぎてスタイルシートではどうしようもない。 <center><BR><right>なんてないし。 　そもそもHTMLでページを作るのは【ただひとつ】 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 ) 『CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。.( http://jigsaw.w3.org/css-validator/#validate_by_input )』 　なのです。 　
> .レスポンシブウェブデザインはすでにwebクリエーターの仕事をする上でそのように作るのは当たり前なのでしょうか？ Webサイトの制作はビジネスですので予算によります。 レスポンシブは結構コストがかかるのでお客さん次第じゃないですかね。 ちゃんと作ってればPCサイトはタブレット、スマホで問題無く閲覧できるので 個人的にはレスポンシブは作り手の自己満足に近いと考えてます。 また、レスポンシブにすればそれだけでSEOに効果があるというのも眉唾です。 http://www.suzukikenichi.com/blog/responsive-web-design-is-not-a-ranking-factor/ 色々な事を総合的に判断してレスポンシブにするのかどうかを決定しましょう。 > その場合%ですべて指定して作るやり方と、@mediaを使ってすべてをPXでつくるやり方どれが一番仕事上良いのでしょうか？ 「%ですべて指定して作るやり方」というのは普通のリキッドデザインという事ですね。 レスポンシブとは違います。 ただのリキッドデザインでは、幅によってカラムを意図的に落としたりメニューの表示方法や位置を変えたりする事は出来ません。 @mediaで指定して、幅ごとに異なるスタイルを指定して作成したのがレスポンシブウェブデザインです。 例えば、上記サイトに挙げたサイトのサンプルを下に転記しますが、 下記の様な場合に#containerに対して%を指定するかpxを指定するかは作り手の自由です。 max-width部分はpxです。（ここが%なら何をやってるのかわからないので。） @media screen and (max-width: 1000px) { #container{ width : 95%; } } ■px指定の例 http://www.saintmedia.co.jp/corp/ ■%指定の例 https://www.chozai-ma.jp/ 勿論全体の囲みだけでなく、表示方法を変える所は幅ごとにいちいち指定を上書きする必要があります。
＞複数のdivを横並びさせる 　これ意味不明です。DIVは「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )」であって、デザインのためじゃありません。HTML5では「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html#the-div-element )--他に適切な要素がないときの最後の手段として使用すること」となります。 　プレゼンテーション(表現)をスタイルシートで行なう最大の目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」です。そこや、「スタイルシートは・・・HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、・・・その他様々なプロパティの設定が簡単にできる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )」書かれているように。 　ここ、HTML/スタイルシート書く時に最も重要な根幹に関わる部分です。しっかり読んで復習しておきましょう。 　例えば、ナビゲーションリストとして次のようにマークアップされているものとしたら、HTMLには一切手を加えないでスタイルシートで ・複数のdivを横並びさせる時一つだけ中央 ・ウィンドウトップ（または最下段）に固定して横並び ・左または右に縦に配置 ・画像の上にボタン的に配置 ・ディスプレイ幅に合わせて中央に横並び 　など、自由自在にHTMLに頼らずにデザインできます。先でデザインの変更もHTMLには無関係にできますよ。 <div class="header"> 　<h1>ページタイトル</h1> 　<div class="nav"><!-- ナビゲーションだよ!!HTML5ではnav --> 　　<ol><!-- 序列リストだよ --> 　　　<li><a href=""></a></li><!-- リストの項目とリンクだよ --> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> 　</div> </div> 　ちなみにHTML5だと <header> 　<h1>ページタイトル</h1> 　<nav> 　　<ol> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> 　</nav> </header> さて、ここで「３つのリンクを横並びさせる時一つだけ中央」とデザインしたければ div.nav{ width:100%; min-width:470px;/* スマホ縦置き用 */ max-width:1000px;/* 幅広ディスプレイ用 */ line-height:40px;/* ボタンの高さ */ position:relative;/* 子孫の位置やサイズの基準とする */ margin:0 auto; height:40px; } div.nav ol{ list-style:none;/* リストとは表示しない */ margin:0;padding:0;/* ブラウザのもつスタイルを消す */ } div.nav ol li{ margin:0;paading:0;/* ブラウザのもつスタイルを消す */ top:0;left:0;width:100%;/* div.nav内に */ text-align:left; position:relative; } div.nav ol li+li{ text-align:center;/* 二つ目は中央 */ } div.nav ol li+li+li{ text-align:right;/* 三つ目は中央 */ } div.nav ol li a{ display:inline-block;/* ブロック */ width:25%;min-width:200px;max-width:300px;/* サイズを指定 */ text-align:center; background-color:yellow; position:relative; z-index:100; } div.nav ol li+li a{top:-40px;} div.nav ol li+li+li a{top:-80px;} とHTML見なくても書ける。他にもいろいろ方法はあります。 他のデザインも考えて見ましょう。(HTMLは触らず) 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html ) 全体サンプル ★タブは＿に置換してあるので戻す。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATAでチェック済みHTML4.01strict+CSS2.1 ★スマホから幅広ディスプレイまで対応 　印刷には適用されない(印刷プレビューで確認) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* ここに上記をコピペ */ body{background-color:gray;} div.header,div.section,div.footer{background-color:silver;] --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"><!-- ナビゲーションだよ!!HTML5ではnav --> ＿＿＿<ol><!-- 序列リストだよ --> ＿＿＿＿<li><a href="/">Top</a></li><!-- リストの項目とリンクだよ --> ＿＿＿＿<li><a href="/Products">Products</a></li> ＿＿＿＿<li><a href="/Contact">Contact</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
header1,header2とは分からないidですが・・ 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』 　勧告(1999)後15年になるのに理解されなくて、HTML5では、この反省からDIVは極力使わないで構造を明確にする新しい要素が追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements ) 　ここをしっかり理解しておかないとデザインをちょっと変えたいとき困りますし、HTMLのメンテナンスも大変になる。 ・#header1,header2は、本当のところなんでしょう。見出しなら、<h1></h1>で良いです。 　「テキストを画像に置き換えて表現する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )」はちょっとまずいので、実際の内容はなんなのでしょう。 ・横に並べる方法は、inline-block、でもinlineでもcontent:url()でも、もちろんfloatでも構いません。内容によって選択します。 ・ディスプレイの最大幅、最小幅の想定は？ ・画像はウィンドウ幅に合わせて伸縮させるのか？ 　<----余白---->[-----画像-----]10px[--画像--]<----余白----> 　[--像-]10px[画像] ・それとも画像は伸縮させずに余白で制御するのか 　<----余白---->[---画像---]10px[画像]<----余白----> 　　　　<余白>[---画像---]10px[画像]<余白> 　HTMLさえ、きちんとマークアップされていれば、いかようにも出来ます。 例えば、標準的な <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 以下省略・・・ 　だけで良いのですよ。それで画像を２枚並べられる。
.TopArea { top: 0; /* ←追加 */ } でどうでしょう。
HTML,CSSはブラウザを含めソフトには関係ないです。 HTMLは、Hyper Text Markup Language の略でリンク機能を持つマークアップ言語です。 　<h1>ここは見出し</h1><p>個々からひとつの段落でです。</p><p>と、タグでその文書を構成する、<strong>ひとつひとつの要素がなんであるかをマークアップ</strong>する"マークアップ言語"です。</p> 　<p>その最大の目的は作成や利用にアプリケーションによる依存を避けるためです。</p> 　SGMLを参考に作られました。以下の前後を読まれると良いでしょう。 　『そこで、プレーンテキストのみを用いて、「タグ」を使うことによってデータに意味を持たせることが考えられた。( http://ja.wikipedia.org/wiki/Standard_Generalized_Markup_Language#.E8.83.8C.E6.99.AF )』 スタイルシートは、それをどのように表現するかを指定する言語で、これも同様の理由でテキストです。ブラウザでHTMLを開くと<h1></h1>で囲まれた部分が太字で大きく、<p></p>で囲まれた部分も改行されて表示されるのはブラウザが元々持っているスタイルシートによるものです。 strong{volume:loud;voice-famiry:male;}とすれば男声で大きく読み上げてくれます。h1{position:fixed;}とすれば、その位置に張り付いて表示され、印刷すると各ページに印刷されます。 　ですから、知ってさえいればメモ帳でも書けます。そのためのものですし、逆にオーサリングツールだけでは不可能です。なぜなら、オーサリングツールには、どこが大事で、どこからどこまでがひとつの段落かなんてわからないからです。 ＞ただ表示するWebブラウザが対応していれば、制作するソフトは関係ないですか？？ 　まさに、そのためのHTMLでありCSSなのですよ。HTMLは、高々数十鋼のタグしかありません。（スタイルシートははるかに多いですが）それでも、あなたが中学英語で学んだ２０００語に比較したら微々たるものでしょう。 　Webオーサリングツール( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83%BC%E3%82%B5%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%84%E3%83%BC%E3%83%AB )はその手助けをしてくれる補助ツールにしか過ぎませんし、ブラウザはそれを表示するツールです。
No.1です。 出力の期待値をまちがえました。 test2.cssとなっていますが、test.cssの間違いです。 正しくは。 arScssConfig: { 　"test": { 　　src: 'sass/test.scss', 　　dest: 'style/test.css' 　}, 　"sass2/test": { 　　src: 'sass/sass2/test.scss', 　　dest: 'style/style2/test.css' 　} }
例えば、標準的な構成だとして・・ 文書構造が分かりやすいようにHTML5で書くと <body> 　<header> 　　<h1>見出し</h1> 　</deader> 　<section> 　　<h2>本文</h2> 　　<nav> 　　　<h3>目次</h3> 　　</nav> 　</section> 　<footer> 　　<h2>文書情報</h2> 　</footer> </body> [HTML4]などでしたら <body> 　<div class="header"> 　　<h1>見出し</h1> 　</div> 　<div clas=="section"> 　　<h2>本文</h2> 　　<div class="nav"> 　　　<h3>目次</h3> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> ですかね。 　navに最低限必要と思われる高さをsectionにmin-heightで設定しておいて、navをsectionを基準にabsoluteで配置するのが率直でしょう。
・見出しのアイコンの場合はマークアップは 　<h3>タイトル</h3>と言うマークアップになり画像はないように関係ありませんから、背景(background-image)か内容の追加content:url()になるでしょう。 ・画像の場合には画像がコンテンツですから、 　a)それが挿絵的な要素で、キャプションが入るなら 　　<div class="figure"> 　　　　<img src="" width="" height="" alt=""></p> 　　　　<div class="figcaption">The castle through the ages</div> 　　</div> 　b)アルバムなどの画像でしたら 　　<dl> 　　　<dt><img src="" width="" height="" alt=""></dt> 　　　<dd>画像の説明</dd> 　　とかになるでしょう。 <img src="画像.jpg"> <h3>タイトル</h3> 　だと、h3というブロック(ヘッディング)要素の前にブロック要素が存在しなければなりませんので、匿名ブロックが作られてしまい。<h3>要素と関連がなくなり、両者を関連付けたデザインが難しくなります。 div class="section"> 　　<h3>見出しの場合は、</h3> div.section h3{display:table-cell;height:100px;padding-left:100px;position:relative;background:url(./images/aa.png) no-repeat;vertical-align:middle;} または、 div.section h3{display:table-cell;height:100px;padding-left:100px;position:relative;vertical-align:middle;} div.section h3:before{content:url(./images/aa.png)} ＞見出しタグじゃない場面でも写真のキャプションで使いたいと思っています。 　　<div class="figure"> 　　　　<img src="abc.jpg" width="420" height="360" alt="山中湖から富士山"> 　　　　<div class="figcaption"> 　　　　　<p>山中湖から見た富士山</p> 　　　　</div> 　　</div> div.figure{display:table-row;} div.figure img,div.figure div.figcaption{display:table-cell;vertical-align:middle;}
ソフトバンクのどのサイトの事を言ってるのかわかりませんが、 「レスポンシブWebデザイン」と呼ばれる手法の事だと思います。 上記名称で検索すれば作り方はたくさん出てきますよ。 大まかにいうと、全体のcssに対して 幅ごとに指定したcssを上書きしていくようなやり方ですね。 アニメーションが欲しいならjsで。 jQueryなんかでいくつかライブラリがあると思います。 こちらも検索してみてください。 Wordpressなら、レスポンシブに対応したテーマが沢山公開されていますので それを落として使うのもいいかと思います。 ただレスポンシブで作られたサイトは、ソース一つで様々な端末に対応できるというメリットはありますが、 スマホで見た場合などに表示されていないパーツは読み込んだ後消しているだけですので PC用のソースコードや画像、js等もすべて読み込まれています。 スマホ専用サイトよりはかなり容量的に重くなるというデメリットもありますので注意してください。 あと、設計の時点から注意する必要があるので慣れてないと結構難しいです。
＞確認にはchromeでF12を押して出てくるウィンドウを使っていますが 　これはfirefox+firebugが圧倒的に有利です。 　firefoxは開発者向けツール( https://addons.mozilla.jp/firefox/extensions/developer_tools/ )を初めとしてアドオンが豊富なことですかね。 ＞これはまず基本的にDIV内にFORMを敷くということが誤りだということなのでしょうか？ 　そうです。formの内部に直接行内要素は置けません。formが登場した時点でその前後に匿名ボックスが出来てしまいます。 ＞ただ分からないまま書いて、その度lint 　lintの良いところは、理由と対策も示してくれる。それを読まなきゃダメです。芋づる式に色々な知識が見につきます。 　欠点は、文法上の誤りは指摘してくれるが、根本的なマークアップ自体はチェックしてくれない。例えば、 　<div><a href="/">トップ</a></div> 　<div><a href="/product">製品</a></div>　 　<div><a href="/manual">マニュアル</a></div> はエラーにならない。「これはナビゲーションですし、並列な情報が並んでいるので順不同リストでマークアップするほうがよい」・・・なんては言ってくれないです。 ＞その分時間もかかるのでなんとかしてこういう誤りの法則のようなもの、をあらかじめ分かるようになっておきたい 　もっとも早いのは、仕様書を徹底的に読んでおくこと。すくなくとも全体の流れとどこを調べればよいか位は・・・。急がば回れ、変な「付け焼刃」で積み上げていくより、根本を理解してからのほうが圧倒的に上達は早いです。 ＞DIVで並べる想定の箇所がOL/LIに変わっておりますが、inline-block化してDIVを並べることそのものに問題があるということでしょうか？ ★HTMLでこれが最も大事な--最重要なポイントなのです。 　1) 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) 　2)『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』 　DIVは、「文書の構造を補完するため」であって、「デザインのため」じゃありません。 　ところが、あなたが参考にされた多くのサイトのように実際には「デザインのため」に使用されている例がとても多い。理解されてこなかった!!。そのために 　3)『HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )』 　　そして、「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html#the-div-element )」(--著者は他により適切な要素がないときの最後の最後の手段としてDIV要素を使用することを強く推奨する。) 　　となります。 　よって ＞DIVで並べる想定の箇所が 　はHTMLを作成する上で最も犯してはならない誤りなのです。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　どのようにプレゼンテーションするかはスタイルシートに任せて、ここはナビゲーションリストだから、そのようにマークアップするべき。 　誤解されないように!!断じてきれいに横に並べるというデザインのために「<div>ではなく<li>を使っている」わけではありません。・・・結果はそうであっても・・・DIVでも可能です。 　デザインを考えずにとにかく徹底的に文書構造を示すようHTMLを記述するというのは、HTMLをワープロやDTP( http://ja.wikipedia.org/wiki/DTP )のひとつだと思って歩んでこられた方には、とてつもなく大きな壁だと思います。登山するのに道を誤って沢に下りてしまった---、元の道に戻るのは苦労します。 　しかし、私も含めて皆ここを乗り越えてきました。 　面白い例を紹介しておきましょう。Chrome以外のブラウザで!!（Chromeは代替スタイル扱えない） ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html ) 　このページを表示させてブラウザの[表示]→[スタイル(シート)]へ進み、色々なスタイルを選択してみてください。HTMLにプレゼンテーション的な要素はまったくないために、自在にデザインできるのです。印刷プレビューやウィンドウ幅を伸縮させたり、フォントサイズをCtrl + ＋/－で変更しても良いでしょう。 ★まず仕様書を通しで読んでみましょう。 　HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) 　CSS 2.1仕様（日本語訳）( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) （解説） １．たぶん折り返しをするような必要がないはずなのになぜdiv test5だけが一つ沈み込んでいるのか？ 　本来あるべきブロックがないために匿名ブロックが作られる。(HTMLの文法誤り) ２．div test1-5の間で横に奇妙な隙間がでてきている根本的な原因は？ 　ユーザエージェントは、語間スペースの出力処理に際しては、連続する空白類の入力があった場合は1つにまとめてしまう必要がある。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/text.html#h-9.1 ) 　改行やタブは空白文字ですから、ここに空白文字がひとつあるように整形される。 　よって、 　div.header div.nav{position:absolute;top:0;width:100%;font-size:0;}/* li間の空白文字を0 */ 　　このフォントサイズを2pxにすれば2px空く ３．cssのinline-block等の属性を変えずに隙間を詰めることはできるか？ 　　上記が回答
極々簡単な例を 両サイドの広告などは本文と関係ないのでasideでマークアップされていると思います。 ・HTML4.01/XHTML1.0/XHTML1.1でしたら 　<div class="aside"></div> 　「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )」 ・HTML5なら 　<aside></aside> 　「HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )」 よってaside(関係ない)でマークアップされている要素を両サイドに回せばよいだけです。 以下では、広告欄に160pxずつ確保したいとします。スマホのような狭いウィンドウから幅広まで対応してますが、スマホだけmediaquery使って下に回してもよい。 　HTMLには文書しか書いてないので好きなようにデザインできる。御随意に! 　⇒構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) ★前半HTML4.01,後半HTML5 + CSS2.1 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　で検証済み ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:100%;min-width:470px;max-width:1000px;margin:0 auto;padding:5px;} div.section{position:relative;min-height:400px;} div.section div.section,div.section h2,div.section p{width:auto;padding:0 170px;min-height:0;min-width:0;} div.section div.section p{padding:0;} div.section div.aside div{position:absolute;top:0;width:160px;left:0;height:100%;font-size:0.8em;} div.section div.aside div+div{right:0;left:auto;} body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.aside div{background-color:lime;} div.aside div div{background-color:fuchsia} div.footer{background-color:silver} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文</p> ＿＿<div class="section"> ＿＿＿<h3>詳細記事</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<div> ＿＿＿＿<h3>自サイト</h3> ＿＿＿</div> ＿＿＿<div> ＿＿＿＿<h3>他サイト</h3> ＿＿＿</div> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html> <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA1951"> <style media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} header,section,footer{width:100%;min-width:470px;max-width:1000px;margin:0 auto;padding:5px;} section{position:relative;min-height:400px;} section section,section h2,section p{width:auto;padding:0 170px;min-height:0;min-width:0;} section section p{padding:0;} section aside div{position:absolute;top:0;width:160px;left:0;height:100%;font-size:0.8em;} section aside div+div{right:0;left:auto;} body{background-color:gray;} header{background-color:aqua;} section{background-color:white;} aside div{background-color:lime;} aside div div{background-color:fuchsia} footer{background-color:silver} --> ＿</style> </head> <body> ＿<header> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</header> ＿<section> ＿＿<h2>見出し</h2> ＿＿<p>本文</p> ＿＿<section> ＿＿＿<h3>詳細記事</h3> ＿＿＿<p>記事</p> ＿＿</section> ＿＿<aside> ＿＿＿<div> ＿＿＿＿<h3>自サイト</h3> ＿＿＿</div> ＿＿＿<div> ＿＿＿＿<h3>他サイト</h3> ＿＿＿</div> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</footer> </body> </html>
positionにtopという値はありません。 　⇒Full property table - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/propidx.html ) 　　static | relative | absolute | fixed | inherit です。 詳しくは、 　⇒'position'( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visuren.html#propdef-position ) #test1 {} #test2 {} 　こんなCSS書いてたら、自分を含めて誰にも分からない。原因はもちろんHTMLにあるのですが・・ 　推測の域を出ませんが、ブロック要素になっている。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 整形 　　デフォルトでは、ブロックレベル要素は行内要素とは異なるように整形される。 一般に、ブロックレベル要素は新しい行を開始し、行内要素は新しい行を開始しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで 　7.5.3 ブロックレベル要素と行内要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.3 )より ＞（画像はヘッダー部分です。） 　でしたら、HTMLは <div class="header"> 　<h1>見出し</h1> 　<h2>見出し</h2> </div> 　のようになっているはずですね。 ・・『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』 　そしてスタイルシートは div.header{position:relative;} div.header h1,div.header h2{height:59px;line-height:59px;text-align:center;} div.header h1{margin:0 300px 0 0;width:440px;} div.header h2{position:absolute;top:0;right:0;width:300px;} /* 色づけ */ div.header h1{background-color:red;} div.header h2{background-color:aqua;} とかになります。 　これだと、 ・スタイルシート見ただけでHTMLの構造が分かるし、HTML見なくてもスタイルシート書ける。 ・HTMLには文書構造しか書いてないので、メンテナンスが楽 ・デザインは自由に変更できる。
デザインのためにHTML書かない!!--先でデザイン変えるとき困るし、何のために「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」かわからない。 <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　　<h2>サブ見出し</h2> 　　<div class="nav"> 　　　　<h3>ナビゲーション</h3> 　　</div> 　</div> とする。 html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:1000px;margin:0 auto;padding:5px;} div.header{min-height: 270px; background-image: URL(./images/background/sky.jpg); } div.header h1{ float:right; top: 20px; right: 20px; height: 60px; width: 550px; text-align:center; line-height:60px; position:relative; z-index:10; } div.header h1:before{ content:url(./images/background/white550_60.gif); position:absolute;top:0;left:0; opacity:0.5; z-index:-10 } div.header h2:after{content:"";clear:both;display:block;white-space:pre} div.header div.nav{background-color:yellow;} ・スマホや狭いディスプレイから幅広まで対応 ・ユーザーがフォントサイズを変更してもよい ・border-radiusと、background-color:rgba(255,255,255,0.5)のほうが本来の方法
スタイルシートに取り掛かる前に、HTMLを根本から学びなおす必要があります。 ・・・厳しいですが、そのほうがはるかに早く上達できます。・・・ a要素--行内要素--内にDIVは置けません!! ★今のページをAnother HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html )でチェックしたらよいです。 ★スタイルシートを使ってデザインする最大の目的は 　1) 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) 　　文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になる 　2) 豊富なプレゼンテーション 　　スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 ) 　上記のリンク先は必ずしっかり読んで理解すること ★DIVの使い方も含めHTMLの基本が出来ていません。 　デザインを目的にHTMLが書かれていますが、HTMLは文書構造をマークアップするものです。出生はSGMLです。 　『プレーンテキストのみを用いて、「タグ」を使うことによってデータに意味を持たせることが考えられた。( http://ja.wikipedia.org/wiki/SGML#.E8.83.8C.E6.99.AF )』 　<h1>は見出し)heading>、<p>は段落(Paragrph)、<li>はリストのアイテム(List Item) 　それで足りないときにDIVやSPANを使って 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』 　(ここが理解され難かったためHTML5では新しく構造を示す要素が追加されて、DIVやSPANは原則使わなくなります。) 　Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/2012/CR-html5-20121217/grouping-content.html#the-div-element ) 　適切な要素がないときの最後の最後の手段としてdivを使うことを強く推奨する。--とね 　また、スタイルシートのセレクタも基点となるセレクタを書かれていませんが、本来は書くべきです。 　と全般的に基礎が全く出来てない上にCSS3などを積み上げてらっしゃる。それでは崩れ落ちます。 　IE11は、他のウェブ標準ブラウザと同じでハックは必要ありません。もしIE11で崩れるならfirefoxやChromeでも崩れるはずです。 　標準モードで動作するようにDOCTYPEを記述し、HTML/CSSが正しければIE8以降のブラウザでは崩れはないはず。 　HTMLは文書構造しか書きませんから・・こんなシンプルなものでよい。 　class名などもデザインではなく文書構造を示すようにする。もちろん無駄なものは書かない。書く必要はない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/" title="トップページ">Home</a></li> ＿＿＿＿<li><a href="/about" title="当サイトについて">about</a></li> ＿＿＿＿<li><a href="/album" title="写真・画像置き場">Photo</a></li> ＿＿＿＿<li><a href="/twiter" title="ツイッター - Twitter -">Twitter</a></li> ＿＿＿＿<li><a href="/contact" title="お問い合わせ">Mail</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="form"> ＿＿＿<form action="./"> ＿＿＿＿<h2>サイト内検索</h2> ＿＿＿＿<p> ＿＿＿＿＿<input type="text" name="q" maxlength="200" value="%search_word"> ＿＿＿＿＿<input type="image" src="pngファイル(15px*14px)"> ＿＿＿＿</p> ＿＿＿</form> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
さらっとやるならjsが早そうですね。
【納期について】 初心者として考えるなら、ムリです。 ホームページ作成は、意外と色々なところを気にかけて作る為、 基礎的な知識がない中では、どこかで問題が発生して結構時間がかかります。 そういう体制(あなたがデザイナー兼コーダー)だとするならば、 結果的にほぼ全ての作業があなたに振られ、あなたが地獄を見るという 構図が成り立つと思います。 他のコーダーのお守り(実際のコード方法を教授したり)をするのも あなたとかになるわけですよね。 ここで言う納期が1つの目処としてという位置づけであり、かかる工数 を認識したいだけならばいいですが、絶対的な納期と考えるならば あと2, 3ヶ月くらいはプラスで考えた方がいいと思います。 勿論、簡単なデザインのページだけで構成されるなら期間は十分で、 そんなに人もいらないでしょうが、投入人数を考えると、それなりに 規模のあるサイトの構築のように見受けられます。 【コーディングについて】 デザインはGIMP、コードはEclipse(もし使うならPleiadesを使えばいい)など、 無償なものを選択すれば可能です。 が、そもそもそういったツールを事前に理解しているかになります。 初めて使うならば、当たり前ですがツール自体の学習コストもかかります。 WindowsXPもサポートが切れたわけですし、HTML自体は5でもいいでしょう。 但し、IE10以前あたりもサポートするつもりなら、HTML5の要素を全て 利用するわけにはいきませんし、いくつかのjs、cssライブラリを利用する必要が 出てくると思います。 (特にhtml5shiv.js、normalize.cssあたり) HTML4.01やXHTMLで作るにしても、normalize.cssはあるといいでしょう。 http://www.nemuchan.com/css3/ie01.html 社内用のサイトではないわけですから、様々なブラウザ事情を出来る限り サポートしてあげることになると思います。 と考えると、わざわざHTML5で作る必要もないわけです。 HTML5特有の利便性を活用したいページ(例えばドラッグ&ドロップでファイルを アップロードしたり)があるなら別ですが。 参考書は、見やすいやつ選べばいいでしょう。 例えばHTML+CSSの観点で、デザインテンプレートを紹介してる参考書もあれば 逆引き辞典のようなものもあります。 用途を考えて直に中身を確認し、何冊か選択すればいいと思います。 【CMSについて】 HTMLだけで構成する(動的に情報が変化するページはない)、モバイルサイトを 対応しない、記事管理(ブログやWhat's Newみたいな)を行わないなどの決まりきった サイトを構築するならCMSを利用する必要はありません。 それらの機能を必要だとするならばWordpressベースでもいいかもしれません。 が、Wordpressを触ったことがないならば、当然それについても学習コストがかかります。 併せてWordpressをカスタマイズする参考書なども求めた方が良いでしょう。 【コンテンツについて】 ・Webサーバ(Apache、nginxなど)の導入・設定方法 　Wordpressを利用するなら、パーマリンクの設定に併せてhtaccessの制御方法 ・PHP/Perlなどのプログラム言語の導入・設定方法 　※WordpressはPHPです。 ・MySQL/PostgreSQLなどのRBDMSの導入・設定方法 　※WordpressはMySQLです。 ・ページの表示、処理の制御を行うにあたってのセキュリティ対策の知識 　⇒脆弱性の種類、原因、具体的な対応策 ・VPSや自社サーバで稼働するなら、サーバ自体のセキュリティ対策の知識 　⇒SELinux、Webサーバ、DNSサーバ、パーミッションなど色々 プログラミングも必要になるなら、何もかもやるなんてムリですので、あなたはデザインだけやるとか、 それなりの分業は必要でしょうね。 XAMPPを利用してローカル環境に開発環境を構築すること自体は否定しませんが、実際にアップする 本番サーバの環境との環境差異も出ますし、本番サーバではそんな簡単に済まないと思います。 （特に専用・VPSサーバや自社サーバなどで構築する場合） 本番を見据えて、どのように本番サーバに構築・適用するかも考える必要があります。 デザインもプログラミングも初心者という次元で何かを成しえようとするならば、 それこそ調査する範囲などを切り分けてやらないと、みんなしてつまづくだけでしょう。 デザインを構成する難しさ、プログラムを構成する難しさを、指揮する人が理解して 切り分けて考えられるようでなければなりません。 一人ひとりが、それぞれ1つの物事にそれなりに精通する状態になってくれないと スムーズな進行はないと思います。 もしくは、知識不足なせいでスムーズに進行させてしまっている。 それもあって、開発工数以前に、学習する期間が必要だと考えます。 (1～10まで全部教えられる人が一人でもいるなら別ですが)
CSSの括弧が全角になってますねー
No.2です。 えらく冗長だと思ったら重複してますね。 <style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;background-color:white;} div.header{position:relative;} div.header div.nav{width:100px;position:absolute;top:100%;left:0;} body>div.section h2, body>div.section>p,body>div.section>div.section{ margin-left:100px; width:auto;min-width:0; } div.header div.nav ol,div.header div.nav ol li{margin:0;padding:0;list-style:none;} div.header div.nav ol li{width:100px;height:40px;position:relative;overflow:hidden;} div.header div.nav ol li a{display:block;width:100%;height:100%;text-indent:-100px;} div.header div.nav ol li a:after{display:block;position:absolute;left:100px;top:0;opacity:1;} div.header div.nav ol li a:hover:after{opacity:0;} /* 時間的変化 */ div.header div.nav ol li a:hover:after{ -moz-transition-property: opacity; -webkit-transition-property: opacity; -o-transition-property: opacity; -ms-transition-property: opacity; -moz-transition-duration:1s; -webkit-transition-duration:1s; -o-transition-duration:1s; -ms-transition-duration:1s; -moz-transition-timing-function:ease-in-out; -webkit-transition-timing-function:ease-in-out; -o-transition-timing-function:ease-in-out; -ms-transition-timing-function:ease-in-out; } /* ここまで */ div.header div.nav ol li a[href="/"]{background-image:url(./images/navi/home2.gif);} div.header div.nav ol li a[href="/"]:after{content:url(./images/navi/home.gif);} div.header div.nav ol li a[href="/books"]{background-image:url(./images/navi/books2.gif);} div.header div.nav ol li a[href="/books"]:after{content:url(./images/navi/books.gif);} div.header div.nav ol li a[href="/profile"]{background-image:url(./images/navi/profile2.gif);} div.header div.nav ol li a[href="/profile"]:after{content:url(./images/navi/profile.gif);} --> </style> 　まあ、デザインのためにHTMLは書かないようにしましょう。その意味でTABLEは禁止!! 　先でナビゲーションを横に並べようとしたり、増えたりするたびにHTMLやスタイルシートを書き直すなんて羽目になります。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html ) で、ブラウザの表示メニュー→スタイル(シート)と進んで、スタイルを色々と変えたり印刷プレビュー見たりしてみましょう。HTMLにはデザイン的要素は全くないので、どのようにもデザインできますね。 　それをしないことには、始まりません。
CSS3のcolumnsプロパティを使う。 [例]HTML5 + CSS3 ベンダーフィックスつき ★タブは＿に置換してあるので戻す。 ★対応ブラウザが少ないので時期尚早でしょう。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:gray;} header,section,footer{ width:800px; margin:0 auto; padding:5px; background-color:silver; } section section{ width:90%;background-color:white; columns:220px auto; -moz-columns: 220px auto; -webkit-columns: 220px auto; -o-columns: 220px auto; -ms-columns: 220px auto; } section section p{ text-indent:1em; margin:0;line-height:1.8em;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">段組</h1> ＿</header> ＿<section> ＿＿<h2>段組の簡単な例</h2> ＿＿<section> ＿＿＿<p> ＿＿＿＿CSS。横並びBOXに長文textを流し込む方法はありますか？ ＿＿＿</p> ＿＿＿<p> ＿＿＿＿CSSについてです。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿高さ固定の横並び３連BOXに長文テキストを流し込む場合。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿ブロック要素で区切るでもなく、センテンスの終わりでもない箇所で、複数のBOXにまたがるCSSになります。。。。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿レイアウトのBOXサイズは固定だが、 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿テキストは文章の途中で隣のBOXへ移り、文字サイズの変更 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿（ブラウザやOSの違い）で隣のBOXへ移る位置も変わる。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿これを実現させたいのですが、、、。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿まぁ紙媒体においての、１ページ３段組みレイアウトの流し込みをHTMLで可能なのか？という質問になります。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿文書作成ツールやデザインアプリでは当たり前な方法ですが。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿CSSでも可能なんでしょうか？ ＿＿＿</p> ＿＿</section> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
意味不明の文字が // ボックス上に影をつける スタイルシートのコメントは /* ボックス上に影をつける */ です。これは<head></head>内でも同じです。たまたま無視されただけ 　外部で無視されなかったのは、文字コードの問題 必ず最初に @charset "Shift_JIS"; html,body{margin:0;padding:0;} p{text-indent:1em;} と文字コードを指定する。念のため <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/standard.css" charset="Shift_JIS"> ・・特にHTMLとCSSの文字コードが異なる場合は入れておくと良い。 CSSに間違いが沢山あります。 <div class="nav"> 　<ul> 　　<li><a href="#">メニュー項目</a></li> 　　<li><a href="#">メニュー項目</a></li> 　　<li><a href="#">メニュー項目</a></li> 　　<li><a href="#">メニュー項目</a></li> 　　<li><a href="#">メニュー項目</a></li> 　</ul> </div> ※HTML4.01には文書構造を示すタグが用意されていませんので、DIVを使用して文書構造を示します。 　HTML5では、文書構造を示すタグが用意されているので、<div class="nav"></div>は<nav></nav>となります。ナビゲーションは複数登場する可能性があるのでclassのほうが良いでしょう。 わかりやすいように全角スペースでインデントさせています。タブに戻すこと div.nav ul,div.nav ul li{ 　　margin:0;pading:0; } div.nav ul{ 　　list-style:none; 　　width:100%; 　　height:45px;line-height:45px; 　　background: orange; 　　text-align:center; 　　position:fixed; 　　bottom:2px;left:0; 　　box-shadow: 0px -3px 15px rgba(0,0,0,0.4);/*ボックス上に影をつける*/ 　　font-size:2px;/* li間のスペース */ } div.nav ol li{ 　　width: 20%; 　　display:inline-block; } div.nav ol li a:link { 　　display:block; 　　width: 100%; 　　color: white; 　　font-size: 14px; 　　font-weight: bold; 　　text-decoration: none; } div.nav ol li a:hover{ 　　background: #ffa443; } ※ border-spacing:,border-collapse:はtable-cell用のプロパティです。 ※ CSS2以降は基点となるセレクタを書くことになりました。 　『5.2 セレクタの構文( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html#selector-syntax )』
スタイルシートはCSSだけじゃない!!! XHTMLだと、XSLT使うかもしれませんし・・ 　HTML5では、scriptはjavascript、スタイルシートはCSSがデフォルトとなりましたから、不要です。 HTML4.01(XHTML1.0,XHTML1.1)以前は必須です。 <meta http-equiv="Content-Script-Type" content="text/javascript"> <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css"> <script type="text/javascript"> はセットで必要です。 なぜ仕様書は目を通さないのですか？？ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 14.2.3 ヘッダスタイル情報: STYLE要素 　type = content-type [CI] 　この属性は、当該要素内容のスタイルシート言語を指定し、デフォルトスタイルシート言語を上書きする。 スタイルシート言語は、例えば「text/css」のように、MIMEタイプで指定する。 　この属性にデフォルト値はなく、著者が指定しなければならない。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#edef-STYLE )］より 　疑問があったら、まず仕様書を確認する。 HTML 4.01 仕様書(邦訳)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) 　→要素索引 　　→STYLE 　　と進めば出てきます。 ※仕様書だと正確で正しい情報が手に入りますし、付随した多くの知識も手に入ります。 　一度通して読まれることをお勧めします。このような時、どこを見ればよいかがすぐ分かる。 ※その上でわからないことを聞かれると効率的です。 　また、 Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　(右上のDATAでソースをチェックできる)でも、指摘されるはずです。 　製作されているなら開発者向けツール( https://addons.mozilla.jp/firefox/extensions/developer_tools/ )の豊富なfirefoxお使いだと思いますが、 Html Validator( https://addons.mozilla.jp/firefox/details/249 )や Firebug( https://addons.mozilla.jp/firefox/details/1843 )でもわかるはずです。
＞CSSとhtml記述を提供頂けますと幸いでございます。 　HTML(大文字)は、プレゼンテーションのために書くわけではないので関係ないでしょう。 　⇒CSS記載ルールで参考になるもの( http://oshiete.goo.ne.jp/qa/8582303.html ) 　の回答も参照 footerなんて、HTML4.01でしたら・・ ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿＿<dl class="documentHistry"> ＿＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿＿<dd>2013-03-03</dd> ＿＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿＿<dd>2013-03-03 12:00:00 (JST)</dd> ＿＿＿</dl> ＿＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿</div> ＿</body> </html> HTML5でしたら ＿＿<footer> ＿＿＿<h2>文書情報</h2> ＿＿＿<dl class="documentHistry"> ＿＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿＿<dd>2013-03-03</dd> ＿＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿＿<dd>2013-03-03 12:00:00 (JST)</dd> ＿＿＿</dl> ＿＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿</footer> ＿</body> </html> とかぐらいしかない。 footer address{ margin:0; padding:5px 0; background-color:silver; } [HTML5用] div.footer address{ margin:0; padding:5px 0; background-color:silver; }
SMACSSは本流から外れた手法なので参考にはならないでしょう。 　そもそもスタイルシートを導入する最大の目的は ★構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) 　です。短い文章ですからよく読んで理解しておくこと。 　言っている事は、プレゼンテーションのためにHTMLは書かない。文書構造だけを記述する。スタイルシートはプレゼンテーションをになうので、HTMLの文書構造に基づいて指定していく。 例えば、下記のようなスタイルシートだといかがでしょう。 div.nav ol,div.nav ol li{ 　　list-style:none; 　　margin:0; padding:0; 　　line-height:2em;height:2em; 　　text-align:center; 　　position:relative; } div.nav ol li{ 　　display:block; 　　width:100%; 　　height:100%; 　　text-decoration:none; } div.header div.nav{ 　　width:100%;position:relative; } div.header div.nav ol li{ 　　display:inline-block; 　　width:20%; } div.section{ 　　position:relative; } div.section div.nav{ 　　position:absolute; 　　right:0; 　　width:160px; height:100%; } 　たぶん、誰が見てもなにをしようとしているかがわかるはずです。 ＞HTML5,CSS3についてちょっとずつ理解を深めてきた段階です。 　失礼ですが、それでしたらこのような質問は出ないと思います。 　HTML4.01で 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』とされました。プレゼンテーションのためにとは書いてない!! 　しかしあなただけでなく、巷ではこれが理解されずにプレゼンテーションのためにDIV,SPAN,id,classが使われてきました。その典型がSMACSSと言っても過言ではないでしょう。 　その反省から、HTML5では、『文書をよりよく構造化するために、新しい要素が追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )』 　【問題2】文書内に埋め込まれた「意味」が不明確( http://www.atmarkit.co.jp/ait/articles/1008/30/news106_2.html ) 　↑このページの上から1/4あたり 　すなわち、上記スタイルシートは nav ol,nav ol li{ ・・・・・ } nav ol li{ ・・・・・ } header nav{ ・・・・・ } header nav ol li{ ・・・・・ } section{ ・・・・・ } section nav{ ・・・・・ } となるはずです。 　私はHTMLは開かなくてもスタイルシートを書けます。書けるようにHTMLを作成しているといったほうが良いでしょう。 　このスタイルシートを見るだけで、あなたにも適用されるHTMLの文書構造は手に取る様に分かると思います。 　結果『広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )』です。 　印刷用スタイルシート、スマホなど小さなscreenメディア、点字端末や携帯電話用のメディア別スタイルシートが必要になってもHTMLに手を加える必要もありません。 ＞CSSの構造の参考となる記事や、参考ファイル、参考文献などがありましたら 教えていただけると幸いです。 1)まず、HTML4.01の仕様書を完璧にマスターしましょう。 　HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) 2)その際に、HTML4.01の反省を盛り込んだ 　HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff )を目を通しておくと良いでしょう。 　【すこし古いです。最新版はDifferences from HTML4( http://www.w3.org/TR/html5-diff/ )】 3)その上で、CSS2.1をマスターしましょう。 　Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) 　特に、 　5 セレクタ 　6 プロパティ値とカスケーディング、継承の割り当て 　は、完全に理解すべきです。 　そのうえで、HTML5,CSS3を身につければよいです。 [実例] ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html ) 　ブラウザの[表示]メニュー→[スタイルシート]→で様々なスタイルシートを選択してみる。　--Chromeは代替スタイルシート機能はありません。 　印刷プレビューで印刷時の状況を確認 　画面の幅を変えてみる。
＞クライアントから送られてくる原稿に一貫性がなく、 ＞ある事業所のページではリストがひとつで見出しがあり、文字数が膨大なのに ＞違う事業所ではリストが複数、見出しがなく、文字数が少なくサムネール画像が必要とか 　全く異なるクライアントではなく、ひとつのクライアントで部署が複数あるという場面について説明します。 　重要な事は、ひとつのクライアントサイトの場合、そのサイトのデザインや文書構造が変わるとユーザーから見た時に統一感がなく、使い勝手が極めて悪くなるからです。 　その場合は、Wikiのようなシステムがサイト構成では最も楽です。タグの代わりとなるタグ、または目印をしようする。あるいはXMLでデータを受け取ります。 　それが導入できない場合は、あらかじめフォーマット（雛形）を決めておきます。各部署から典型的な文書をいくつか提示を受けて、共通な構成で雛形を作っておきます。私の経験からは概ね ・インデックス(索引)ページ 　　部署のトップ、カテゴリーのトップなどの目次・表紙となるページ ・内容の詳細ページ ・会社情報や部署情報、連絡先等 　程度になるでしょう。 　そのうえで、 body 　|-- header/ 　|　　　|-- navigation/　★SSIを使用するので内容は不要 　|-- section/ 　|　　　|-- heading 　|　　　|-- section/　<!-- indexページだとここはnav --> 　|　　　|　　　|-- heading 　|　　　|　　　|-- 本文 　|　　　|　　　|-- artice/ 　|　　　|　　　|　　　|-- header/ 　|　　　|　　　|　　　|-- section/ 　|　　　|　　　|　　　|-- footer/ 　|　　　|　　　|-- aside/ 　|　　　|-- section 　|　　　|-- (略) 　|　　　|-- contentTable/ 　|　　　|-- aside/ 　|-- footer/ 　　　↑ これらはclass名　もしくはHTML5だと要素名 　このように提出された文書を元に雛形を作成して、それに基づいて原稿を提出してもらいます。別の要素が必要と言う場合は都度すりあわせが必要になります。 　これが苦手な、出来ない部署に関してはXMLでの提示をお願いします。 <ヘッダ> 　<見出し></見出し> </ヘッダ> <本文> 　<見出し></見出し> 　<説明文> 　　<段落></段落> 　</説明文> 　<項> 　　<見出し></見出し> とね。 　事前の打ち合わせ、それができない場合は、全く素のテキストデータを貰ったほうが速いです。
長くなるから、参考ページ参照。
＞今はまだ、HTMLに書くべき画像とそうでない画像の区別が少し曖昧ですが、 　デザイン畑から入られると、ここが一番慣れない部分でしょうね。 ・その文書のコンテンツとして必要なものなのか 　　商品写真とか、旅行記・図鑑・アルバムなどの場合はコンテンツそのものですから ・将来、変更する可能性があるか 　　背景(ページや各要素の) 　　リンクボタン 　　見出し要素(h1～h6) 　　　これらは、ページのデザインを変更する時にHTMLに書いていたら全部のHTML書き直さなければならなくなります。 　基本的には「画像自体がコンテンツの主要な要素でない場合、すべてCSSで指定する。」で良いと思います。 　企業サイトで「イメージカラーやロゴの変更でサイト全体のロゴや背景、ボタンを変更する」なんて時にスタイルシートだけ書き換えれば済むのですからね。 　HTMLもシンプルになるため、変更や追加がとっても楽になります。後任の誰が見ても、どこに何が書かれているか一目瞭然。(もちろん検索エンジンも) 　それができると、極端な話--HTMLを一切見なくてもスタイルシートを記述できるようになります。 [例] html,body{margin:0;padding:0} div.header,div.section,div.footer{ 　width:100%;min-width:630px;max-width:1000px; 　margin:0 auto;padding:5px; } div.header div.nav ol, div.header div.nav ol li{ 　　margin:0;padding:0; 　　line-height:2em; 　　text-align:center; 　　position:relative; } div.header div.nav ol li{ 　　display:inline:block; 　　width:20%; } と書いていける。あなたが見てもHTMLの構造もCSSで何をしているかが分かるはず。 ・タイプセレクタなど広いものか順に詳しく記述していくだけで随分とわかりやすくなるでしょう。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 2.4.1 構造とプレゼンテーションの分離 　・・・【中略】・・・ 　また、文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )］より 　頑張ってください。数ヶ月で基本的な事は身につけられますよ。後は繰り返すだけです。No.1の説明が今は理解できるようになってることでしょう。 HTML5では、mainは、ちょっと特殊な意味を持ちます。使用は避けたほうがよいかも ・4.4 Grouping content — HTML5( http://www.w3.org/TR/html5/grouping-content.html#the-main-element )
TDの書き出し部分が閉じられていないからとかどうでしょう？ 　 <TD <p id="slideshow" valign="middle" width="800" height="250"> ↓ <TD><p id="slideshow" valign="middle" width="800" height="250"> 　 あと、pタグ内の余分なものはcssに移した方が検証しやすいかもです。 valignとかwidthとかheightとか。
>質問１ >スマホ用に作り変えることは、重要なのでしょうか？ 誰に見てもらいたいかでしょうね。スマホを使う人はそもそも対象外のサービスなら対応不要でしょう。スマホの人にも利用してもらいたいのなら、対応したほうがより多くの人に利用してもらえるでしょう。 >質問２ >そもそも、スマホ用っていっても、URLは同じですから >作り変えることに無理があるのでしょうか？ 現代では「レスポンシブWebデザイン」が流行っています。「レスポンシブWebデザイン」とはWebデザインの手法の一つで、単一のページで画面サイズによって表示を変える手法です。 昔はUAによってリダイレクトしたりスタイルシートを切り替えたりしていましたが、UAは偽装される事も多いですし、PC用でも画面が小さいものと大きいもので見易さが異なりますので、十分な効果が発揮できないことがありました。 以下のサイトにレスポンシブWebデザインで作られたサイトのリンク集があります。そのサイト自体もレスポンシブWebデザインで作られています。PCで表示して、画面サイズを変更すると意味がよくわかると思います。特に画面幅を狭くすると、メニューのリンクがスマホ・タブレットっぽいアイコンに変わるサイトが多いのですが、なかなかいいと思います。多少の知識と技術が必要ですが、時代の流れに取り残されないために対応した方がいいと思います。 レスポンシブWebデザイン http://responsive-jp.com/
No.2です。結論だけ言うとCSSの最後に #res ul li div.entryinfo blockquote {max-width: 100%;} とだけ加えればよい。
http://rubentd.com/gifplayer/ この辺を使ってみてはどう？
＞PC用ならば72dpiとする所だとおもいますが、 　標準は96dpiですけど・・・CSS2.1で、このあたりの曖昧さをなくすために 『基準画素は、腕の長さのデバイスからの距離と96dpiのピクセル密度におけるデバイス上の1ピクセルとの視角である。( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/syndata.html#length-units )』 　そもそも、スマホに限らずmedia=screenのサイズは様々ですから、サイズを固定する事はしません。 ＞スマホ向け横幅いっぱいのランディングページを製作中です。 　わざわざスマホ用と言うことも通常はしません。今後、大画面のスマホも普及していくでしょうし。 　単純にbackground-siaze:coverあたりでよいのでは？？ 　media-queryを使って背景画像を変えることまではしなくて良いでしょう。 　横幅1000px程度の背景画像を用意して section{width:80%;min-width:630px;max-width:1000px;margin:0 auto;} section nav{background-image:url();background-size:cover;}
もしかして、RGBのソースに別のAのみを合成して ブラウザ内で、RGBAのソースを作り出す？ことは可能か？ という意味でしょうか？ 知っている限りCSSのみでは難しいと思います。 HTML5では、可能でしたが。 CANVASを使ったつくり方では、可能なので、 一度チャレンジしてもいいかもしれませんが。 一応質問がCSSのみで出来るか？ なので、現状、出来ないと思います。 で、とめておきます。
＞全体的にはリンクの文字を青色に指定していて、 が、a{color:blue;}だとしたら、 ＞p a{color:gray;} だと、詳細度は前者が[0,0,0,1]、後者が[0,0,0,2]ですから、後者が優先されるはずです。 しかし、 a:link{color:red;} と指定されていれば、詳細度は[0,0,1,2]ですから上書きは出来ません。 リンクの擬似クラス a:link a:visited 動的な擬似クラス a:hover a:focus a:active はいずれも、属性セレクタ、クラスセレクタと同様詳細度は[0,0,1,0]となります。 このセレクタ、カスケーディング、詳細度はCSS（カスケーディングスタイルシート）の命ともいえる重要な部分です。これを使えないとスタイルシートなんて扱えません。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html )
スクロールの処理をどうするかというのが問題なんですが、 footerをposition:fixedとして表示させるのではなく、 スクロールが必要な高さになる場合はposition:staticのように表示させたい場合は、多くの場合JavaScriptを併用すると思います。 sectionのところを以下の様に変更してみました。 Safari7、IE11で確認。 この書き方は、たしかIE8以下かIE9以下で対応してなかったと思います。（bottomが無視されて、height:autoとして描画されると思います。） footerの bottom:-25px はドキュメントの下にめり込むというか、スクロールさせるのは意図した物なんでしょうか？ sectionの bottom はfooterの表示位置に合わせてください。 section { background: green; /*float: left; 削除*/ width: 70%; /*min-height: 100%; 削除*/ /** <----- なぜか下まで行かない **/ padding: 60px 0; /* 追加 */ position:absolute; top:30px; bottom:175px; left:20%; overflow: auto; /* スクロール用 */ z-index:1;/*ウインドウ高さが約400px以下の場合にメインセクションを優先表示*/ } <section> <p style="height:100px;">section first</p> <p style="height:100px;">section</p> ....繰り返し <p style="height:100px;">section</p> <p style="height:100px;">section last</p></section>
方法は色々あるのですが、恐らくその知識では難しいのではないかと思います。 実際の記述方法は他の方に任せて概要を書きますが、固定ページの記入欄に何を書いてもそのようにはなりませんので、どうやっても使用テンプレートの<head></head>内をいじる事になります。 ただ記述を変更するだけではなく、その記述を使用するページと使用しないページが発生する事になるので、最低限wordpressのテンプレートを複製してから記述を変更し、振り分けを行う作業が必要になります。 レスポンシブ用のテンプレートとは別に、レスポンシブ非対応ページ用のテンプレートを用意するような感じですね。 （もしくは、特定のurlだけ記述を変える様な方法。こっちの方が難しい。） これはhtmlやphpの知識があるだけでなく、Wordpressのテーマ作成や改造にもある程度慣れた方でないと難しいと思います。 ですので、そういったことは諦めて思いっきり力技で行う事をお勧めします。 というのは、単純にテーブルだけを記述したhtmlをサーバーにアップし、 元のページ内には「表を見る」というようなリンクを貼るという方法です。 特に何の指定もしなければ、そのhtmlはレスポンシブにはなりませんのでテーブルを何とか作れば一応はPCと同じ表示で見れることになります。
.only に display: none; を入れれば消えませんか。
No.3です。 ＞CSS2.1なら参考書で勉強できたりできるものでしょうか？ 　CSSに限らず、仕様書が今のあなたには最適だと思います。 　CSS(カスケーディング・スタイル・シート)の最も重要なカスケーディング(セレクタや詳細度を含む)の説明がきちんと書いてある参考書なんて見たことないです。一番大事なことなのに・・ 　なぜかって(^^)、仕様書見ればわかることだから--かな。 　ごく簡単なCSS2.1のサンプルを、"そら"で下記に書いてみます。上から順に読んで書かれていることを解釈してみてください。 div.header div.nav ol,div.header div.nav ol li{ list-style:none; margin:0;padding:0; text-align:center; line-height:30px; } div.header div.nav ol{ display:block; width:100%; } div.header div.nav ol li{ display:inline-block; width:20%; position:relative; } div.header div.nav ol li a{ display:block; width:100%;height:100%; text-decoration:none; } div.header div.nav ol li a[href="/"]{ text-align:left;text-indent:-100em; overflow:hidden; background-image:url(./images/logo/GoTop.gif); } ・・・HTMLをまったく見なくても、CSSをこのように書いていきますが、当事者でないあなたが見ても、なにをしているかわかるはずです。当然HTMLもどう書かれているかが分かるはず。 　スタイルシートを記述する前提としてまずHTMLがきちんと書かれているが必要なことがこれだけでわかると思います。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』・・・とっても重要!! 　たったこれだけのことすら理解していないから、HTML5では「新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )」が追加されました。(そしてDIVは原則使わないことになった) 　このスタイルを適用するHTML4.01は、「文書に構造を付加するため」にDIVが使われている。 ・HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) ・Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) 　を読んで、何がどこに書かれているかがすぐに出せるくらいになりましょう。
どのブラウザでも、ページ内を左クリックして表示されるメニューに「ソースを表示」といった項目があるので、そのメニューを選択すると見られます。
Contact Form 7に確認画面を簡単に付けられるプラグインです。
初心者が、WEBFrameworkを使う場合、グリッドレイアウトを選ぶか？ フロートを用いたレイアウトを選ぶか？・・・ どちらかの方法を選ぶと思いますが、簡単なのは、グリッドレイアウトだと思います。 基本的には、１ソースですべてのデバイスに対応するため、MediaQueryを、使用します。 おすすめなのは、skelton（16分割）・Fandation（12分割）などですが考え方は同じです。 機能は、Fandationの方が多いです。Add_inが多いことも特徴！ 画像はできるだけ使わず、web_fontを利用するのが最近の手法です。 記述は、文章構造とデザインの分離（html+CSS)+データの分離（databaseの利用)、操作を、Javascript/PHPなどで記述する。 デザインよりも文章構造のしっかりしたページを作り、その後、デザインを取り入れる方法をとられた方が、正しい記述の習慣がつくでしょう。
table なんていらん。 --------------- HTML --------------- <ul> <li>ABC</li> <li>DEF</li> <li>GHI</li> <li>JKL</li> <li>MNO</li> </ul> <ul> <li>PQR</li> <li>STU</li> <li>VWX</li> <li>YZA</li> </ul> --------------- CSS --------------- ul { display:inline-block; vertical-align:top; }
LinuxベースでＨＴＭＬを編集しているという認識でいいのでしょうか？・・・ CSSは、カスケード捨ているシートを置いておくホルダー JSは、Javascriptを置いておくホルダー configは、初期設定ファイルではないでしょうか？・・・ WEBの基礎を先に学ばれた方がいいとおもいますが？・・・
　formのユーザーインターフェースに関わる物は基本的にスタイルシートで変更はできません。出来たとしても弄るべきではありません。 　サイトごとに、ユーザーインターフェースが異なると困るからです。 　ただ、標準モードだと下記の通り・・ p.form{line-height:60px;} p.form select,p.form select option{display:block;height:60px;} <form action="./"> 　<p>本文項記事</p> 　<p class="form"> 　　<select name="test"> 　　　<option value='1'>要素1</option> 　　　<option value='2'>要素2</option> 　　　<option value='3'>要素3</option> 　　　<option value='4'>要素4</option> 　　</select> 　</p> </form> ★ＵＩに関わる部分---例えばカソールとか---は弄らないは原則です。 　すべてのユーザーがfirefoxやIE,Chrome使っているわけじゃない。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より
No.1です。とりあえず、HTMLの文書構造が間違っている--特に閉じ忘れのタグがないかは注意してください。firefoxのツール→DOMインスペクターで解析されている樹構造を確認。 　★その上で、カスケーディングを見直す。--CSSカスケーディングスタイルシート--- 　★後出しじゃんけんとは全く異なります。 　まず、出所・重要度でソートされます。 　1) ユーザー指定の最重要宣言＞著者の最重要宣言＞著者の指定＞ユーザーの指定＞ブラウザの指定 ついで 　2) 詳細度でのソート 　　　style属性(1000),一意セレクタ(0100),属性セレクタ(0010),要素セレクタ(0001),全称セレクタ、属性での指定(0000) 最後に 　3) 出現順位 　⇒6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html ) 　firebugで確認されると、どのスタイルが適用されているか事細かにわかります。
Ｓｃｒｉｐｔは、javascriptとＭｉｃｒｏｓｏｆｔ系のVBscriptなどに分けられる、ユーザーのパソコン内で実行されるプログラムのようなものです。JAVAとは根本的に違いますので注意が必要です。 また、ブラウザの設定で、スクリプトを実行しないと設定されていれば、動作しません！ パワーユーザーであれば、当然ですがこのような設定にしています。 それに対し、サーバーサイドプログラムは、サーバー上のパソコンでプログラムが実行されるため、どの環境においても動作します。 この辺からマスターする必要があるかも？・・・ スクリプトはいろいろなものが公開されているので、たとえば、スライダーを使いたいのであれば下記に紹介する Ｆｌｅｘｓｌｉｄｅｒ２などを利用すると、簡単に構築できるでしょう。
基本的にはfloatで並べてしまうのが最も簡便で適切だと思います。 　⇒DMM.com [アクション] 単品DVDレンタル( http://www.dmm.com/rental/ppr/-/list/=/article=keyword/id=71002/ ) 　こんな感じで・・ 　そもそもHTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より 　なのですからね。 ＞表示切り替えボタンがついているのですが、 　そうではなく、mediaqueryを使用して、ウィンドウ幅によってスタイルシートを変えるほうが良いです。 <link rel="stylesheet" media="screen href="standard.css"> <link rel="stylesheet" media="screen and (max-width: 640px)" href="mobile.css">
改行記入可能です。
とっても酷いサイトなのであまり参考にはならないと思いますが・・(^^) 　⇒Another HTML Lint( http://www.htmllint.net/html-lint/htmllint.cgi ) Lynxで見ると内容はほとんど空っぽ・・ 　『Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。( https://support.google.com/webmasters/answer/35769?hl=ja#2 )』 ・とってもうざくって、ニ度と訪れようと思わない。 　例えばページ内リンク( http://yuki930.v-colors.com/#twitterFeed )でターゲットが隠れる。 　仕方ないので、ブラウザの表示メニューから[スタイルシートなし]にして利用せざるを得ない。 ・とにかく煩雑、DIVをデザインのために多用しているため、まるでDIVスープ 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』ためのもので、デザインのために使用するのは間違い。 ・印刷されたらわかる(^^) ＞上下の画像を画面に固定するには、 ★仕組み自体はposition:fixedでウィンドウの上下に配置しているだけです。 　下は兎も角、上部にfixedさせると、「リンクターゲットが隠れる」という致命的欠点がある。また、表示範囲が小さくなるという欠点があります。表示面積の小さいスマホなどで閲覧するとき困ります。 　ウェブサイトを作られているなら、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/developer_tools/ )の豊富なfirefoxを御利用だと思いますが、そのアドオンの Firebug( https://addons.mozilla.jp/firefox/details/1843 )を使用すれば、簡単にわかります。 　ただ、このようなサイトは初心者は参考にすべきではありません。ウェブやHTMLの根本から大きく外れています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。・・・【中略】・・・もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より 　ちゃんと記述すれば、HTMLはその数分の一ですむ内容です。---そのページのソースを見て、何が書かれているか分からないと思います。--もちろん検索エンジンにもわからない---。内容を修正するとなると大変でしょうね。 　あなたが多く利用されているサイトは、デザインじゃなく内容だと思います。 　対照的なページを紹介しておきます。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html#MAIN ) 　(chromeを除く)ブラウザの表示メニューからスタイルを選択するとデザインが変更できます。---HTMLに文書構造しか書かれていないからどのようにもデザインできるということ。 　ソースはシンプルですし、Another HTML Lint もパスするし、印刷しても良いし、ディスプレイ幅に依存しないし、スタイルが利用できない端末でも利用できる。もちろん視覚障害者がスクリーンリーダーで利用もできる。 [例] div.header,div.footer{position:fixed;height:80px;width:100%;} div.header{top:0px;background-image:url(./images/background/topCloud.gif);z-index:100;} div.footer{bottom:0px;background-image:url(./images/background/topCloud.gif);} 次で簡単なサンプル提示します。
「newアイコン」に限定するのであれば、 このように書けば、文書構造、文法ともに適した書き方になると思います。 <style> .new { overflow: auto; } .new h3 { float: left; } .new img { width: 30px; height: 20px; } </style> <div class="new"> <h3>テキストテキスト</h3> <p><img src="" alt="この記事は何年何月以降に書かれた新着記事です。"></p> </div> alt属性を嫌うのであれば、イメージリプレースを使う事もできます。 <style> .new { overflow: auto; } .new h3 { float: left; } .new p { width: 30px; padding: 20px 0 0 0; height: 0; background: url(new.gif); overflow: hidden; } </style> <div class="new"> <h3>テキストテキスト</h3> <p>この記事は何月何日以降に作られた新着記事です。</p> </div> ご参考まで。
> JABEE認定コースか、Webやゲームデザイン系コースか ずいぶん乱暴な分類かと思います。 ゴリゴリの技術者認定が、それ以外全部って感じ。 基本的にWeb関連技術はゲームやデザインとは無関係な、ビジネス色の強い分野ですし、 ゲームといっても開発部分はデザインとは無関係な、硬派なエンジニアリング分野です。 また、デザインはWebやゲームと基本的には関係のない分野です。 コンピュータの利用技術をマスターし、就職に役立てたいのであれば、どの分野でも大きな意義はあるでしょう。「デザイン」だけは感覚とかセンスが重要な分野ですが、それにしてもいきなりカンバスに絵を描くわけじゃあるまいし、多様なソフトウェアを使いこなし、ユーザニーズに合った（ここ重要）イメージを作り上げるには、技術や経験の積上げが重要です。 ただ言えるのは、「面白そうで派手に見える分野」ほど（身の程知らずな）就業希望が多く、地味で複雑な分野ほど就職は楽だということです。 いずれの分野でも、就業出来た後も仕事上の大変な努力が必要になりますので、自分が興味を持って取り組める分野、あとは自分の「他人と峻別できる」才能の見極めが必要です。 自分が「少し賢い普通の人」であると自覚されれば、エンジニアリング分野や、基幹業務系のWeb開発分野が向いています。
透過pngの種類ということで言うと、インデックスカラーとフルカラーがあります。 インデックスカラーでは大抵1色のみが完全透明ですが、フルカラーは半透明(アルファ値)を扱えます。 インデックスカラーの半透明は使われているのを見たことがありません。 Vieasはインデックスカラーとフルカラーのどちらかのみ使えるのかもしれません。
https://developer.mozilla.org/ja/docs/Web/Guide/CSS/Using_multiple_backgrounds このやりかたどうですかね？
mediaqeryを使用して、幅によってスタイルシートを変えれば出来ますが勧めません。 普通にfloatにしましょう。
やはりわからないです。 ・その画像がコンテツンの一部なのか、背景なのか？ 　　<h1><img src="" width="" height="" alt=""></h1> 　or 　　<div class="header"> 　　　<h1>タイトル</h1> 　　　・・・・　　　　　headerの背景 　　</div> 　or 　　<ol> 　　　<li>項目</li>　　この背景 ・cssで画像（width: 1920px;　height: 1200px;）の表示範囲を指定して 　どう指定するのか？ 　具体的に、開始位置の座標～終点の座標なのか、単に画像の中心なのか 　質問内容がわからないので回答のしようがないのじゃないでしょうか？ 具体的な例を示してください。わかりやすい。
質問の意味がわかりません。 ＞cssで画像（width: 1920px;　height: 1200px;）の表示範囲を指定して 　例えば、左上から100px、100pxから、200px,350pxの範囲のものを ＞height: 150px;width: 100%;の大きさで 　幅100%(何を基準？？)、高さ150pxで・・ 　どこに表示したいのでしょう。 　基本的には、スプライトと同じ技法になるはずですが？？？ 　添付のように具体的な数字と、されたいことを明示されれば良いかと思います。
ごく簡単なサンプル。 　後から現れているのでz-indexは不要!! ★タブは＿に置換してあるので戻す。 ★http: はhttp：（全角)に置換してあるので戻すこと。 ★スマホ以上のディスプレイ対応のリキッド 　ディスプレイ幅・フォントサイズを変えてもＯＫ。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict+CSS2.1 ☆HTMLが文書構造だけ本来の順番で書かれていると悩む事はない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:80%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;padding-top:2em;min-height:350px;} div.section div.nav, div.section div.aside{position:absolute;top:0;text-align:center;line-height:2em;} div.section div.nav{width:100%;} div.section div.aside{width:8em;right:0;height:100%;top:100px;} div.section div.nav ul,div.section div.nav ul li, div.section div.aside ul,div.section div.aside ul li{list-style:none;margin:0;padding:0;} div.section div.nav ul li, div.section div.aside ul li{width:8em;} div.section div.nav ul li{display:inline-block;} div.section div.nav ul li ul li{display:block;} div.section div.nav ul li ul, div.section div.aside ul li ul{display:none;position:absolute;} div.section div.nav ul li ul{top:2em;} div.section div.aside ul li ul{left:-8em;top:0;} div.section div.nav ul li:hover ul,div.section div.aside ul li:hover ul{display:block;} div.iframe{float:right;margin:0 8em 10px 1em;} div.section div.figure{width:80%;position:relaive;margin:10px auto;z-index:10;} div.section div.figure img{width:100%;height:auto;} /* 色分け */ body{background-color:gray;} div.header,div.section,div.footer{background-color:white;} div.section div.aside ul li{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div class="iframe"> ＿＿＿<iframe title="googleMap" width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.co.jp/maps?f=q&amp;source=s_q&amp;hl=ja&amp;geocode=&amp;q=%E9%8C%A6%E5%B8%AF%E6%A9%8B&amp;aq=&amp;sll=34.728949,138.455511&amp;sspn=38.735678,55.810547&amp;t=m&amp;brcurrent=3,0x354534156c9e8a49:0x99326655385bf768,0&amp;ie=UTF8&amp;hq=&amp;hnear=&amp;ll=34.167596,132.17841&amp;spn=0.006295,0.006295&amp;output=embed"><a href="https://maps.google.co.jp/maps?q=%E9%8C%A6%E5%B8%AF%E6%A9%8B&amp;hl=ja&amp;ie=UTF8&amp;ll=34.168086,132.178402&amp;spn=0.009623,0.013626&amp;sll=34.728949,138.455511&amp;sspn=38.735678,55.810547&amp;brcurrent=3,0x3545343e9d3a0af1:0x1de6e24f5c8d3786,0&amp;t=m&amp;z=16&amp;iwloc=A">googleMap</a></iframe> ＿＿</div> ＿＿<p>錦帯橋（きんたいきょう）は、山口県岩国市の錦川に架橋された木造のアーチ橋である。</p> ＿＿<p>写真や文章はいずれもWikiより引用</p> ＿＿<div class="figure"> ＿＿＿<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/6f/Kintaikyou_bridge.JPG/1280px-Kintaikyou_bridge.JPG" width="800" height="150" alt="錦帯橋周辺パノラマ"> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>日本三名橋 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>日本橋</li> ＿＿＿＿＿＿<li>錦帯橋</li> ＿＿＿＿＿＿<li>眼鏡橋</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>日本三奇橋 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>錦帯橋</li> ＿＿＿＿＿＿<li>猿橋</li> ＿＿＿＿＿＿<li>かずら橋</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<ul> ＿＿＿＿<li>日本三名橋 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>日本橋</li> ＿＿＿＿＿＿<li>錦帯橋</li> ＿＿＿＿＿＿<li>眼鏡橋</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>日本三奇橋 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>錦帯橋</li> ＿＿＿＿＿＿<li>猿橋</li> ＿＿＿＿＿＿<li>かずら橋</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
JavaScriptやライブラリー（mootools、jQueryなど）は見よう見まね程度の私ですがCSSなら大体わかります。 サイトを見てみたところ。重なり順を指定するz-indexが指定してあります。 z-indexの後の数字を小さくする（今回は0）にすることで解決できそうです。 実際に変更する箇所は3箇所で以下のHTMLです。 <div id="hpb-nav" style="z-index: 3;">を <div id="hpb-nav" style="z-index: 0;">に <div id="banner" style="z-index : 4;">を <div id="banner" style="z-index : 0;">に <div id="toppage-news" style="z-index : 1;">を <div id="toppage-news" style="z-index : 0;">に 変更してみてください。
参考ＵＲＬでwordpress用の主なプラグインサイトを紹介しています。 設定ができないのは、理論的なことがわかっていなければ無理かな？・・・・ 画像サイズx枚数＝画像幅と高さ＝画像領域 移動させる位置と時間この関係がわかれば、簡単に政策できると思います。
<li><a href="#page2l">Page Two</a></li> ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ 記述ミス <li><a href="function.html#anker">Page Two</a></li> ＨＴＭＬの記述が理解できていないのでは？・・・ <li><a href="ｆunction.htm#name">Page Two</a></li> となるはずですが、function.htmlに、ID名が記述されていないだけでは？ 関数辞書などを作る場合、 1.どのように分類するかを決まる（ABC順かアイウエオ順か？） index.htmlの配下に、a.html,b.htmlのように26のページができる（ただしaはアンカー、bはボールドと誤解される可能性があるので、このような場合は、命名に気を遣る） 2、いろは順の場合も同様 ３、それぞれの配下に、IDを設けリンクする。 各リンク先には、必ずindex.htmlに戻るボタンと、各A・Ｂ・Cに移動できるリンクと現のホルダ位置を示す表示を行う ＤＬ、ｄｔ、ｄｄタグで記述するのだとは思うが？・・・ 特にスマホのようなモバイル環境では階層を深くしないことがコツ！ ２階層までtarget_blankで別ウィンドウを開かないとエラーになる！
　ガラケー・・・というか、それは利用者のスキルの問題で基本的にはどのCMSも対処可能です。 　そもそもHTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より 　なのですから・・ 　MT--Movable Type--やWord Pressは、ブログシステムでCMSの一部です。コーポレートサイトでしたら、CMSのほうが良いです。 XOOPS Cube( http://xoopscube.jp/ ) OpenCms( http://www.opencms.jp/ ) あたりが扱いやすいかと思います。 なお、機種チェックは行う必要がないです。HTMLはそうしたものです。 デザインをすべてスタイルシートに回せばスタイルシートに対応していないガラケーも利用できます。 　そこはあなたの技量次第です。
既に試されていたらすいません。 －－－－－－－－－－－－－－－ <style type="text/css"> body { -webkit-text-size-adjust: 100%; } </style> －－－－－－－－－－－－－－－ 「-webkit-text-size-adjust: 100%;」を入れると直るようです。 こちらでもテスト環境で実験してみましたが、 そもそも同じような問題（バグ？）を再現することが出来ませんでしたので、 そうなってしまった理由は分かりませんが。 ご参考までに。
質問の意味が（第三者には）読取れないのです。 状況やされたいことがわからないです。 類推ですが ・HTMLのソースで 　<div id="tab"> 　　<ul> 　　　<li><a href=""></a></li> Q) 部分の、div#tab要素を表示画面中のセンターに配置したい？？ 　　スタイルを適用したい要素にwidthを指定してmargin-left:auto;margin-right:auto; ・スタイルシートを外部ファイルにしたい 　⇒14.2 HTMLへのスタイル付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.2 ) 　の２点かな？？
出発点が違います。 確かに初歩的なことなのですが、 そもそもHTMLを使ってウェブページを作成する【最大の目的】は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 　・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より 　スマホだけじゃない、プリンターもスクリーンリーダーもある。大御所の検索エンジンも・・本当にこれが大原則なのです。スマホだけでも画面サイズは ⇒スマートフォン比較表( http://www.smph.info/ ) 　こんなにあります。今後も益々増えていくでしょう。 　スマホのディスプレイの面積あたりの解像度自体はパソコンの数倍ありますが、だからと言って余り小さくなると読めなくなります。 　基本的にページで許容されている最小サイズまで縮めた後、半分に縮小すると考えますから、リキッドで最小サイズを640px程度にして、それを超えるとmediaqueryで配置を変える手法をとることが多いです。 　画像はwidth（たまにheight）を表示サイズに合わせたほうをautoにする。背景はbackground-size:coverとかにする。 　あまり厳密に考えないでパソコン用のリキッドで製作して、スマホ縦置きならmediaqueryで配置を換えるので良いです。 　いちいち対処なんかしてたらHTMLでページを作成する意味がない。 　
なぜtableじゃまずいの？？ れっきとしたtableデータとして意味があるのでtableで構いません。 『ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )』がまずいのであって、tableのほうが良いデータは遠慮なくtableにしましょう。 　もちろんDIVだろうがリストだろうが、 文書構造がきちんとマークアップされていれば、期待通りにデザインできるはずです。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ ＞dl,dt,ddを使う方法、divのみを使う方法を試しましたが、納得のいく見栄えになりません。 ＞説明が２行以上に渡ると項目名が対応されない 　これは、文書構造とデザインが合わないからです。 　具体的には、dt要素はdd要素に含まれているものではないので、ddの高さに合わせる事は不可能です。 　ひとつずつ <div class="sample"> 　<dl> 　　<dt>施設名</dt> 　　<dd>あああああああああああああああ</dd> 　</dl> 　<dl> 　　<dt>所在地</dt> 　　<dd>いいいいいいいいいいいいいいいいいいいいいいい</dd> 　</dl> とすれば、簡単にできるはずです。 div.sample dl{display:block;position:relative;} div.sample dl dt{position:absolute;top:0;left:0;width:10em;text-align:center;} div.sample dl dd{margin-left:11em;} [サンプル] ★さすがにtransitinalじゃ古いのでstrictです。 HTML文書を作る場合には、strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1 ) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html> <head> <title>てすと</title> <meta http-equiv="content-type" content="text/html; charset=shift-jis"> <meta http-equiv="imagetoolbar" content="no"> <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css" media="screen"> <!-- #sample,#sample2{width:700px;margin:0 auto;position:relative;background-color:silver;} #sample div.section{width:100%;position:relative;min-height:40px;border:solid 1px silver;padding:5px 0;} #sample div.section h3{position:absolute;top:0;left:0;width:8em;height:100%;text-align:center;margin:0;font-weight:normal;} #sample div.section p, #sample div.section ul{margin:0 0 0 10em;} #sample div.section.details h3{display:none;} #sample div.section.details dl, #sample div.section.details dt, #sample div.section.details dd{list-style:none;padding:0;margin:0;white-space:nowrap;} #sample div.section.details dt, #sample div.section.details dd{padding:0 0.5em;display:inline-block;} #sample div.section h3, #sample div.section.details dl dt{background-color:orange;line-height:40px;} #sample2{list-style:none;padding:0;} #sample2 li{width:100%;position:relative;min-height:40px;border:solid 1px silver;padding:5px 0;} #sample2 p{position:absolute;top:0;left:0;width:8em;height:100%;text-align:center;margin:0;font-weight:normal;} #sample2 p+p{position:static;width:auto;height:auto;text-align:left;margin:0 0 0 10em;} #sample2 li ul{margin:0 0 0 10em;} #sample2 li.details h3{display:none;} #sample2 li.details dl, #sample2 li.details dt, #sample2 li.details dd{list-style:none;padding:0;margin:0;white-space:nowrap;} #sample2 li.details dt, #sample2 li dd{padding:0 0.5em;display:inline-block;} #sample2 li p, #sample2 li.details dl dt{background-color:orange;line-height:40px;} #sample2 li p+p{background-color:transparent;line-height:1.4em;} </style> </head> <body> <div class="section" id="sample"> ＿<div class="section"> ＿＿<h3>施設名</h3> ＿＿<p>あああああああああああああああ</p> ＿</div> ＿<div class="section"> ＿＿<h3>所在地</h3> ＿＿<p>いいいいいいいいいいいいいいいいいいいいいいい</p> ＿</div> ＿<div class="section"> ＿＿<h3>職員体制</h3> ＿＿<p>うううううううううううう</p> ＿＿<p>うううううううううううう</p> ＿</div> ＿<div class="section"> ＿＿<h3>アクセス</h3> ＿＿<ul> ＿＿＿<li>えええええええええええ</li> ＿＿＿<li>おおおおおおおおおおおおおおおお</li> ＿＿＿<li>かかかかかかかかかかかかかかか</li> ＿＿</ul> ＿</div> ＿<div class="section details"> ＿＿<h3>詳細</h3> ＿＿<dl> ＿＿＿<dt>総居室数</dt><dd>３室</dd> ＿＿＿<dt>居室面積</dt><dd>２０平米</dd> ＿＿＿<dt>電話番号</dt><dd>12-3456-7890</dd> ＿＿＿<dt>FAX番号</dt><dd>12-3456-7890</dd> ＿＿</dl> ＿</div> </div> <ol class="section" id="sample2"> ＿<li><p>施設名</p> ＿＿<p>あああああああああああああああ</p> ＿</li> ＿<li><p>所在地</p> ＿＿<p>いいいいいいいいいいいいいいいいいいい</p> ＿</li> ＿<li><p>職員体制</p> ＿＿<p>ううううううううううううううう</p> ＿＿<p>ううううううううううううううう</p> ＿</li> ＿<li><p>アクセス</p> ＿＿<ul> ＿＿＿<li>ええええええええ</li> ＿＿＿<li>おおおおおおおおおおおおおおおおおおお</li> ＿＿＿<li>かかかかかかかかかかかか</li> ＿＿</ul> ＿</li> ＿<li class="details"> ＿＿<h3>詳細</h3> ＿＿<dl> ＿＿＿<dt>総居室数</dt><dd>３室</dd> ＿＿＿<dt>居室面積</dt><dd>２０平米</dd> ＿＿＿<dt>電話番号</dt><dd>12-3456-7890</dd> ＿＿＿<dt>FAX番号</dt><dd>12-3456-7890</dd> ＿＿</dl> ＿</li> </ol> </body> </html>
原因は#sidebodyをfloat していないからでしょう。 <!DOCTYPE html> <html lang="ja"> <head> <title></title> <style type="text/css"> #content { width: 200px; /*height: auto;*/ border: red solid 1px; overflow: hidden; } #sidebody { width: 100px; float: left; } #abox { /*width: 100px;*/ height: 20px; background-color: blue; text-align: center; color: white; } #bbox { /*width: 100px;*/ height: 100px; background-color: pink; text-align: center; color: white; } #cbox { /*clear: both; width: 100px;*/ height: 100px; background-color: darkblue; text-align: center; color: white; } #dbox { width: 100px; height: 250px; float: left; background-color: green; text-align: center; color: white; } </style> </head> <body> <div id="content"> <div id="sidebody"> <div id="abox">a</div> <div id="bbox">b</div> <div id="cbox">c</div> </div> <div id="dbox">d</div> </div> </body> </html> DOCTYPE宣言なしの互換モードで書くのなら、#sidebodyのwidth:値を減らす必要があります。
現象がわからないです。 ・・・
そのサイトの説明間違ってます。 ＞<div>や<span>でスタイリングのためのタグ付けをする 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』 　とはっきり書かれている!!。これを理解できない人があまりに多かったため、HTML5では「文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )」 　になっちゃった。 　その上で文書構造に従ってカスケーディングの仕組みを使ってスタイルを適用する要素を選択（セレクトselect）していくのですよ。 　たとえば、先の CSSのh1,h2,h3で色付けをしたい - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8510613.html ) 　のHTMLでしたら、 ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> が下のように次々につながっていたとしたら ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> スタイルシートで div.section div.section:nth-child(2n){background-color:rgb(200,255,255);} sectionブロックの偶数番目のsectionは背景を薄い水色になるとなる。 　他の書き方もある。 ＞現在４０００文字を超えるので 　でしたら、当然HTML上もsectionで区切られていて、リンク用にidなどが振られていると思いますから、そのidを使って 　#section2{color:blue;} でよいですね。 スタイルシート仕様書の 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html ) 　はしっかり理解しておきましょう。 　その前に、HTMLはデザインを考えずにひたすら文書構造をマークアップすることに専念しましょう。 　先のサンプルでしたら、将来スマホ用にデザインを変えるもの楽です。今でもリキッドなのでスマホで利用できますが・・ div.section div.section{width:auto;min-height:0;min-width:0;} div.section div.section,div.section h2,div.section p{margin:0 180px;} div.section div.section div.section, div.section div p{margin:0;} div.section div.aside,div.section div.nav{position:absolute;top:0;width:170px;height:100%;} div.section div.aside{left:0;} div.section div.nav{right:0;} を div.section div.section{width:auto;min-height:0;min-width:0;} div.section div.section,div.section h2,div.section p{margin:0 0 0 180px;} div.section div.section div.section, div.section div p{margin:0;} div.section div.nav{position:absolute;top:0;width:170px;height:100%;} div.section div.nav{right:0;} とするだけ 　4000字とか大きなページらいちいちid振っていたらそれだけで頭がパンクする。馬鹿らしいので止めなさい。
＞h1,h2,h3などで、色付けをしたいのと、途中で文章に色付けをすること 　HTMLの文書構造に従って、その見出しを選択してスタイルを指定します。(下記サンプル参照) 　よく間違われるのですが、デザインのためにclass名やidを指定するのではありません。 『id属性及び class属性と併用することで、文書に構造を付加』し、その文書構造に基づいてスタイルを指定するのです。 例えば、 div.section div.section h3{color:red;} 　本文(section)中の本文(section)なかのh2要素と言う意味です。 　この選択手段をセレクタといいCSSで最も重要な部分です。それがあるから 【重要】構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )ができるのです。 　せっかく「」のためにプレゼンテーションはスタイルシートで行うのですから、そんな酷いHTML書いたらダメです。 　下記サンプル・・・HTMLはどこに何が書いてあるか誰(検索エンジン)でもわかる。 ★HTML5を目前にしていますからサンプルはHTML4.01strictです。XHTML面倒なので ★タブは＿に置換してあるので戻す。 ★スタイルは<head></head>内に書いてます。 　・・・最初はこっちのほうが楽です。 　まずセレクタやそれを使ったカスケーディングの書き方を覚えましょう。 　まっとうな参考書なら最初に書かれているはず。だってカスケーディングはCSS(カスケーディングスタイルシート)の根幹を成すもっと重要なことです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:470px;max-width:900px;margin:0 auto;padding:5px;} div.header div.nav ul{list-style:none;text-align:center;font-size:0;line-height:30px;} div.header div.nav ul li{display:inline-block;font-size:16px;width:8em;position:relative;} div.header div.nav ul li a{ display:block;width:100%;height:100%; border:outset 3px silver;background-color:yellow; text-decoration:none; } div.header div.nav ul li a[href="EFG.html"]{background-color:red;} div.section{position:relative;min-height:300px;} div.section div.section{width:auto;min-height:0;min-width:0;} div.section div.section,div.section h2,div.section p{margin:0 180px;} div.section div.section div.section, div.section div p{margin:0;} div.section div.aside,div.section div.nav{position:absolute;top:0;width:170px;height:100%;} div.section div.aside{left:0;} div.section div.nav{right:0;} /* 特定の見出しに色をつける。 */ div.header h1 a{color:red;} div.section h3{background-color:yellow;color:green;} div.section div.aside h3{color:blue;} body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:silver;} div.section div.section{background-color:white;} div.footer{background-color:yellow;} div.section div.nav{background-color:fuchsia;} div.section div.aside{background-color:lime;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><a href="index.html">○○○○</a></h1> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="index.html">ホーム</a></li> ＿＿＿＿<li><a href="shaken.html">○○</a></li> ＿＿＿＿<li><a href="bankin.html">○○○○</a></li> ＿＿＿＿<li><a href="mentenansu.html">○○○○○○</a></li> ＿＿＿＿<li><a href="syoukai.html">○○○○</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>（有）○○○○○ TEL;○○○-○○-○○○○○○</h2> ＿＿<p>FAX;○○○-○○○-○○○○</p> ＿＿<p>○○○○のホームページサイトにご訪問くださり誠に有難うございます。</p> ＿＿<p></p><p></p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h3>○○○○</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="index.html">○○○</a></li> ＿＿＿＿<li><a href="tosoukouba.html">○○○</a></li> ＿＿＿＿<li><a href="syuurikouba.html">○○○</a></li> ＿＿＿＿<li><a href="ABC.html">ABC</a></li> ＿＿＿＿<li><a href="EFG.html">EFG</a></li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>ピックアップ</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="NOP.html">NOP</a></li> ＿＿＿＿<li><a href="QRS.html">QRS</a></li> ＿＿＿＿<li><a href="TUV.html">TUV</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿＿<address>Copyright (c) ○○○○ All Rights Reserved.</address> ＿</div> </body> </html>
実際のソースを見たかったのですが。 見出しから説明文（３）までをブロック要素で囲み、margin か padding を入れればいいです。
sassに関しては、参考URLをご覧ください！ これを@eachを使ってまとめて指定することは可能ですか？ @each $category in .news, .service, .essay, .dialy, .book, .web, .graphic, '' { .column {$category} ............ } ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ は、可能です。
通常はPATH_INFOを使用します。 たとえば下は回数指定してありませんから幾度でも有効ですが・・ http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/Null0lluN/testdayo.html とか、QUERY_STRINGや標準入力と同じようにデータを渡せます。 wikiの記事はすべてそうですし、新聞社の記事とかは期間指定で使用しています。 上記はindex.cgiになってますが、別に何でも構わない。 PATH_INFOの値で・・・「メールで一度だけ有効」なだけじゃなく、個人のメールアドレスの習得などに悪用されている。 　メールに添付されているURLは、このPATH_INFOを除いてアクセスするとかしなければなりません。 　詳しいテクニックは、悪用の恐れがあるので説明は遠慮します。
スタイルシート部分だけ、差し替える ★タブは＿に置換してあるので戻す。 ★HTMLの文書構造のマークアップさえきちんと出来ていれば、HTMLメンテナンスは楽になる。 　デザイン関係はHTMLに一切書いてない。 　そうしてあると、どのようにマークアップされていても、同じようにデザインできます。 ★もちろんデザインを変更すことも容易でわかりやすい。 　div.figure imgと書かれていれば、figureブロック内の画像 　ul.album li imgと書かれていれば、アルバムリスト内の画像 とね。 ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /*ここから*/ div.figure,ul.album{width:50%;margin:5px auto;border:solid 1px gray;padding:5px 10px;} div.figure img,ul.album li img{ ＿float:left;display:block; ＿width:200px;height:auto; ＿margin:5px 10px; } ul.album {list-style:none;} ul.album li{margin:0;padding:5px;} div.figure div.figcaption,ul.album li p{margin-left:180px;} /* これを忘れると重なっちゃう */ div.figure div.figcaption:after,ul.album li:after{ ＿content:""; ＿display:block; ＿clear:left; ＿white-space:pre; } /* おまけ(色分け) */ body{background-color:gray;} div.header,div.section,div.footer{background-color:white;} --> ＿</style>
＞下記ブラウザで表示させたところ、全て異なる表示となってしまった為、この辺の解決策も含めて、お伺いした次第です。 　でお分かりのように、<DOCTYE>は必須です。!! tabel以外でマークアップしたものを合わせるためには ⇒DOCTYPEスイッチ - Google 検索( https://www.google.co.jp/search?q=DOCTYPE%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:ja:official&hl=ja&client=firefox-a ) 　これは必須です。 ★DOCTYEなしで、どのブラウザでもほとんど同じになるのは、tableだけです。 ★tableにすると、高さ指定が不可能になりますから、 ３．「領域b-x」「領域b-y」のそれぞれの枠の高さは同じにしたい。（＝「領域a」の枠の高さの５０％ずつ） 　は実現できません。 ということは、DIVソースとなって汚いHTMLになりますが <div> 　<div> 　　<div> 　　　<div> 　　　　領域a 　　　</div> 　　</div> 　　<div> 　　　<div> 　　　　領域b-x 　　　</div> 　　　<div> 　　　　領域b-x 　　　</div> 　　</div> 　</div> </div> とするしかなくなります。・・・後々HTMLのメンテナンスが大変になります。 簡単なtable・・・ ※HTML4.01strict ※タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;position:relative;} /* ここから */ table.oilList{border-collapse:separate;width:100%;border-spacing:10px;margin:10px 0;} table.oilList th{font-weight:normal;text-align:left;} table.oilList th,table.oilList td{border:inset 10px silver;} table.oilList td{width:300px;} /* ココまで */ body{background-color:gray;} div.header,div.section,div.footer{background-color:white;} table.oilList{background-color:silver;} table.oilList th{background-color:rgb(255,200,200);} table.oilList td{background-color:rgb(255,222,180);} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<table class="oilList" summary="不飽和脂肪酸"> ＿＿＿<tr> ＿＿＿＿<th rowspan="2"> ＿＿＿＿＿<h3><abbr title="eicosapentaenoic acid">EPA</abbr>エイコサペンタエン酸</h3> ＿＿＿＿＿<p>魚油に含まれる炭素数20のペンタ不飽和脂肪酸。必須脂肪酸の一つである。</p> ＿＿＿＿</th> ＿＿＿＿<td class="figure"> ＿＿＿＿＿<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Eicosapetaenoic_acid.svg/616px-Eicosapetaenoic_acid.svg.png" width="246" height="40" alt=""> ＿＿＿＿＿<p class="caption">エイコサペンタエン酸の構造</p> ＿＿＿＿</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td class="aside"> ＿＿＿＿＿<p><a href="http://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%A4%E3%82%B3%E3%82%B5%E3%83%9A%E3%83%B3%E3%82%BF%E3%82%A8%E3%83%B3%E9%85%B8">エイコサペンタエン酸</a></p> ＿＿＿＿</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<th rowspan="2"> ＿＿＿＿＿<h3><abbr title="docosahexaenoic acid">DHA</abbr>ドコサヘキサエン酸</h3> ＿＿＿＿＿<p>魚油に含まれる炭素数22の4,7,10,13,16,19-ヘキサ不飽和脂肪酸である。人体内ではα-リノレン酸から生成される。</p> ＿＿＿＿</th> ＿＿＿＿<td class="figure"> ＿＿＿＿＿<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Docosahexaenoic_acid.svg/680px-Docosahexaenoic_acid.svg.png" width="272" height="39" alt=""> ＿＿＿＿＿<p class="caption">ドコサヘキサエン酸の構造</p> ＿＿＿＿</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td class="aside"> ＿＿＿＿＿<p><a href="http://ja.wikipedia.org/wiki/%E3%83%89%E3%82%B3%E3%82%B5%E3%83%98%E3%82%AD%E3%82%B5%E3%82%A8%E3%83%B3%E9%85%B8">ドコサヘキサエン酸</a></p> ＿＿＿＿</td> ＿＿＿</tr> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
すでに読まれているかとは思いますが 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (邦訳)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) それぞれのプロパティには継承される物とそうでないものがあります。 ＞ body要素にfont-family / color / font-size / line-height などの全体へのテキスト関連のプロパティを指定しておいて、 font-family，color，font-size，line-heightはすべて継承（Inherit）されるプロパティです。 ＞IEで文字サイズの変更が効かないことから、font-sizeには％指定を使おうと思っている 　一昔前まではそういわれていましたが、今はpx(絶対サイズ)にすることが多いですね。 　%,emは相対サイズです。(pxはCSS2では相対サイズとされていましたが現行のCSS2.1では絶対サイズ) ＞font-sizeへの％指定とpx指定が混在しているサイトをよく見るのですが、どういった理由なのでしょうか？ 　pxで指定しておいて、%ないしem,exなどで指定するほうが楽ですね。私は最初のpx指定も省きます。あくまでベースをどのサイズで見るかはユーザーに合わせます。その上で各要素で追指定しています。 CSS(カスケーディング　スタイルシート)でもっと重要な根幹はカスケーディングです。仕様書で言うと 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て ・・・これを理解せずに先に進んでも無駄です。 デザインのために、DIVやclass名idを多用したり、デザイン目的でHTMLを作成する失敗につながります。 　スタイルシートを導入するのは、ひとえに「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」のためです。HTMLは文書構造を、プレゼンテーションはスタイルシートで行うこと。 　 　
(min-width: 640px) とは、最小640pxまでと言う意味です。 max-width だと、それより小さい物には適用しない 1) 永続的スタイルシートに、共通な設定を記入する。 2) screen用にscreen共通のスタイル--リキッド-- 　　　mediaQueryを利用できないブラウザ用 　print用は別途 3) 小さな画面用に(2)を上書きさせる形でmax-widthにて・・
そのようなHTMLの描き方は誤りですが・・ <div class="test"> 　<div></div> 　<div></div> 　<div></div> 　<div></div> ・・・ </div> であったとしても、 div.test{width:1000px;text-align:center;} div.test div{ width: 150px; height: 150px; overflow: hidden; border: 1px solid; color: #a9a9a9; padding: 3px; display:inline-block; } div.test div+div+div+div{display:block;float:left;} ですむはずです。 ★スタイルシートを使用する最大の目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」です。【必読】 　divの目的は『id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』です。outer-frameとかinner-frameは、HTML4.01で強く否定されている「ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )」と発想は変わりません!!。 次のようにマークアップされるのじゃないですか？？ <div class="nav"><!-- class名にnavを使用してナビゲーションだとマークアップする --> ＿<ol> ＿＿<li> ＿＿＿<ol> ＿＿＿＿<li><a href="">1</a></li> ＿＿＿＿<li><a href="">2</a></li> ＿＿＿＿<li><a href="">3</a></li> ＿＿＿</ol> ＿ </li> ＿＿<li><a href="">4</a></li> ＿＿<li><a href="">5</a></li> ＿＿<li><a href="">6</a></li> ＿＿<li><a href="">7</a></li> ＿＿<li><a href="">8</a></li> ＿＿<li><a href="">9</a></li> ＿＿<li><a href="">10</a></li> ＿</ol> </div> このように、HTMLはひたすら、文書構造だけをマークアップします。 そして、 div.nav{ min-width:480px;max-width:1000px;/* ただし最小470px(スマホ)、最大1000px */ margin:0 auto;/*左右中央 */ } div.nav ol{/* ナビゲーションブロック内のolは */ list-style:none;/* リストじゃないよ */width:100%;/* ディスプレイの幅一杯 */ display:block;/* ブロックだよ */ padding:0; position:relative; margin:0; } div.nav ol li ol{ width:100%; text-align:center; min-height:100px; } div.nav ol li{ width: 100%; margin: 0; } div.nav ol li ol li, div.nav ol li+li{ width:150px;height:150px; float:left; margin:5px; padding:3px; text-align:left; } div.nav ol li ol li{ float:none; display:inline-block; } div.nav:after{content:"";display:block;clear:left;} HTMLの改定も楽ですし、デザインも独立しているから自由に変更できる。 もちろん、 <div class="nav"><!-- class名にnavを使用してナビゲーションだとマークアップする --> ＿<ol> ＿＿<li><a href="">1</a></li> ＿＿<li><a href="">2</a></li> ＿＿<li><a href="">3</a></li> ＿＿<li><a href="">4</a></li> ＿＿<li><a href="">5</a></li> ＿＿<li><a href="">6</a></li> ＿＿<li><a href="">7</a></li> ＿＿<li><a href="">8</a></li> ＿＿<li><a href="">9</a></li> ＿＿<li><a href="">10</a></li> ＿</ol> </div> でしたら、 div.nav{ min-width:480px;max-width:1000px;/* ただし最小470px(スマホ)、最大1000px */ margin:0 auto;/*左右中央 */ } div.nav ol{/* ナビゲーションブロック内のolは */ list-style:none;/* リストじゃないよ */width:100%;/* ディスプレイの幅一杯 */ display:block;/* ブロックだよ */ padding:0; position:relative; margin:0; text-align:center; } div.nav ol li{display:inline;} div.nav ol li a{ width:150px;height:150px; display:inline-block; margin:5px; } div.nav ol li+li+li:after{content:"";display:block;clear:left;} div.nav ol li+li+li+li:after{content:none;} div.nav ol li+li+li+li a{ display:block; float:left; } div.nav:after{content:"";display:block;clear:left;} div.nav ol li a{background-color:aqua;} でよい。
カートや支払いページ、問い合わせのページのドメインが.ocnk.netとなっているので、 http://www.ocnk.net/ このサービスではないでしょうか。 テンプレート名まではわかりません。
すべてのブラウザで同じ表示にすることは、製作者の知識が必要になります。 現時点で、勧告として出されているものは、html4.01+CSS2.1です。 これ以外に、先駆けてHTML5+CSS3で記述されてる場合、 ブラウザによってそれぞれ対応が異なるため、表示が異なって見えます。 これらを避けるためには、すべてのブラウザに対応したタグ以外は使用しないことが必要です。 また使用する場合は、必ずハックをあてることが、必要です。 この処理をしていないと、同じ表示は、できません！ せめて、GoogleChrom、Firefox、Ｏｐｅｒａ、Safari、IE6～IE11までの、ブラウザでの確認をする程度のことは製作者の義務だと思ってください！ Javascriptは、閲覧者が、scriptを切っていれば実行されません！ これを防ぐには、サーバーサイドの実行ファイルが必要になります。(parl・phpなど) 詳しくは、W3C、WHATWGなどの仕様書をご覧ください。
画面幅が1000px以上のデバイスの場合、まずmin-width:500pxで設定されているスタイルが適用されます。（500pxより大きいから） 続いてmin-width:1000pxの設定でスタイルを上書いて行きます。 min-width:500pxの設定では#box01に対してfloat:left;を適用していますがmin-width:1000pxの設定ではfloatに関する定義が無いため幅、高さ、背景色だけ定義を上書きして、floatに関する定義はmin-width:500pxの設定が残ります。 floatさせないようにするにはmin-width:1000pxにfloat:none;を定義しましょう。
FTPソフトであれば、ファイルをアップする時点で上書きすればいいだけでは？・・・ なぜ削除が必要なのか？・・・ それともパーテーションの設定が必要とか？・・・ ディレクトリをアップ？・・・意味が理解できない！ WEBのトップは一般的には、index.htmlあるいはindex.htmだと思いますが？・・・ サーバーへは、public_htmlとかwebディレクトリにアップするようになっていると思いますが？・・・ そこにディレクトリごとアップしたのであれば、アクセスするには、http://hogehoge.jp/アップしたディレクトリ名/ でアクセスすることになります。 ＦＴＰはなんであれ操作は同じです。
面白そう(^^) 本当に様々な方法がありますが、文書構造=HTMLが示されていませんので、されたいことがわかりません。 　例えば、機器の説明などで画像があったとして、それぞれの部分を200×200で表示したいということでしょうか？ ・背景画像としてbackground-positionを使用する。 　HTML側には画像は一切記入せずCSS側で可能。 ・画像自体をスタイルシートでサイズや位置を指定する。 ・他にも文書構造に合わせて色々な手法があります。 　例えば２番目の例ですが 　img要素は置換インライン要素ですのでwidth,height共にautoで本来のサイズになります。それを利用します。 　それを囲むブロックにposition:relative;とoverflow:hidden;を指定して画像自体はrelativeで任意の位置に移動させると、期待通りになるはずです。 ＞可能なら、どの範囲の部分を表示させるか指定したい(左上とか) 　contentプロパティで属性値を指定するのが楽です。content:attr(title)とか・・ 　そうすれば、HTML側でのメンテナンスだけですみます。 【重要】 　HTMLがきちんと文書構造をマークアップできていればドウにでもなります。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ [サンプル] 画像はライセンスの関係もありWikiの物を使用しています。 ☆リキッドですから親画像はウィンドウ幅に合わせて伸縮します。 ★タブは＿に置換してあるので戻す。 ★http:はhttp：に置換してあるので戻す。 詳細画像はここではWiki画像を使用していますが、適当な画像でも良いです。contentでオリジナル画像を追加すればすむ事ですから・・ (HTML) <ul class="sample"> ＿<li> ＿＿<img src="http：//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sundown_and_cross_section_2.jpg/1024px-Sundown_and_cross_section_2.jpg" ＿＿ width="501" height="" alt="268" style=""> ＿＿<ol> ＿＿＿<li>ヘタ ＿＿＿＿<p title="左上"><img src="http：//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sundown_and_cross_section_2.jpg/1024px-Sundown_and_cross_section_2.jpg" ＿＿＿＿ width="121" height="" alt="54" style="left:-180px;top:-60px;"></p> ＿＿＿</li> ＿＿＿<li>表面 ＿＿＿＿<p title="中央少し左"><img src="http：//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sundown_and_cross_section_2.jpg/1024px-Sundown_and_cross_section_2.jpg" ＿＿＿＿ width="121" height="" alt="54" style="left:-190px;top:-200px;"></li></p> ＿＿＿<li>種 ＿＿＿＿<p title="左中央"><img src="http：//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sundown_and_cross_section_2.jpg/1024px-Sundown_and_cross_section_2.jpg" ＿＿＿＿ width="121" height="" alt="54" style="left:-640px;top:-240px;"></li></p> ＿＿</ol> ＿</li> </ul> (CSS) ul.sample,ul.sample li,ul.sample ol{display:block;margin:0;padding:0;list-style:none;} ul.sample{width:70%;margin:0 auto;position:relative;} ul.sample li img{width:100%;height:auto;} ul.sample ol li{display:inline-block;width:200px;} ul.sample ol li p{width:200px; height:200px;overflow:hidden;position:relative;} ul.sample ol li img{width:auto;height:auto;position:relative;} ul.sample ol li p:after{content:attr(title);position:absolute;top:5px;left:5px;background-color:white;padding:3px;}
属性値を記述する時に使用出来るクォーテーションは、""と''です。 『すべての属性値を二重引用符(ASCII十進34)または単引用符(ASCII十進39)のどちらかを用いて 囲うよう求めている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/sgmltut.html#h-3.2.2 )』 使われている“”ではありません。 サイズにpixはありません。意図は、0.75emだと思います。0.75pxじゃ見えません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・in: インチ―1inは2.54cmに等しい。 ・cm: センチメートル ・mm: ミリメートル ・pt: ポイント―CSSで用いるポイントは1inの1/72に等しい。 ・pc: パイカ―1pcは12ptに等しい。 ・px: ピクセル―1pxは0.75ptに等しい。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Syntax and basic data types - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/syndata.html#length-units )］より ★transitinalは、あくまで古いブラウザ用の後方互換です。 　さすがにHTML5を控えた現在では、transitionalの必要はないでしょう。 　『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1 )』 ★XHTML1.0はHTML4.01をそのままXMLにしたものです。 　HTMLは4.01で終了予定でしたが、時代は変わりHTML5が主流になりそう。なら、HTML4.01strict→HTML5のほうがスムーズ ＞入門書を片手に独習を始めたばかりで、早くもつまずいています。 ---余り良い物がありませんね。本当に!!・・仕様書を通読しておいたほうが良いですよ。 ・HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) ・CSS 2.1仕様書( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) そして ☆Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) ☆W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_input ) サンプル 　このままコピーペーストする。 ★タブは＿に置換してあるので戻す。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェック済みのHTML4.01strict+CSS2.1 ウェブ標準 ☆文字コードはUTF-8 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=UTF-8"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1{font-size:40px;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} div.header,div.section,div.footer{ ＿width:90%;min-width:470px;max-width:900px; ＿padding:5px;margin:0 auto; } div.section{min-height:300px;position:relative;} div.section div.section{width:auto;min-width:0;} div.section div.section, div.section h2, div.section p{margin:0 170px;} div.section div p{margin:0;} div.section div.nav,div.section div.aside{position:absolute;top:0;width:160px;height:100%;font-size:0.9em;} div.section div.nav{left:0;} div.section div.aside{right:0;} /* 色づけ */ body{background-color:silver;} div.header{background-color:rgb(240,240,240);} div.section{background-color:rgb(247,247,247);} div.footer{background-color:rgb(200,200,247);} div.nav{background-color:aqua;} div.aside{background-color:rgb(255,200,200);} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<div class="section"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>・・・</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h3>ナビゲーション</h3> ＿＿＿<ol> ＿＿＿＿<li>・・・・</li> ＿＿＿＿<li>・・・・</li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
HTMLの書き方自体がおかしい？・・・ 以下例文 ********************************************************************* <body> <div id="header"> <h1>総務部からのおしらせ</h1> </div> <div id="sidebar"> <h2>メニュー一覧</h2> <ol> <li><a href="irai/kirai_add.php">至急の依頼・連絡・問合せ 受付</a></li> <li><a href="irai/01_緊急依頼受付状況.xls">至急案件の進捗状況</a></li> <li><a href="irai/irai_add.html">計画工事の依頼書 受付</a></li> <li><a href="irai/02_計画依頼受付状況.xls">計画工事の進捗状況</a></li> <li><a href="irai/依頼書原紙.xls">依頼書原紙 ダウンロード</a></li> <li><a href="irai/02_計画依頼受付状況.xls">総務アクセス・連絡先</a></li> <li><a href="irai/02_計画依頼受付状況.xls">エネルギーデータ</a></li> <li><a href="irai/02_計画依頼受付状況.xls">総務からのお知らせ</a></li> </ol> </div> <div id="main"> <h2>ホームページ試験開設のお知らせ</h2> <p>業務効率化のため、総務への工事依頼や各種問合わせの受付、及びそのフィードバックなどを試験的にこのホームページを介して行わせて頂きます。</p> <p>関係者の方々のご理解とご協力をお願いいたします。 <span class="update">2014年2月○日 総務 </span></p> </div> </body> **************************************************************************** <br></br>タグは、改行ではなく、ブレーキです。 強制的に停止させる、そのため、ブラウザは、改行する。 HTMLを理解すれば、開業タグは、使うことがないはずです。 CSSでどのようにでも対応できます。 <p>はパラグラム（段落）という意味です。 ＨＴＭＬ５になると、記事（artcle）、セクション(section)、aside（補足）、ナビゲーション(nav)という要素が利用できます。 なお、リスト項目は、<ul><ol><dl>のいずれかを利用し、<p>タグでは、ない方がいいとおもいます。 同じ作るのであれば、レスポンシブレイアウトにされた方が、賢明だと思います。 CSSの記述については、参考サイトをご覧ください！
普通にwidth:autoでよいです。
管理画面の設定＞一般でWordPress アドレスを変更、その後 管理画面の設定＞パーマリンク設定で パーマリンクの設定をし直すとURLが割り当て直されます
No.4の方も書いておりますが、属性セレクタ使ってみてはどうでしょう？ img[width="1"] {display:none;} こんな感じで。 アクセス解析の場合、さらに読み込み後に直接スタイル直書きされたりしてる場合もあるので、cssでは無理かもしれませんが。。
やっつけて言うと 回り込みというのは基本 テキストとインライン要素を避けさせるもので ブロック要素は回り込みを避けない ということです それ故、ブロック要素は回り込みの要素を まるで無い物のようにして重なってきます この手法ではfloat:left;は回り込みという本来の目的ではなく dtにブロック要素としての実体を失わせてddを上に重ねてしまう というような目的で使われていると考えればわかりやすいかと思います
(1)変わるとこだけでいいです (2)別にいいです、それがあまり面倒にならないscssで書くときさえ抜かして書いてます (3)一行表記ということならウチはお勧めしときます、読みやすいです (4)position:absoluteはテキスト量が不確定のとき 高さがわからなくなるのであんまり使いたくない、 全ての要素の幅と高さが確定してる時だけ使える方法 inlineにする方法は要素同士に隙間ができるのが弱点 コードの可読性を気にしないなら</li>と<li>を スペースも改行も入れずに続けて書くことで隙間なく横並びにできる 見た目を堅守するならposition:absolute リキッド、レスポンシブにするならinlineで (5)コンテンツ全体をdivでかこってmargin:0 auto; (6)IDは本来はページ内のひとつの要素を識別するためのもの だけどどのブラウザでも同じIDを同じページ内で 何度も使えるようになってしまった忘れられた仕様 一応セレクタとしてはIDの方が強い またIDは基本１要素１IDだけど classは複数指定することが想定されてる IDは一つの要素を特定するために用いるのが本来 javascriptのライブラリなんかではそういう目的で使われてるのが多い
質問を整理してください。 ＞width: 150px; height: 250pxのフレームの中に 　<iframe>ということですか？それだと読み込まれるHTML側で指定。 ＞画像がフレームの真ん中に来て画像と商品説明の間が空かないようにしたいと思っています。 　マージンを消せば消えるはず ＞画像幅が150px未満の画像は左によって商品画像と商品の説明文の間には１行の空きが入ってしまいます。 　一行と言うと上下の間隔です。左によるという現象と合わない ＞<center><img src="画像のURL"></center> 　centerはいくらなんでも使うべきじゃない。 [例] <div id="productList"> 　<ul> 　　<li><img src="" width="" height="" alt=""> 　　　　<dl> 　　　　　<dt>商品名</dt> 　　　　　<dd>扇風機(青)</dd> 　　　　　<dt>価格</dt> 　　　　　<dd>5,000</dd> 　　　　　<dt>説明</dt> 　　　　　<dd>音の静かな床置きタイプ</dd> 　　　　</dl> 　　</li> 　　<li><img src="" width="" height="" alt=""> 　　　　<dl> 　　　　　<dt>商品名</dt> 　　　　　<dd>扇風機(赤)</dd> 　　　　　<dt>価格</dt> 　　　　　<dd>5,000</dd> 　　　　　<dt>説明</dt> 　　　　　<dd>音の静かな床置きタイプ</dd> 　　　　</dl> 　　</li> 　　<li><img src="" width="" height="" alt=""> 　　　　<dl> 　　　　　<dt>商品名</dt> 　　　　　<dd>扇風機(黒)</dd> 　　　　　<dt>価格</dt> 　　　　　<dd>5,000</dd> 　　　　　<dt>説明</dt> 　　　　　<dd>音の静かな床置きタイプ</dd> 　　　　</dl> 　　</li> 　</ul> </div> とかでしたら、画像スペースを150px×150px確保するか、画像の縦サイズに合わせて説明部分を伸縮させるかになるでしょうね。画像サイズごとに位置を指定しても良いでしょう。
　あらかじめテキストを読み込ませておいてtext-indentで隠して、:hoverで表示させれば速いです。いわゆるスプライトをさせるということ。ただIMG要素は内容自体を持ちませんのでcontent(内容の追加が使えませんので<p>要素などに使用すると良いでしょう。
background-positionの個別指定をしてるセレクタの方が 最初にbackgroundを指定してるセレクタより 指定が厳密でなく弱いからじゃないですかね 後ろに書いたところで #gnav ul li　の指定の方が .gnav_2より強いでしょうから IDのほうがclassより強いので 個別のbackground-position指定を より厳密にするほうがいいでしょうね #gnav ul li.gnav_2 とかにするのが確実ではないでしょうか
widthの値は初期ではpaddingを含みません なので width:691px; padding: 16px 230px 16px 30px; だとpの幅は691+230+30pxになります width:431px;にしましょう 蛇足ながらhtml5だと box-sizing:border-box; でwidthをpaddingを含んだ値にできますが まだ時期的に早いかもしれません
　どんな系統の素材なのかが良く解りませんので、的外れの可能性有りですが・・・ 　例えば、こんなリンク集はどうでしょうか？ 　http://matome.naver.jp/odai/2132859505559620701 　ちなみに、探し方は、グーグルに、「画像　素材　フリー」と入力しただけです。 　さて、フリーの画像ライセンスは、結構、様々な形になっています。 　今まで見たことがあるなかでぽっと思いつくだけでも、・・・ 　・個人的利用は無料で、商用利用は有料 　・個人的利用も、商用利用も無料だけど、転載やそのものの販売は禁止。 　・上記無料条件に、クレジットの記載が必須 　・作者への報告義務有り 　・ＣＣ０ 　・パブリックドメイン　　　などなどなど 　これは、個々のサイトをちゃんとチェックしないとだめです。ちゃんとしたサイトであれば、大概の場合は、サイト内に、「利用に関しての注意」などの注意書きがあるはずです。 　ちなみに、次のＵＲＬは、Science CommonsのＣＣ０のＦＡＱの翻訳です。この中に、パブリックドメイン認証との違いの話も書いてあります。 　http://sciencecommons.jp/cc0/cc0-faq
addquicktag　…かなぁ
CSS3でしたら、background-sizeが利用できます。 背景画像はコンテンツには無関係ですから、画質は悪いほうが良いです。(^^) くっきりした画像でしたら、コンテンツに含まれる画像がかぶったり、文字が読みにくくなります。ウェブ開発で重要な事はWAIです。 　⇒WAIガイドライン:ページ制作( http://www.doraneko.org/wai/contents10/19980918/Overview.html ) 　HTML,CSS,WAI,DOMなどを含めてウェブ標準なサイトを作ろうとします。特にWAIは無視できません。 　極めて淡いパステル調にします。(濃くして文字を白系統にすることもありますが、その場合は印刷用スタイルシートを用意します) 　写真の場合は思いっきりぼかします。 　スタイルシートは、mediatype="screen"を必ず指定します。 　サイズ的には、1024×768あたりが最大ですね。ページ自体は640-1024pxのリキッドで作成しますので、position:50% 50%;で中央におきます。CSS3対応のブラウザにはbackground-size:cover;などで覆い、fixedにします。 　ただたくさん作ってきましたが、fixedは無論、背景がでしゃばるサイトは好まれませんね。
こんにちは。 >メール問い合わせフォームのデザインは作成できるのですが、実際にコーディングで実装する方法がわかりません。 ちょっと良くわからないのですが、表側(入力画面)は作れるということでしょうか？ 画面デザインはもちろんhtmlとcssで作ります。 フォームの場合<form action="ココ">を見ると、どこに送信しているかわかります。 例に挙げられたサイトの場合は、php言語を利用しているようです。 基本的にはサーバ側で動かせる言語にてメールの送信等を実装します。 >ちなみに、フォームへの入力結果はどういった流れで確認するのでしょうか？ >単純に指定したアドレスに入力内容が届くだけですか？ こればっかりは、管理側でどうなっているかで違ってきます。 ・メールのみ管理者側に送られてくる ・データベースへ書き込み、それを管理画面から見る ・上記二つの併用 いろいろ考えられます。
jquerymoblieお使いならpopup-iframeで事足りるでしょう そうでないならfancybox2をtype:iframeで使っても スマホでもそんなに不都合ないように思います http://demos.jquerymobile.com/1.2.0/docs/pages/popup/popup-iframes.html http://fancyapps.com/fancybox/#docs
ウェブ開発されているならfirefooxお使いだと思いますが、そのアドオンにfirebug( https://addons.mozilla.jp/firefox/details/1843 )があります。・・・開発者向けツール( https://addons.mozilla.jp/firefox/extensions/developer_tools/ )が豊富なので。 　firebugにて、HTMLのソース側を開いていって、要素を選択すると、プレビュー画面で該当する要素の色が変わります。 　右側のスタイルシートが表示されれば、そこに追加する。 　なければセレクタごと追加します。 　それでCSSの変更を確認したら実際のソースに追加すれば良いです。
.btn:hover { color: red; background-image: url(nikoniko.png); /* 22px x 22px */ } ただし、互換モードでは正しく表示されないので、DOCTYPE宣言が必要です。 <html> から書き始めているとダメという意味です。 HTML4.01 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="ja"> HTML5 <!DOCTYPE html> <html lang="ja">
.ddd { color: #ff0000; font-weight: bold; font-size: 100%; } これでどうかな。
No.1です。具体的な方法。 No.1でも描きましたが、何かのリストだとして。 例えば熱伝導率のリストがあったとします。 <ol class="dataList"> <li>ダイヤモンド（C）<span class="value">1000 - 2000</span></li> <li>銀（Ag）<span class="value">420</span></li> <li>銅（Cu）<span class="value">398</span></li> <li>金（Au）<span class="value">320</span></li> <li>アルミニウム（Al）<span class="value">236</span></li> <li>シリコン（Si）<span class="value">168</span></li> <li>真鍮<span class="value">106</span></li> </ol> だとして、 ol.dataList{width:300px;position:relative;border:solid 1px gray;padding:0.5em 1em;} ol.dataList li{position:relative;width:100%;white-space:nowrap;overflow:hidden;} ol.dataList li span.value{position:absolute;right:0;background-color:white;padding-left:1em;} ol.dataList li:after{content:" -----------------------------";>
No.1です。 ＞サイズや色などの種類の数が違う為に並べるときの数にも違いが出てくる 　ということは、 「商品リスト」「種類が違う物がある」 　から、HTMLは２階層のリストとしてマークアップすることになりますね。どのようにプレゼンテーションするかはHTMLを書くときは、一切気にしない・・・くらいの気持ちで。 ★「1列目】_靴下A_1赤色_2白色_3黄色_4緑色、【2列目】靴下B_1赤色_2白色、【3列目】靴下C_1赤色_2白色_3黄色…のように商品によって」 ですから、率直に <div class="productList"> <!-- 商品リストを示す要素なんてないのでclassを併用したdiv要素でマークアップします。--> ＿<ol><!-- 序列リストにしておきます --> ＿＿<li>靴下A ＿＿＿<ol> ＿＿＿＿<li>赤色</li> ＿＿＿＿<li>白色</li> ＿＿＿＿<li>黄色</li> ＿＿＿＿<li>緑</li> ＿＿＿</ol> ＿＿</li> ＿＿<li>靴下B ＿＿＿<ol> ＿＿＿＿<li>赤色</li> ＿＿＿＿<li>白色</li> ＿＿＿</ol> ＿＿</li> ＿＿<li>靴下C ＿＿＿<ol> ＿＿＿＿<li>赤色</li> ＿＿＿＿<li>白色</li> ＿＿＿＿<li>黄色</li> ＿＿＿</ol> ＿＿</li> ＿</ol> </div> だとして div.productList{width:648px;border:solid 1px gray;} div.productList ol,productList ol li{list-style:none;margin:0;padding:0;} div.productList ol li ol{margin-left:40px;} div.productList ol li ol li{width:150px;height:150px;float:left;border:solid 1px; gray;} div.productList ol li ol:after{content:"";display:block;clear:left;} とか・・・ もっと増えたら２段になる。
No.1です。 　せっかく仕様書の存在をお知らせしたので、御自身で調べてください。(^^)絶対にそのほうが身につきます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 6.2.1 'inherit'値 　各プロパティは、カスケードされた値'inherit'を持ってもよい。この値は、与えられた要素に対して、プロパティが要素の親の算出値を指定値として取ることを意味する。'inherit'値は、値の継承を強制するために使用でき、正常に継承されないプロパティにも使用できる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Assigning property values, Cascading, and Inheritance - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#value-def-inherit )］より 　直近の親コンテナブロックで、指定された本来は継承しないプロパティを強制的に継承させるのがinheritですよ。もし親要素で他の値が指定されていると、left:プロパティの初期値(auto)に戻りません。 　継承やカスケードを大きく誤解されているようです。復習しましょう。 div#test {} ↓ body#top div#test {} は継承ではありません!!! <div style="border:solid 2px red"> 　<p style="border:inherit">なんたらかんたら</p> 　<p style="border:inherit;border-color:green">なんたらかんたら</p> </div> が継承です。
No.2です。 サブタイトル、小見出しであれば<h1-6>に含めれば良いですが、 導入句を<p>で書くと、本文の1段落目なのか、導入句なのかの区別がつきません。 <h1>見出し <span>小見出し</span></h1> <p>導入句</p> <p>本文・・・ そこで、見出しと導入句を<div>で囲ってグループ化させます。 <div> 　<h1>見出し <span>小見出し</span></h1> 　<p>導入句</p> </div> <p>本文・・・ <p>本文・・・ このままでは見出しと本文が別のグループに入っているように見えます。 そこで、全体を１つのグループ化させます。 <div> 　<div> 　　<h1>見出し <span>小見出し</span></h1> 　　<p>導入句</p> 　</div> 　<p>本文・・・ 　<p>本文・・・ </div> さらに、各グループの呼び名を明示して完成です。 （必要があればフッター（footer）、補足・注釈（aside）などを追加） <div class="section"> 　<div class="header"> 　　<h1>見出し <span class="subtitle">小見出し</span></h1> 　　<p class="introduction">導入句</p> 　</div> 　<div class="main"> 　　<p>本文・・・ 　　<p>本文・・・ 　</div> </div> 近い将来、本文を囲むグループに正式な名称（<main>タグ）ができるかもしれません。
では、いくつかチェック点を挙げます。 (1)拡張子.xlsと.xlsxの違い…2003までは.xls、2007以降は.xlsx。よくある間違いとして、人から貰った新バージョンのファイルを旧バージョンで開こうとしてエラーになるケースがある。拡張子で見分ける。 (2)半角と全角の違い…ファイル名以外は全て半角。\や:や"など、記号が全角になっていないか確認する。 (3)マクロの自動記録をしてみる…表示タブ→マクロ→マクロの記録→適当な名前をつけて記録開始→目的のファイルを開く→確かにそのファイルが開けた事を確認し記録終了→そのファイルを閉じる→表示タブ→マクロ→マクロの実行→さきほど名前をつけたマクロを実行→無事目的のファイルが開けたら、VBEを開き、今記録したマクロ名を指定して内容を確認する。
CSSファイルの階層が変わったのですから、それらのCSSファイルが参照している画像ファイルへのパスを変更する必要が出てきます。 例えば、background-image: url(../images/bg_wrap.png); これを background-image: url(./images/bg_wrap.png); のように変更するという意味です。
私自身も今、レスポンシブに対応するサイト制作のため色々と調べているのですが、 実機をエミュレートできるサービスがNTTレゾナントで始まっています。 http://appkitbox.com/testkit 参考になさって下さい。
問題はCSSの切り分け方と順番ですね。 まずCSSのルールですが、基本的に後に書いたスタイルが優先されます。 それは良いですよね？ で、ご質問者様のheadでのmedia指定ですが、 min-width:1024px→min-width:768px→min-width:480pxと指定します。 この場合注意しないといけないのは、すべてmin-widthによる指定なので、結局min-width:480pxでのCSSに指定したものは、480px以上の場合必ず適用されると言うことです。 考えてみれば当然です。 min-width:480pxって指定しているんですから、横幅が1024以上のPC画面でも、もちろん横幅480px以上あるわけですから、適用されるに決まってます。 そして、先ほど書いた、CSSは後の方が優先されるルールです。 この場合、smart.cssが後に読み込まれるので、layout.cssよりsmart.cssが優先されるのは当然です。 なので、この場合、 min-width:1024px→min-width:768px→min-width:480pxではなく min-width:480px→min-width:768px→min-width:1024pxという順番で指定した方が良いと言うことです。 PCから記述したい場合は、 layout.css→media制限なし tabletcss→max-widht:1023px smart.css→max-widht:767px という感じで指定します。 ご参考まで。
javascriptが使えない前提でページをかき つかえる環境のブラウザを別ページに飛ばせばよいでしょう もしくはnoscriptタグのなかでmetaタグで飛ばす手も考えられます <noscript> <meta http-equiv="refresh" content="0;URL=hoge.htm"> </noscript> いずれにしても環境依存なので、きっちりやるなら トップページにPC用、スマホ用、ガラケ用のページへのリンクを貼り ユーザーに任意で選ばせることです
HTMLのバージョンには関係ないです。 ＞firefoxではfontにアンチエイリアスが掛かる一方、IEでは掛からないのですが、 　それも違います。私のWinには、TrueTypeのヒラギノ角ゴ Pro W3ありませんから、firefoxとIEは同じです。 　これは、ClearType( http://ja.wikipedia.org/wiki/ClearType )フォントの特性です。 　擬似的にアンチエイリアスをかける手法として 　⇒“ＭＳ Ｐゴシック” をメイリオみたいにアンチエイリアスさせるCSS3ハック | Webロケッツマガジン( http://webrocketsmagazine.com/entry/20120206/antialias-mspgothic-css-hack.html ) 　フォントのアンチエイリアスなんて、本当に些細な枝葉末梢の問題です。視覚弱者にはアンチエイリアスは見難くなります。ウェブの最重要課題は『HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )・・・・』 　 　サイト作りで最も重要なのは、 ★どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。( https://support.google.com/webmasters/answer/35769?hl=ja#3 ) 　なのですよ。
「エラー: お使いのブラウザは Cookie をブロックしているか、Cookie に対応していません。WordPress を使うにはCookie を有効にする必要があります。」という表示が出たら、そのまま、もう一度エンターをクリックしてみてください。
HTML側に問題があることが多いです。DOCTYPEスイッチを標準モードで起動するように書き加えて 　⇒DOCTYPEスイッチ－HTMLの基本( http://www.htmq.com/htmlkihon/302.shtml ) 将来性を考慮すると、HTML4.01strict、すなわち <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> ついで、 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力(右上)で大きな減点が無いように修正します。 　ここまではHTMLを作成するときの基本です。 　その上で、JQeryなりCSSを導入していきましょう。これでほぼ100%解決するはずです。
質問と絵が一致してない？？ 　ひょっとして、タブ(tab( http://dictionary.goo.ne.jp/leaf/ej3/84023/m0u/tab/ ))じゃなくて、タグ(tag( http://dictionary.goo.ne.jp/leaf/ej3/84132/m0u/tag/ ))のこと 　サムネイル(thumbnail( http://dictionary.goo.ne.jp/leaf/ej3/86164/m0u/thumbnail/ ))じゃなくて、アイコン(icon( http://dictionary.goo.ne.jp/leaf/ej3/42520/m0u/icon/ ))、いわゆるファビコン(Favicon( http://ja.wikipedia.org/wiki/Favicon )) 　質問は、ファビコンを指定する方法ですか？ 　上記Wikiに詳しい説明がありますが、アイコンエディタでアイコンを作成してサイトに置き、HTMLの<head></head>内に <link rel="SHORTCUT ICON" href="/favicon.ico"> <link rel="ICON" href="/favicon.ico"> とでも、そのファイルへのパスを支持しておけば良いです。 　アイコンエディタは色々ありますから探してください。 　⇒アイコンエディタ - Google 検索( https://www.google.co.jp/search?q=%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF
　スタイルシートにしろHTMLにしろ、学ぼうと思ったら、何よりも先に仕様書に一応目を通しておく。勉強だっていきなり問題集から始めないでしょ(^^) すくなくとも 　いずれも邦訳--今のところウェブ標準--- ・HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.htmloc ) ・Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) 　ここに、こんな掲示板で得られる断片的であやふやな情報ではなく、正確な情報があります。 *は 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html ) 　→5.3 全称セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html#universal-selector ) です。詳細度は 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html ) 　→6.4 カスケード処理( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#cascade ) 　　→6.4.3 セレクタの詳細度を計算する( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#specificity ) あたりです。 　CSS2では、セレクタを記述する際に基点となるセレクタから書き始めることになりました。CSS1で、.headerと書かれていたものが、div.headerと書くことになった。CSS1との整合性のために、詳細度は0のセレクタとして*(全称セレクタ)が導入され、.headerは、*.headerと一旦解釈される。 * { margin: 0; padding: 0; } 　は私は使用しません。なぜなら、ブラウザの持つすべてのスタイルシート HTML 4のためのデフォルトスタイルシート( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/sample.html ) 　におけるmargin,paddingをすべて上書きしてしまうため、要素すべてに再設定しなければならなくなり、スタイルシートが肥大化・混沌として非効率だからです。 *を他に変えてCSSを組むことはできないのでしょうか？ *{} は詳細度が0000ですが、p{}とすれば詳細度が0001になります。私は必ず書いています。 html,body{margin:0;padding:0;} p{margin:0;text-ndent:1em;line-height:1.7em;} というふうに・・ 　セレクタや詳細度、カスケーディングの仕組みは、CSS(カスケーディングスタイルシート)にとって肝です。ここを完全に理解しておかないとスタイルシートは書けませんよ。
上からですか？プロの人からしたら素人の質問が的を得なさすぎて若干イラッと来てしまうのはしょうがないと思います。 それでも答えてくれているんですからとても良い方だと思います。 ググれ。 とかで解答が終了してるわけでもないですし、むしろ真面目に質問者さんをスキルアップさせたいと思っているからこその厳し目の言葉な感じがします。
HTTP要求ヘッダに含まれる、 firefox User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:26.0) Gecko/20100101 Firefox/26.0 iphone5 User-Agent: Mozilla/6.0 (iPhone; U; CPU iPhone OS 6_0 like Mac OS X; ja-jp) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/6.0.0 Mobile/8J2 Safari/7875.18.5 　すなわち、サーバーの.htaccessなり、HTTP_USER_AGENT--(CGI,PHPなど)でHTML出力を変更しています。それ以上はわかりません。 　この方法は、あまり感心しません。新しいuserAgentが登場するたびに、その指示を書き換えなければならない。膨大なユーザーエージェントに対応できない。現に携帯電話やメジャーでないユーザーエージェントを指定するとパソコン用と同じものが返ってきます。 　firefox + FireMobileSimulator( https://addons.mozilla.jp/firefox/details/8519 )で確認!! 　また、複数のコンテンツを作成する必要があるなど、HTML本来の 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.2.1 )］より 　に反するからです。
@charset "utf-8"; です。
上げていらっしゃった条件に当てはまるようなものだと、こういうものがあるみたいでした。 ○PC・スマートフォン対応　動画配信・販売システム【ソーシャルキャスト】 http://socialcast.jp/ レンタル形式で借りるか、ライセンスを購入？するかで利用できるようです。 詳しくは問い合わせて頂いた方が良いと思うのですが、さっと見た感じおっしゃっていた条件は満たしていそうです。 価格もSI会社規模の費用では無いみたいですね。 その他だと、以下のようなものでダウンロード型の動画サイト構築は出来るみたいです。 ○デジタルコンテンツ王 http://haishin.tv/ ダウンロード販売で、Windowsメディアのみということみたいです。 価格はさっきのものと同じ程度か少し高い程度のようです。 ○ムービーコマース http://movie-commerce.com/ ダウンロード販売みたいです。価格はのってないので分かりません。
先ほどは横幅と誤解して筋違いの回答をしたようで・・ ulは、ブロック要素ですがそれ自体のサイズは抱合している要素に依存します。 したがって、高さはline-height:で指定しないとなりません。line-height:は継承されますので ul{line-height:40px;} とするのが正しい方法です。 また、ul{ border:solid transparent 1px; padding:20px 0; } とborderを指定すると背景色/画像はborder辺の内側になります。 　ul自体に高さが存在しないのは、含まれるli(リストアイテム)要素をabsoluteなどで独立させると、高さが消えてしまうことでわかるでしょう。 　詳しくは 　⇒8.4 パディングのプロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/box.html#padding-properties )
javascript(またはjquery。jqueryはjavascriptを使いやすくするライブラリ)を使用して、ホバーしたタイミングでopenMegaというクラスを付与してスクロールダウンアニメーションで表示させているんですね。 つまり、javascriptでCSSを操作しています。
細かい修正 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力 ★W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_input+with_options ) でチェックすみ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>サンプル</title> <meta name="author" content="ORUKA1951"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > <link rel="START" href="../index.html"> <style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} div.header,div.section,div.footer,div.footer div.nav ol{ width:80%;min-width:420px; margin:0 auto;padding:1px; background-color:white; } div.header{height:100px;} div.section{margin-top:30px;} div.footer div.nav{position:absolute;top:100px;left:0;width:100%;} div.footer div.nav ol li{margin:0;padding:0;} div.footer div.nav ol{ list-style:none;text-align:center;font-size:0; background-color:aqua; } div.footer div.nav ol li{ display:inline-block;width:105px;height:30px; position:relative;font-size:16px; } div.footer div.nav ol li a{ display:block;width:100%;height:100%; overflow:hidden;text-indent:-20em; } div.footer div.nav ol li ol{ position:absolute;top:30px;width:105px;margin:0;padding:0;min-width:0; display:none; } div.footer div.nav ol li:hover ol{display:block;} div.footer div.nav ol li ol li{height:17px;display:block;} div.footer div.nav ol li a{background-image:url(./images/menue.jpg);} div.footer div.nav ol li a[href="/"]{background-position:0 -2px;} div.footer div.nav ol li a[href="/News"]{background-position:-105px -2px;} div.footer div.nav ol li a[href="/Products"]{background-position:-210px -2px;} div.footer div.nav ol li a[href="/Products/P1"]{background-position:-210px -102px;} div.footer div.nav ol li a[href="/Products/P2"]{background-position:-210px -150px;} div.footer div.nav ol li a[href="/Support"]{background-position:-305px 0;} div.footer div.nav ol li a[href="/"]:hover, div.footer div.nav ol li:hover a[href="/"]{background-position:0 -36px;} div.footer div.nav ol li:hover a[href="/News"], div.footer div.nav ol li a[href="/News"]:hover{background-position:-105px -36px;} div.footer div.nav ol li:hover a[href="/Products"], div.footer div.nav ol li a[href="/Products"]:hover{background-position:-210px -36px;} div.footer div.nav ol li a[href="/Products/P1"]:hover{background-position:-210px -119px;} div.footer div.nav ol li a[href="/Products/P2"]:hover{background-position:-210px -169px;} div.footer div.nav ol li:hover a[href="/Support"], div.footer div.nav ol li a[href="/Support"]:hover{background-position:-305px -36px;} div.footer div.nav ol li a[href="/"]:active{background-position:0 -68px;} div.footer div.nav ol li a[href="/News"]:active{background-position:-105px -68px;} div.footer div.nav ol li a[href="/Products"]:active{background-position:-210px -68px;} div.footer div.nav ol li a[href="/Products/P1"]:active{background-position:-210px -135px;} div.footer div.nav ol li a[href="/Products/P2"]:active{background-position:-210px -185px;} div.footer div.nav ol li a[href="/Support"]:active{background-position:-305px -68px;} --> </style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/News">News</a></li> ＿＿＿＿<li><a href="/Products">Products</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="/Products/P1">P1</a></li> ＿＿＿＿＿＿<li><a href="/Products/P2">P2</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Support">サポート</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿</div> </body> </html>
パンくずリストにpadding加えても、パンくずリストが広がるだけで背景は広がらないんじゃないですか？ まず「上部にの背景」ってどれのことですか？
optionに画像を使いたい場合はjQueryを使えばいけます。 http://www.syboos.jp/jquery/doc/select-with-image-by-jquery-css.html
その部分のHTML(DOM)が分からないと・・ 　特に、HTMLが文書構造ではなく、このようにプレゼンテーション(デザイン)目的に書かれているとなおさらです。 ・改行させたくなければ、display:inline-block;＋white-space:nowrap;、又は縫合ブロック幅を固定する。 ・ディスプレイ幅が狭くなると折り返して表示させるほうが横スクロールをしなくてすむので、ユーザーインターフェースを考慮すると良いはずですが？？ ・折り返したくないときはリキッドを使ってブロック幅が全体の幅に合わせて縮小させるのがセオリーですが？ clip: auto !important;　なぜ!important?詳細度が0030なので要らないと思うけど? 　　・・・基点となるセレクタが書かれていないので分からないけど
１） 　非公開コメントを書きたい方は 　お手数ですが○○をご使用ください 　って書く ２） 　頑張って手直しする ３） 　ちゃんと表示されるテンプレートを使用する こんなとこじゃないかしら？ たぶん、レイアウト的に無理があるから 表示されないんじゃない？ とか思うんだけど
この程度でしたら、ulにtext-align:center;をして、liにdisplay:inlineすればいいんじゃないでしょうか？
Webサイトのデータは軽い -> 制作用PCは低スペックでいい というのはシロートのサイト制作の話ですｗｗｗ 真に受けてはいけません。 現在のサイト構築では、 ・HTMLエディタ（SublimeやCoda、Creamweaverなど） ・あるいは統合HTML/PHP/Javascript開発環境（NetBeansやVisualStudioなどのデバッガ） ・ビルトインサーバ（ApacheとかIIS Express） ・Photoshopやファイアワークス（画像スライス） ・データベース（MySQL） あたりを一度に動作させて全体的に構築していきます。 いちいち個別に立ち上げていたら日が暮れます。 メモリ6GBでも、バックグラウンド動作のアプリが多ければ、3GBくらいに使用メモリが落ちるのはよくある話です。 最近では、64bit CPUにメモリを8GB積み、256GBのSSDを積んだマシンが標準みたいな感じですね。 そう！　スタバでドヤリングしている連中のMacBookAir（MBA）の仕様です！ あのマシンが選ばれるのにはそれなりの理由があるわけです。
スタイルシートの場合、tableとtd,thのborderは別の物として扱われます。 出力されるHTMLのDOMを参考に、セレクタを記述し該当するtable要素とセル要素のborderを消すと良いです。
この部分、スタイルシートで最も大事な部分 style="" /* a=1 b=0 c=0 d=0 -> 詳細度 = 1,0,0,0 */( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#specificity ) 　詳細度やカスケーディングの仕組みを知らないと、CSS(カスケーディングスタイルシート)は使えません。 　⇒5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html ) 　⇒6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html ) は、プロパティ覚えるより先!!
1.　ブラウザが、その指定に対応しているかいなかの問題で、HTMLとCSSのバージョンには関係ありません。HTML2で書かれたものでもCSS4でデザインできます。 2.　@charsetは、HTMLのmetaと同様、実際に書かれている文字コードとあわせます。基本はHTMLともあわせたほうが安心です。 　Windowsじゃあるまいし、拡張子は一切関係ありません。.cgiだろうが、htmlだろうが関係ないです。HTTP応答ヘッダで指定されていればそれに従います。CGIから、content-type:text/csssと出力させても良いし、.htaccessで指定しても良い。 3. CSS3ではmediaqueryの機能が追加されましたから、必要ならそれが使える。
＞文法解析エラーが発生しました 　これ以上の説明は無いです。文法が間違っている。 　　具体的には、*font-sizeというプロパティはありません。宣言ブロックは{}で囲います。 　⇒Syntax and basic data types - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/syndata.html )
>左端、右端のli要素にそれぞれidを付けてborderを指定したところイメージ通りに出来ました。 例えば、ulの左右にborderを付ければ、は不要になりませんか？または、last-childを使うとか。デザインの為のidやclassはいかがなものかと存じます。 >しかしどうしてa要素のborder-left（right）とli要素のborder-left（right）がかぶらないのでしょうか？？ 完全な入れ子ですから、被りません。margin.borderの中にwidthがありますので、border同士は特別な事をしないと、かぶらないです。また、a要素には文字のみならず範囲でリンクを反応させたい為、display:blockを当てる事が多いですが、その場合はwidth:100%を指定しているようなものです。 >また、このような方法は一般的なのでしょうか？？ 文章構造を利用してのcssは一般的です。
<head>～</head>内に、 <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css"> <!-- body{ background-color: aqua; animation-name: anime1;/* どのアニメーションを使うか */ animation-duration: 10s;/* 動作時間 */ animation-timing-function: ease;/* 動作の形 */ animation-iteration-count: 1;/* 何回??? */ } @keyframes anime1{ 0% {background-color: blue;} 100% {background-color: aqua;} } --> </style> を加える。 古いブラウザ対応のためにベンダーフィックスが必要になる場合もあります。 また、極めて簡便な方法として、背景を一回動作のアニメーションGIFにするという奥の手もあります。
他の方へのお礼コメントについてで恐縮ですが ＞また、WEBページを印刷するとき自宅のプリンターで綺麗に印刷できるか心配です。 ＞多少すれていても仕方が無いですかね？ 多少、というのがどの程度かにもよると思います。 ここ数年のうちに発売されたようなプリンターであれば、その機種の「最高画質」で印刷すればまず問題ないとは思います。 ただ、メンテナンスが悪かったりしてぐっちゃぐちゃ、更に藁半紙に印刷とかだとさすがにまずいかと。 この辺り、個々の感覚になってくると思うので、それも審査の基準になるかもしれないです。 （普通の感覚なら問題にならないことではありますが、この「普通」というのも逸する人っていますので） ＞CMYKに変換してから印刷すればいいのですね。 家庭のプリンターで印刷するような場合はＲＧＢで問題ないです。 （超超高性能な印刷機をご家庭で所有している場合は別ですが）
position:fixed; です。 　⇒Visual formatting model - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visuren.html#propdef-position ) 　視覚系メディアに対しては表示域を基準にします。 　印刷メディアに対しては各ページに印刷されます。
　まず仕様書を読んでおきましょうね。あなたの疑問は【すべて】【詳しく】【正確に!!】に書かれています。スタイルシートにしろHTMLにしろ、まず仕様書に目を通しておくこと。そうすれば分からない時に何処を読めばよいかがわかります。 　⇒HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) ＞id"left-sidebar"とクラスtoc-itemは 　違います。!!子孫セレクタでつながってますから、一意セレクタ(#left-sidebar)の子孫( )のクラスセレクタ(.toc-item)を持つ要素と言う意味です。「id"left-sidebar"とクラスtoc-item」の場合は #left-sidebar,toc-item{}と書かれているはずです。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html ) はスタイルシートを使用する場合の必須で重要な部分です。font-size: 12px;というプロパティの説明より前に、ページ数を割いて書いてある。 ★それは古い書き方です。現在ウェブ標準とされているCSS2.1では、基点となるセレクタを書かなければなりませんから、 *#left-sidebar *.toc-item { font-size: 12px;} が正式な書き方です。*は全称セレクタで詳細度は0です。 ★#left-sidebar .toc-item のようなidやclass名は望ましくありません。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』と書かれているようにね。 class*=hide 　そのような書き方はありません。属性セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html#attribute-selectors )とクラスセレクタは同じものですから .abc は、*[class~=abc] と言う意味です。
こちらのほうが分かりやすいかな？？ body{counter-reset: Section 1;} div.section h2{ counter-reset: subSection 0; counter-increment: Section 1; } div.section div.section h3{ counter-reset: subSubSection 0; counter-increment: subSection 1; } div.section div.section div.section h4{ counter-increment: subSubSection 1; } div.section h2:before { content: counter(Section) ": "; } div.section h3:before { content: counter(Section) "-" counter(subSection,upper-alpha) ": "; } div.section h4:before { content: counter(Section) "-" counter(subSection,upper-alpha)"-"counter(subSubSection)": " ; } いずれにしても、counterはとってもよく使用するスタイルシートですから、身につけましょう。目次も利用できますが、普通にOLで良いでしょう。
テキストの上をpaddinかmarginで広げる。
HTML4.01の時代には、スタイルシートで 　⇒外部スタイルシート( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.3 ) 　⇒カスケードするスタイルシート( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.4 ) に詳しく書かれています。 　基本的には、基本的なmedia別のスタイルシート ・media="screen"　media="print" 程度はほしい ・ついで、 　1) 固定スタイルシート 　2) 優先スタイルシート 　3) 必要ならCSS3/HTML5のmediaqueryです。 @importは、細切れにするだけですから無関係 .htaccess、新しい端末が登場するたび設定を変更しなけりゃならないので非実用的 ★基本はリキッドで作成して、それでもカバーできない時にMediaqueryを使うので良いかと。 　デザインなんて所詮、作者の自己満足に過ぎません。大事なのはコンテンツです。デザインで訪問するのじゃなく、内容がも止めている物だからですよ。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HTML/nav/navigation1.html ) 　このページ、ブラウザの表示メニューからスタイルシートを選択するとデザインが変わる。しかし印刷するとURLまで印刷される・・。多くのデザインはリキッドなので、そのままスマホも幅広ディスプレイに対応している。
キャッシュが残っていたためでしょうか？ ブラウザの更新「Ctrl+R」か、ブラウザを立ち上げなおして確認してみてください。 変わっていませんか？
最終的なHTMLにスタイルを指定すれば良いです。 <div style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 106px; height: 24px;" id="___plusone_0"> <iframe・・・【中略】・・・></iframe> </div> とかになっているはずです。 　style属性で指定されているため、詳細度が1000で上書きできない。 　⇒（HTMLでは、要素の"style"属性値は、スタイルシート規則である。これらの規則はセレクタを持たないので、a=1、b=0、c=0、かつd=0。）( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#specificity ) 　よって、著者のimportant宣言( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#cascading-order )を使用します。 HTMLのソースを見て、上記なら <style type="text/css"> <!-- #___plusone_0{margin-left:100px!important;} --> </style> firefoxをお使いだと思いますが、そのfirebugを利用して確認すると簡単です。
<meta charset="utf-8> の部分。ダブルクォーテーションが抜けてますよ。 誤：<meta charset="utf-8> 正：<meta charset="utf-8">
>私の会社はコーディネーターとデザイナーが別だったのですが… コーディネーターってなんですか？コーダーのことを言いたかったのでしょうか？ Fireworkの開発は実質終了しております。これからはフォトショで作るほうがオススメです。 質問について、Macでは[command]キー、Windowsでは[Ctrl]キーを押しながら、レイヤーパネルのレイヤーサムネールをクリックすれば、レイヤーが選択され、情報パネルで確認できます。 ちょっとした幅や高さの確認のときは[m]キーの長方形選択ツールを使います。1～2pxずれるかもしれませんが、5px刻み、10px刻みなどで作っている場合は問題ありませんので。もしくは拡大縮小、スペースキーを駆使してぴったり選択します。 ちなみに情報パネルは常に開いています。 あと、プロはペンタブで作業します。
simplest03_3cのスタイルシートで、h3.entrytitleを探してください。 見つけたらその下に以下のコードを追加してください。 h3.entrytitle { font-size: 100%; font-weight: normal; margin: 0 0 5px; padding: 0 5px; border-bottom: 1px #DDD solid; } /*ここから下の3行を追加*/ h3.entrytitle a { color:red; } 色についてはcolorで指定して変更してください。 がんばって良いブログを作ってくださいね。
＞border="2" bordercolor="red" ・border = pixels [CN] 推奨しない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/objects.html#adef-border-IMG ) ・bordercolorは存在しない属性です。 仕様書は、必ず目を通しておくこと。 書いたら Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力(右上)などでチェックすること 　そうしないと、とんでもない物を身につけてしまう。 　現状では ★HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1 ) 　は守りましょう。 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict ★200px×200pxの画像を./imagesに用意すること ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- p.test img{ border:solid lime 10px; border-color:red orange yellow lime; border-radius:10px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p class="test"><img src="./images/abc2.jpg" width="200" height="200" alt=""></p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
marginで詰めてみては如何でしょうか。 ul.navi { list-style-type: none; margin-left: -20px; } 数字は適当です。
CSSのbody部分にあるbackgroundの内容を変更します。 ■色の変更 background: カラーコード; 例 background: #ff0000; background: red; など ■画像へ変更 background: url(画像のURL); ■画像を縦にループ background: url(画像のURL) repeat-y;
z-indexで重なり順指定してみてはいかがでしょうか？
とっても簡単で、単純にwidth:min-width:max-width:および、margin:の値がautoです。 　御存知のとおり、スタイルシートを利用する最大の目的は、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」の分離です。HTMLには文書構造だけを記述して、プレゼンテーションはスタイルシートに任せることで、『スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )』 ごく簡単な例: ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.section,div.footer{ width:80%;min-width:630px;max-width:900px; margin:0 auto; padding:5px; } div.section{min-height:400px;} body{background-color:silver;} div.header{background-color:lime;} div.section{background-color:white;} div.footer{background-color:aqua;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
クラス「.imagebox_a 」に横幅指定がないので width:●●px;というのを追加すれば真ん中に寄ります （例） .imagebox_a { width:800px; display: block; margin-left: auto; margin-right: auto; } .imagebox_aが適用されている<div>はブロックレベル要素なので 横何pxなのか指定がなければ自動的に 右端～左端一杯にその枠が設置されてしまいますので。 800pxというのは適当に入れたので適宜変えて下さい。
参考URLを載せておきます。 HTMLの知識がないとのことですが、今後のためにも勉強されることをお勧めします。
高さが決まっていない要素の縦方向中央揃えは実は結構難しいことです。 親要素の高さが決まっていて、中の画像が1行以内で収まるという限定的な条件でしたら下記で行けます。ちなみに1行以内で収まるというのは、画像が2枚以上の場合でも親要素に十分が幅があり画像が改行しないで済む状態です。 .box{ width:210px; height:90px; line-height:90px; text-align:center; } .box img{ vertical-align:middle; }
border-styleの設定で表示されるのではないでしょうか。 .top td { border-color : red; border-width : 1px; border-style: solid; } または .top td { border: solid 1px #f00; }
> WINDOWSのようにサポートが切れると安全にネットが出来なくなったりすることはあるのでしょうか？ Apple社がセキュリティ問題の修正を出さなくなったら、インターネットに接続するのは危ないと思ったほうがいいでしょう。 > ある場合こちらはあと何年使えるのでしょうか？ 誰にも分かりません。Apple社は、あるバージョンのOSについていつまでセキュリティ問題の修正を行うのかを明示していないからです。 現在最新のOS Xは10.9ですが、その次のバージョンをMB881J/Aにインストールできるかどうかもまだ不明です。 > つまり最低5年くらいは問題なくネットが出来るということですね。 そのような保証はどこにもありません。 > そもそもWEBサイトチェックは最新のOSでないといけないのでしょうか？ OSのバージョンと言うより、使用するブラウザのバージョンが問題だと思います。 > クノッピックスで起動してOSX10.9は無償にするなども出来るのでしょうか？ OS X 10.9(Mavericks)をインストールするためには、OS X 10.6(Mountain Lion)以降が動作していてインターネットに接続している必要があります。 http://www.apple.com/jp/osx/how-to-upgrade/
＞自分のパソコン 　だけで良いのですよね。ユーザースタイルシートで、 セレクタ{background:repert-x!important;} とか・・・セレクタはその要素を指定するものを記述する。 　⇒5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html )
なぜ仕様書を読まないの？？ 　こんなところで聞いたって正確な情報は不可能 　⇒10.8 行の高さの計算: 'line-height'、'vertical-align'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visudet.html#line-height ) 　line-heightは、本来font-sizeよりも大きいのですが、このように小さな値が指定されていると期待と異なる表示になる事があります。 　特に、IEの互換モードでは、ボックスの寸法をボーダー辺で解釈します。 　IEの場合、ウェブ標準で動作するようにDOCTYPEを記述すると、ウェブ標準で表示されるはずです。 　しかし、行中央に表示させる場合は、heightとline-heightの値を同じにすべきです。 なお、font-familyには、必ず総称ファミリ名(generic-family)を書かなければなりません。 　
うーん、なればこちらも力技ですｗ lightbox.jsを開き、「lb-image」を検索してみてください。 <div class='lb-container'><img class='lb-image' src='' />～と、 htmlそのまんまなやつがあります。 imgの直後に空タグを入れ、 <div class='lb-container'><img class='lb-image' src='' /><span></span> cssでposition:absolute;height:100%;width:100%;を指定。 imgのちょうど全部を覆う形にしたうえで、背景画像としてキラキラを入れる感じです。 やや敷居が高く感じますが、視認性が悪いだけで編集はわりかし簡単です。 ちょっとジャンル変わってしまいますが、参考までにどうぞ。
再度回答させていただきます。 ソースを拝見させていただきましたが、崩れる原因をいくつか。 検証環境が手元にないので数字だけの話になってしまいますが； ■floatをしている親要素の幅がいっぱいになっています。 └IEなどの場合、計算上は100％でもfloatが崩れます。 　div#listの横幅をもう少し広げてあげてください。 ■ソース上のタブ、インデントの問題 └リストタグはソース揃えのための余白がちょっとだけ出力されてしまいます。 　リストタグはソース上は空白を開けず揃えず連結して書いた方が良いです。 ■div#list直下ulへのブロック要素指定 └こちらはそれほど重要ではありませんが、一応 　display:block;width:100%; でも、一番手早いエラー回避はtableタグを使うことかもしれませんｗ スマホ対応など考えなければブラウザ間の差異も少なく、安全かもです。
ちょっとした解説 ＞レイアウト自体の理屈は理解しました。 御存知のように、ブロック要素は幅を%指定されるとき、直近のstatic以外のブロック要素の幅を参照します。 　⇒10.3.7 絶対配置の非置換要素の場合( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visudet.html#abs-non-replaced-width ) 　ヘッダーブロックのpositionの指定がないため、staticのままですから、ルート要素html,body要素のサイズに従います。 　そのためにdiv.navをposition:absolute;width:100%;に指定してある!! 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　そのうえで、div.nav olを他のdiv.header,div.section,div.footerと近い値にすれば、背景はきちんと背景だけウィンドウ一杯に広がり、ナビゲーションはそれらと同じサイズになる。 　先のスタイルシートはリキッドですから、standard.cssの後半を div.header div.nav ol li{ display:block;float:left; width:20%;border:solid 3px gray; border-width: 0 2px; position:relative; } div.header div.nav ol li+li{ border-left-width:0px; } div.header div.nav ol li a{ display:block;width:100%;height:100%; font:bold 16px sans-serif; line-height:40px; text-decoration:none; } div.header div.nav ol li a:hover{color:yellow;} とすれば、ウィンドウ幅が何であれスマホでもきちんと期待通りに表示されるはずですね。
keep-allは、CJKは改行しない、非CSKはnormalと同じです。 ＞word-breakは言語に依存しますけど・・ 　lang="ja" だと意味ないです。 ‘word-break’の値はnormal | keep-all | break-all　( http://www.w3.org/TR/css3-text/#word-break-property )で、 W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_input+with_options )で、検証してもエラーにはなりません。 p.sample1 {word-break:normal;} p.sample2 {word-break:keep-all;} p.sample3 {word-break:break-all;} 　単に綴りを間違えているとか、そのツールが間違っているとか・・
>base.cssの記述をcenterに変えると他のページのテキストまで中央揃えになってしまいました＾＾； base.cssにどんな記述をされているのかがさっぱりわかりませんが... liをブロック要素にして、センタリングすれば良いと思います。 例） .bxslider ul li{display:block; margin:0 auto;}
ググったらすぐに見つかると思われますけれど。 RSSフィード　　作成 一秒もかかりませんよ。
spanにdisplay:blockを指定すれば改行させることができます。
今のタグがわからないのですが、、参考までに。 <table border> <tr> <th>ヘッダー１</th> <td>データ１</td> </tr> <tr> <th>ヘッダー２</th> <td>データ２</td> </tr> <tr> <th>ヘッダー３</th> <td>データ３</td> </tr> </table>
　ヘッダー画像、サイドバーの意味が分かりませんが、そのサイトでは背景画像をコンテンツの表示幅に合わせてありますね。 　ソースを見られたらお分かりのようにシンプルです。 ★DIVをデザイン目的で使用されていますが、これはHTML4.01で否定され、HTML5では否定されますから、このような使い方は間違いですが・・ 　それを除けばまずまず・・かな HTML5未満では、「DIV要素はid属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )に使うとされていました。」 <body> 　<div class="header"> 　　<h1>ページ見出し</h1> 　　<div class="nav"> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　・・・・・ 　</div> 　<div class="section"> 　　　<p>本文</p> 　</div> 　<div class="footer"> 　</div> </body> HTML5だとDIVは原則使えません、代わりに文書構造を明確にする要素が追加されました( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements ) <body> 　<header> 　　<h1>ページ見出し</h1> 　　<nav> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　・・・・・ 　</header> 　<section> 　　　・・・本文・・・ 　</section> 　<footer> 　</footer> </body> というHTMLになるはずです。 それに対して、スタイルシートで div.header{ background-image:url(); background-size:cover;/* CSS3 */ } と背景画像と表示サイズを指定します。 [サンプル]★HTML4.01strict + CSS2.1 HTMLには、このように文書構造しか書きませんから、極めてシンプルです。とっても楽です。 ※タブは＿に置換してあるので戻す。 ※一部:は：(全角）に置換してあるので戻す。 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# )のDATAでチェック済み <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto：oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:900px;margin:0 auto;} div.header{ background:url(http：//www.bungyjapan.com/assets/elements/header_wrap.jpg); width:880px; height:190px;padding:50px 10px 0 10px; } div.header h1{margin:10px;} div.header h1 a{text-decoration:none;} div.header #nav ul,div.header div.nav ul li{list-style:none;margin:0;padding:0;font-size:0.9em;} div.header #nav ul{height:20px;line-height:20px;} div.header #nav ul li{display:inline-block;text-align:center;padding:0 5px;} div.header #nav ul li+li:before{content:" | ";color:white;} div.header #nav ul li a{color:white;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><a title="バンジージャパン" href="http：//www.bungyjapan.com/ja/index.php"> <img id="logo" alt="バンジージャパン" src="http：//www.bungyjapan.com/assets/logo.jpg"></a> <img alt="日本唯一" src="http：//www.bungyjapan.com/assets/tagline_ja.jpg" width="276" height="66"></h1> ＿＿<div id="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="/">ホーム</a></li> ＿＿＿＿<li><a href="/sites/">インフォ</a></li> ＿＿＿＿<li><a href="/booking/">予約</a></li> ＿＿＿＿<li><a href="/about/">バンジージャパン</a></li> ＿＿＿＿<li><a href="/gallery/">ギャラリー</a></li> ＿＿＿＿<li><a href="/bungy/">バンジーの話</a></li> ＿＿＿＿<li><a href="/blog/">ブログ</a></li> ＿＿＿＿<li><a href="/links/">リンク</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
　HTMLから復習ですね。そんなHTML書いてたらメンテナンスが大変になるしデザインの制約が大きくなるばっかりです。スタイルシートを使用してデザインする最大の目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」なのですよ。それなのにHTMLに構造以外のもの、デザイン的なものを書くことはしない。原則です。 ★原因はもちろん text-indent: -9999px; overflow: hidden; 　です。わざと消している。 単純にHTML4.01でしたら <body> 　<div class="header"> 　　<h1>見出し</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href='index.html'>Home</a></li> 　　　　<li><a href='navi1.html'>Navi1</a></li> 　　　　<li><a href='navi2.html'>Navi2</a></li> 　　　　<li><a href='navi3.html'>Navi3</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="section><!-- 本文 --></section> 　<div class="footer"><!-- フッタ --></div> </body> DIVやSAPNは「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )」のもので、wrapperとかはへん。HTML5では、代わりに「文書をよりよく構造化するために、( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )」新しい要素が追加され、DIVは原則として使わなくなります。 ちなみに、HTML5では、 <body> 　<header> 　　<h1>見出し</h1> 　　<nav> 　　　<ol> 　　　　<li><a href='index.html'>Home</a></li> 　　　　<li><a href='navi1.html'>Navi1</a></li> 　　　　<li><a href='navi2.html'>Navi2</a></li> 　　　　<li><a href='navi3.html'>Navi3</a></li> 　　　</ol> 　　</nav> 　</header> 　<section><!-- 本文 --></section> 　<footer><!-- フッタ --></footer> </body> そのうえで、スタイルシートはHTML4.01用でしたら <link href='./style_main.css' rel='stylesheet' type='text/css' media="screen"> <link href='./style_topNavi.css' rel='stylesheet' type='text/css' media="screen"> 　　印刷時には適用させたくないので・・ ★リキッドなのでスマホも幅広ウィンドウも対応してる。(ウィンドウ幅を変えて) ★HTMLの文書構造を見てセレクタを書くので、メンテナンスも楽なはず。 　継承する物は親に、同じ指定はグループ化して・・ html,body{ margin:0;padding:0; } body{ font-family: 'MS UI Gothic',"ＭＳ Ｐゴシック",sans-serif; /* 必ず総称ファミリ名を書く */ background-color:gray; } a:link{color:#000000;} /* underlineはデフォルトなので書かない! 書けばaに対して記述し継承させる */ a:visited{color:#990099;} a:hover{color:#ff0000;} div.header,div.section,div.footer{ margin: 0 auto;padding:5px; width: 80%; min-width:480px;max-width:900px; border-color:#cccccc; border-style:solid; background-color:white; } div.header{border-width:2px 2px 0 2px;} div.section{border-width:0 2px;} div.footer{border-width:0 2px 2px 2px;} /* --- nav ----*/ div.header div.nav{ position:relative; width:110%; height:40px; left:-5%;text-align:center; } div.header div.nav ol{list-style:none;font-size:18px;} div.header div.nav ol li{display:inline-block; width:20%;position:relative; line-height:40px; } div.header div.nav ol li a{ width: 100%;height:100%; display: block; color:#000000; } div.header div.nav ol li a[href='index.html']{background-color:#cc6672;} div.header div.nav ol li a[href='navi1.html']{background-color:#bf66cc;} div.header div.nav ol li a[href='navi2.html']{background-color:#6672cc;} div.header div.nav ol li a[href='navi3.html']{background-color:#66ccbf;} div.header div.nav ol li a[href='index.html']:hover{background-color:#ffd8dd;} div.header div.nav ol li a[href='navi1.html']:hover{background-color:#fad8ff;} div.header div.nav ol li a[href='navi2.html']:hover{background-color:#d8ddff;} div.header div.nav ol li a[href='navi3.html']:hover{background-color:#d8fffa;}
殆どがclassやIDを振ってCSSで処理しますね あとあと調整が面倒ですし全角空白を連続で入れるコーダーは みたことないです(笑) とりあえず最初に*{ padding:0; margin:0; }等ですべてを0にしてから 改めてclass,IDでマージンなどは調整します
自分で制作したフォント（著作権を所有しているフォント）か、 フォントデータ（フォントファイル）の「改変ライセンス」「再配布ライセンス」の両方を受けていれば問題ありません。 多くのフォントは再配布ライセンスしか提供されていませんし、中には再配布ライセンスさえ提供されていない物もあります（いわゆる直リンク専用）。 そのため、フォントデータの改変はライセンス違反（著作権法違反）となります。 フォントファイルの作成コストが大きいため、タイトル程度であれば画像で表示する方が費用も安く、相応の作り方をすればSEOやアクセシビリティーの問題にならない事が多いです。 とはいえ、フルAjaxやフルFlashで作成すれば、5～7MB程度のフォントデータは相対的に大きな物ではなくなります。 ただしアクセスした最初の数ページは、時間的にフォントデータをダウンロードできていないため、ブラウザデフォルトのフォントで表示される可能性があります。
%UserProfile%\hoge とすると、C:\Users\kinup78\hogeをあらわすとかそういう奴の事かな。 それは「環境変数」という。 ちなみに環境変数を前後のパーセントで表すのはWindows式で、LinuxなどUNIX風のOSだと環境変数は前にダラーをつける。%PATH%というのがUNIX式だと$PATHになるのだ。 一覧は、インストールされてるソフトによりけりなので一概には言えないな。「Windows 環境変数 一覧」とかで検索すれば色々出てくるだろう。
質問がどの部分を指しているのか意味が分かりませんが、divはブック要素ですから、 スタイルシートで変更しない限り『ブロックレベル要素は新しい行を開始し、行内要素は新しい行を開始しない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.3 )』はずです。 　スタイルシートで、displayの値を、inline、inline-blockなどに指定しない限り、ブラウザのもつデフォルトのスタイルで整形されます。 ★老婆心ながら、この手のサイト、余りはまらないほうが良いですよ。 　CSS3のcolumnを使ったレイアウトの説明ですが、1999年に勧告されたHTML4.01以来の「文書構造とプレゼンテーションの分離」が全くされていません。 DIVは『id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』 ですし、HTML5では、『Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/2012/CR-html5-20121217/grouping-content.html#the-div-element )---著者は、他に適当な要素がないときの最後の手段としてdiv要素を使用することを強く推奨する』言い換えれば原則DIVは使いません。 　デザインのためにHTMLを書いてはならない!!!という原則を外れています。 ★culumnは、単純に「段組」のための仕組みですから、単純にその要素をinline-blockにして整形すればよいだけです。 HTML5的に書くと <body> 　<header> 　</header> 　<section> 　　<ul> 　　　<li><img src="" width="" height="" alt=""> 　　　　　<p>説明</p> 　　　</li> ・・・・という形にHTML4.01でしたら <body> 　<div class="header"> 　</div> 　<div class="section"> 　　<ul> 　　　<li><img src="" width="" height="" alt=""> 　　　　　<p>説明</p> 　　　</li> になります。 それを単純に（細部を省くと） 　section ul,section ul li{list-style:none;margin:0;padding:0;} 　section ul{column-count: 3;} 　section ul li{display:inline-block;} ないし、 　div.section ul,div.section ul li{list-style:none;margin:0;padding:0;} 　div.section ul{column-count: 3;} 　div.section ul li{display:inline-block;} にすればよい。 　そしてこれは印刷には向かないので、印刷用は 　section ul,section ul li{list-style:none;margin:0;padding:0;} とか・・ 　もちろん検索エンジンには素のHTMLとして画像リストとして理解させることになります。
Lightboxというプラグイン(JavaScript)で導入可能です。 http://ja.wikipedia.org/wiki/Lightbox 最新版はLightbox2らしいです。(サンプルもあり) http://lokeshdhakar.com/projects/lightbox2/#download ブログやコミュニティサイトでは運営側で実装されている場合もあり画像アップロード時に自動で適用されたりします。個別での導入方法は別途『Lightbox2 使い方』などで検索してみて下さい。 ps 私もよく見かけてはいましたが実現方法がわからず１時間ほど探し続けていました。けっこう見当たらないものですね。。
Mac OSはAppleのハード以外では動作しないように作られています。 無理矢理稼働させている人達は居ますがライセンス違反です。 そういう目的だったら逆にMac買って、そちらにWindowsを入れてしまう方が 簡単です。 http://www.apple.com/jp/mac-mini/ MacOSの入った本体で5万円台ですから、Windows入ったPC買うのと 大差有りません。こちらに別途Windowsを購入して追加する
>html と body に height:100%; を指定しているので、 予想ではヘッダー用のdivが指定の高さで表示され、 次のdivが残りの高さ分一杯に表示。 まずこの予想の部分が間違っています。質問の通りに作って、高さ500pxの画面で確認した場合、html、bodyの高さは500px、ヘッダー60px、そしてその次のdivの高さも500pxで、60pxはみ出る形になります。height:100%というのは親セレクタに対しての100%です、残りの100%ではありません。 残りの高さいっぱいにしたい場合はcssのみではできません。JSを使うか、似たような見え方で違う組み方をするか…
読まれないです。 あくまでブラウザの問題で、ブラウザはページをレンダリングするために必要になったら、必要なものを改めてサーバーに要求します。 　ページを製作されているなら、firefoxはお使いでしょうから、Live HTTP headers( https://addons.mozilla.jp/firefox/details/3829 )と言うアドオンがありますから、それで確認いてみると良いでしょう。　Firebug ( https://addons.mozilla.jp/firefox/details/1843 )や FireMobileSimulator( https://addons.mozilla.jp/firefox/details/8519 )と組み合わせて確認すると良いでしょう。
一言でいうと、HSVのVが明るさのみを表現するのに対し、HSLのLは色味が変化するという事。 ・Hのレンジを0～360とする。 ・Sのレンジを0～100とする。 ・VあるいはLのレンジを0～100とする。 今、H、つまり色位相を赤に固定したとしよう。そしてSを50としよう。 HSVでVを0→100にあげていくと、0=くすんで黒味がかった赤→50=くすんで灰色味がかった赤→100=くすんで白身がかった赤と変化していく。 HSLでLを0→100にあげていくと、0=黒からだんだん赤がついていき、真ん中の50がくすんで灰色味がかった赤になるのはHSVと同じで、その後はだんだんと白に近づいていき、100=最終的には白になる。 次にSを100にしてVとLを上と同様に変化させてみる。 HSVは、0=白、ちょっとずつ赤味が足され、100で鮮やかな赤（RGBで言う#FF0000）になる。 HSLは、0=黒、ちょっとずつ赤味が足され、50=鮮やかな赤、ちょっとずつ白味が足され、100で完全な白になる。 Sを0にした例は面倒なので省く。自分で試して。 ん～まぁ数値だけで言うと、HSLではLが50の時にもっとも鮮やかになるのに対して、HSVではVが100の時にもっとも鮮やかになるって事なんだけど・・・・説明が難しいな。 ん～、 HSVは、Sが物体そのものの色の鮮やかさで、Vが物体にあたる光の量とでも言えばいいかな。Sが高ければ高いほど赤色が濃いのだけれども、どれだけ赤色だろうと光が無けりゃ真っ暗で、光が半分あたっている時は赤色も半分くらい。光MAXで完全な赤だ。 HSLは、Sが光の色（光の波長的は話をすると正確には全然違う）で、Lが光の量。光の量がMAXの半分の時に赤味がゼロならそれは灰色という事になる。 なんか結局それぞれがどういう条件の時にどうなるかを羅列しただけという気もする・・・・。というか最後の行は正確には完全な嘘なので余計混乱するかも・・・・。その辺はニュアンストークで受け止めてくれい。それかもうちょっと的確で詳しい説明をしてくれる人を待っておくれ。
私は初期化はしません。スタイルシートがとても煩雑になるからです。 CSS(カスケーディング スタイル シート)にはカスケーディングと言う命ともいえる仕組みがあって---それだからここまで主流になった---、ブラウザのデフォルトのスタイルシートはカスケーディングの最下位に置かれています。 　⇒6.4 カスケード処理( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html#cascade ) 　⇒HTML 4のためのデフォルトスタイルシート( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/sample.html ) 　これをすべてリセットしてしまうと、それらの要素が登場するたびにスタイルシートを書き加えなければなりません。例えば普通に序列リスト(OL)が現れた場合、何も書かなくても1,2,3・・と番号を振ってリストに整形してくれますし、引用ブロック(blockquote)が現れると左右の幅を縮めてくれますが・・それをすべて書かないとならなくなります。 ＞処理スピードが遅いですか? 　なりますし、そもそもスタイルシートの量が肥大する一番の要因となることもあります。 　私は、せいぜい html,body{margin:0;padding:0;font-family:******} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} 程度から書き始めます。 　
「ブラウザのキャッシュを活用する」は.htaccessと直接関係ありません。 HTTP応答ヘッダのCache-Controlのことですが、ショップサイトの場合は在庫や価格が変動する可能性があるので、これは短期間でユーザーごとに異なるものが保存されるようにしますので、触らないほうが良いです。 　それよりも、HTMLを見直したほうが良いです。 　例えば、HTMLには文書構造だけ記述して、プレゼンテーションはスタイルシートにすべて任せることで、ページを読み込むデータ量が圧倒時に少なくなります。いわゆる「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 多くの場合、著者はひとまとまりの文書には共通のスタイルシートを利用する。 この場合、スタイルルールを文書内部に分配することは、1つの外部スタイルシートにリンクすることよりも実際に効率が低下する。なぜなら外部スタイルシートにリンクした場合、大部分の文書にとっては、ローカルのキャッシュにスタイルシートが既に存在するからである。優れたスタイルシートが公有されることで、この効果は増大するだろう。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )］より ＞ップページや全体の構成はテンプレートを使用し、 　と言う事ですので、そのようなサイトでは、もっとも効率的です。なぜなら、各ページは極めてシンプルになり、デザインを指定するスタイルシートは一度読んでおけば再利用されるからです。 [例] <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href=""></a></li> ・・ 　</div> 　<div class="section"> 　　・・・本文・・・ 　</div> 　<div class="footer"> 　</div> </body> HTML5だと <body> 　<header> 　　<h1>ページタイトル</h1> 　　<nav> 　　　<ol> 　　　　<li><a href=""></a></li> ・・ 　</header> 　<section> 　　・・・本文・・・ 　</section> 　<footer> 　</footer> </body> のようなシンプルなHTMLにすれば、 「文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」 　多くの場合、この対処だけでページを移動するたびに読み込まれるデータ量は数十分の一になるはずです。
wordpressのfooterはわかりかねますが、敷詰めたいなら、どうしてno-repeat（繰り返さない）とかするんでしょうね？ background:url(../images/footer_bg.png) no-repeat center 13px; を background:url(../images/footer_bg.png); に変えちゃだめですか？
HTML次第・・ 例えば、本文中にサブ項目があるような場合 <body> 　<header><h1>見出し</h1></header> 　<section> 　　<h2>本文</h2> 　　<section><h3>項目</h3></section> 　　<nav></nav> 　</section> 　<footer><h2>文書情報</h2></footer> HTML4.01だと <body> 　<div class="header"><h1>見出し</h1></div> 　<div class="section"> 　　<h2>本文</h2> 　　<div class="section"><h3>項目</h3></div> 　　<div class="nav"></div> 　</div> 　<div class="footer"><h2>文書情報</h2></div> のようになっているとします。 ・DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 ) ・HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements ) 　この時に relativeは、それに含まれるブロックに対しての位置や配置の基準とされます。言い換えると、それに含まれる要素はstatic以外の直近の先祖であるブロックの内辺を参照します。 [HTML5] section{ width:80%;margin:0 auto; min-height:300px; background-color:yellow; position:relative; /* この有無で次の位置が変わる */ } section nav{ position:absolute; top:0;left:0;height:100%;width:20%; background-color:lime; } section section, section h2{ margin:0 0 0 20%;width:auto; min-height:0; } [HTML4] div.section{ width:80%;margin:0 auto; background-color:yellow; min-height:300px; position:relative; /* この有無で次の位置が変わる */ } div.section div.nav{ position:absolute; top:0;left:0;height:100%;width:20%; background-color:lime; } div.section div.section, div.section h2{ margin:0 0 0 20%;width:auto; min-height:0; } absoluteだと、その要素は存在しなかったように扱われて続く要素が配置されます。 relativeだと、元の位置に存在したままのように後続の要素が扱われます。 staticではないですから、それに含まれる要素はその位置やサイズを基準にします。 　どれを使うかは、どのようにデザインするかで決定します。HTMLには本来文書構造しか書かれていないので、スタイルシートでデザインを変える時にどちらを使うかを都度考慮すれば良いです。複数の代替スタイルシートを使用する場合とか、印刷用スタイルシートと違うとか・・ 　上記のnav(ナビゲーション)の配置の場合、sectionの位置を基準にしたければsectionにrelativeを指定しますし、ウィンドを基準にする場合は指定しない(staticにする)。 ※余計なことかもしれませんが、#box1とかのclass,id名じゃ、スタイルシートを書くときや将来のメンテナンスで困りますよ。section nav{}だと、HTML見なくてもsection(本文)中のnav(ナビゲーション)だと分かるので、HTML見なくてもスタイルシートかけますし、スタイルシートに関係なく本文の記事の修正ができる。 ※positionの扱いはここで説明しきれる量ではありません。仕様書を確認しましょう。詳しく正確にすべて書かれています。
　違います。 「セレクタの優先度」は、誰が指定したか!!、important!(最重要宣言)があるかないかです。 　これは詳細度(特異性)-selector's specificityです。 　これらのカスケーディングの仕組みは、CSS(カスケーディング　スタイル シート)と言われるくらいですから、CSSの根幹!!命!!といえる重要な仕組みです。 　まっとうな説明サイトでしたら、まず単位に続いて、この部分が懇切丁寧に書かれているはずです。いきなりプロパティの説明に入るようでしたら、見ないほうが良いです。 　まず、優先順位は [ユーザーの最重要宣言]＞[著者の最重要宣言]＞[著者の宣言]＞[ユーザーの宣言]＞デフォルト(ブラウザ)の宣言 　です。 　次に、詳細度でソートされます。詳細度は基数が大きい4桁の数[a,b,c,d]で比較します。 　　基数とは10進数だと10,16進数だと16,2進数だと2 　　・・ここは大きい基数ですから位上がりはしないということです。 　全称セレクタ 詳細度[0,0,0,0] 　タイプセレクタ,擬似要素 [0,0,0,1] 　要素セレクタ,クラスセレクタ,擬似クラスセレクタ[0,0,1,0] 　一意セレクタ [0,1,0,0] 　HTMLのstyle要素 [1,0,0,0] 　HTMLの属性での指定(body bgcolor=redとか)は[0,0,0,0] 　　です。 　そのうえで、「@importや外部スタイルシートはその場所に書かれている」とみなし、同じ優先度、詳細度の場合は後から書かれているもので上書きされます。 　それぞれのプロパティには、継承するかしないかも決まっていますので、それも考慮すること。 CSS2以降、 hoge{ color: blue;} #hoge{ color: red;} ではありません。CSS2では基点セレクタを先に書きますから、上記は *.hoge{ color: blue;} *#hoge{ color: red;} 　とみなされます。*(全称セレクタの詳細度は0、できれば、 p.hoge{ color: blue;} div#hoge{ color: red;} 　のほうがベスト(自分自身が分かりやすくなりますし、ブラウザに余計な処理させない) p.hoge{ color: blue;}　詳細度は[0,0,1,1]　　11 div#hoge{ color: red;}　詳細度は[0,1,0,1]　101 div.#hoge p.hoge[color:green;] 詳細度 [0,1,1,2] 詳細度 [0,1,1,2] まあ、プロパティとかを書く前に、肝心な 5 Selectors( http://www.w3.org/TR/CSS2/selector.html ) 6 Assigning property values, Cascading, and Inheritance( http://www.w3.org/TR/CSS2/cascade.html ) 　を徹底的に身につけましょう。 この部分は、【CSS2.1】では、【CSS2】からいくつか変更になっています。 ★現在ウェブ標準は、【CSS2.1】のほうです。
#2/#3のような実戦とは全く無関係の原理主義を真に受けないようにｗｗｗｗ 「デザインカンプ」というのは、「Webデザイン」に関したものであっても、あくまで「仕事を受注するため」のプレゼンテーションです。 納期も時間もなく、HTMLだのCSSだの作っていたら日が暮れます。 HTMLやCSSは手数をかけないと仕上がりもショボく、仕事は取れないでしょう。 HTMLとかCSSとかは、本質的な意味では、デザイナが管理すべき領分ではなく、コーダの領域であって、企画やビジュアルの検討段階では一切関係ありません。 使用ソフトとしては、複数の仕事での流用や、ひな型としての扱い、保存性、また印刷の見栄えも評価の対象なので、制作は当然、ベクタが使えるllustratorでしょう。 ただ最近のPhotoshopは、図形や文字をベクタで生成できますし、印刷しても高解像なので、Photoshopで作る強者もいます。
>質問1 使えません。 Android OS 4.0以下も多く使われており、4.0以下でサポートしていないプロパティがあります。（flash0さんの言い方をすると、亡霊のように残っています） 4.2以上なら大抵期待通りにはなると思いますが、PCブラウザ同様、発売/公開時以降に企画または制定されたCSSプロパティは使えないと思っておいていいと思います。 とはいえ使うのは勝手ですが、IE6～8であればデザインが他のブラウザと同じでないだけで問題なく読めるようなものでも、 Androidに限らずスマートフォン全体で、CSS2.1も含めて、注意しないと閲覧できない状態になることがあります。 >質問2 訪問者はHTMLやCSSを見ませんから、中身がどんな作りになっていても気づかれません。 >質問3 大量に使っていますし、使われています。
HTML5は、HTML4.01以上に文書構造とプレゼンテーションの分離が徹底されています。よって 「画像の右側にテキストを配置したい」という考え方自体なくなります。(HTML4.01でもそうだった) 　HTML5は、CSS,DOM,WAI,APIも含む巨大な仕様です。まず、HTML4.01をしっかり確実に身につけましょう。 　すなわち、次のようになります。 Q:画像とその説明をdl(定義リスト)でマークアップされたHTMLがあります。これを、画像の右側にテキストが表示されるようにしたいのですが・・どのようにスタイルシートを書けば良いでしょうか？ 　★決して「画像の右側にテキストを配置したいがHTMLは？」にはならないし、なってはならないのです。 ※タブは＿に置換してあるので戻す。 <dl class="stepByStep"> ＿<dt><img src="./images/BIBLO/01.jpg" width="320" height="240" alt="ビスをはずす"></dt> ＿<dd>本体裏側にある合計12本のビスをはずします。</dd> ＿<dd>中央にあるビスはCD/DVDドライブの固定も兼ねていますから、ビスをはずしたらドライブを取り外してください。</dd> ＿<dt><img src="./images/BIBLO/02.jpg" width="320" height="240" alt="裏蓋をあける"></dt> ＿<dd>FDDのボタンを押しながら裏蓋を注意深く開けていきます。一度に広げようとすると割れます。</dd> ＿<dt><img src="./images/BIBLO/03.jpg" width="320" height="240" alt="HDD固定ビスをはずす"></dt> ＿<dd>HDDを固定している４本のビスをはずし、横にスライドさせてマウントごと取り外します。</dd> ＿<dd>ひっくり返してリボンケーブルをはずします。</dd> </dl> <ol class="stepByStep"> ＿<li><img src="./images/BIBLO/01.jpg" width="320" height="240" alt="ビスをはずす"> ＿＿<p>本体裏側にある合計12本のビスをはずします。</p> ＿＿<p>中央にあるビスはCD/DVDドライブの固定も兼ねていますから、ビスをはずしたらドライブを取り外してください。</p> ＿<li><img src="./images/BIBLO/02.jpg" width="320" height="240" alt="裏蓋をあける"> ＿＿<p>FDDのボタンを押しながら裏蓋を注意深く開けていきます。一度に広げようとすると割れます。</p> ＿</li> ＿<li><img src="./images/BIBLO/03.jpg" width="320" height="240" alt="HDD固定ビスをはずす"> ＿＿<p>HDDを固定している４本のビスをはずし、横にスライドさせてマウントごと取り外します。</p> ＿＿<p>ひっくり返してリボンケーブルをはずします。</p> ＿</li> </ol> というHTMLがあるとして・・定義リスト/序列リストのいずれでマークアップされていても、 *.stepByStep{ width:600px; margin:5px auto;padding:5px; list-style:none; border:ridge 3px gray; } *.stepByStep img{ float:left; margin-bottom:10px; } *.stepByStep:after{ content:"";display:block; clear:left; } dl.stepByStep dt, ol.stepByStep li{ clear:left; margin:0;padding:0; } dl.stepByStep dd, ol.stepByStep li p{ margin:0 0 0 340px; line-height:1.6em;text-indent:1em; } で全く同じようにデザインできます。 ★発想を根本から変えることから始めましょう。 そのためには、まず仕様書くらいは一応目を通しましょう。 　⇒HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html ) 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) HTML5でも、このマークアップは変わらない。文書構造によったら <section class="stepByStep"> ＿<figure><img src="./images/BIBLO/01.jpg" width="320" height="240" alt="ビスをはずす"></figure> ＿<p>本体裏側にある合計12本のビスをはずします。</p> ＿<p>中央にあるビスはCD/DVDドライブの固定も兼ねていますから、ビスをはずしたらドライブを取り外してください。</p> ＿<figure><img src="./images/BIBLO/02.jpg" width="320" height="240" alt="裏蓋をあける"></figure> ＿<p>FDDのボタンを押しながら裏蓋を注意深く開けていきます。一度に広げようとすると割れます。</p> ＿<figure><img src="./images/BIBLO/03.jpg" width="320" height="240" alt="HDD固定ビスをはずす"></figure> ＿<p>HDDを固定している４本のビスをはずし、横にスライドさせてマウントごと取り外します。</p> ＿<p>ひっくり返してリボンケーブルをはずします。</p> </section> のマークアップをされる場面もあるでしょう。 ★プレゼンテーションではなく、文書構造だけをHTMLに書く。そうすれば、自在にデザインできるということ。
white-space:nowrap; 'white-space'( http://www.w3.org/TR/CSS2/text.html#propdef-white-space ) その部分のテキストのlang属性はなんでしょう。 英文の場合は、空白文字で折り返され単語内では改行されません。日本語は任意の場所で折り返されるはずですが、折り返されない場合は、wihite-space:normalのほうが良いでしょう。 また 　⇒The following examples show what white space behavior is expected from the PRE and P elements and the "nowrap" attribute in HTML. ( http://www.w3.org/TR/CSS2/text.html#propdef-white-space ) 　絶対配置やフロートの場合は改行されません。 　もう一度、他のこの部分に継承されるプロパティも含めて再調査する。
こんにちわ。 前回、回答したものです。　 前回の回答で、解決しないということなので、追加の回答を、かきました。 もしかしたら、　もしかしたら～～ 自分の環境で、やってみたら、変化、ありませんでした。。。。 が、、、よくみたら、各セルが１文字分のサイズしかないので、ちゃんと、できてるはずなのに、 表示が変化してないだけ。でした。 つまり、セルのサイズを、大きくしたら、ちゃんと、できていました。 ちなみに、下記の修正で、テーブル全体を、大きくしてみると、ちゃんと、できてることが、わかります。 　■１５行目を、下記に、修正してみると、いいと、おもう。 　■　echo '<TABLE cellpadding="4" cellspacing="1" style="background-color : #aaaaaa;text-align : 　　↓↓↓　これを、下記に修正してみると、いいと思う。　　↓↓↓ 　■　echo '<TABLE width="70%" height="50%" cellpadding="4" cellspacing="1" style="background-color : #aaaaaa;text-align : 　■注意■ 　　この間の、修正箇所も、修正したうえで、上記の修正をする、といいかも。 　以上です。
Javascript onMediaQueryというのを使ってみてはどうでしょうか
HTML5バージョンです。後方互換のためjavascriptが書いてあります。CSSは2.1の範囲内で子供セレクタはつかってません。子供セレクタ>を使うとCSSはもっと簡単になる。 ※先のHTML4.01もそうですが、HTML自体、極めてシンプルなことが分かると思います。メンテナンスも容易ですし、デザインの自由度も変更も、とても楽になります。 　こちらは、印刷時にはスタイルが適用されないようにしてありますから、それも確認すること。 「文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になる( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」・・わざわざ印刷用のページやスマホ用のページを作らなくて済む。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script> <script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"></script> <![endif]-->＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- html,body{margin:0;padding:0;} header,section,footer{width:80%;min-width:460px;max-width:900px;margin:0 auto;padding:10px;} section{position:relative;min-height:400px;} section section, section h2, section p{ margin:0 21%; min-height:0; min-height:0; min-width:0;width:auto; } section section p{margin:0;} section nav,section aside{ width:20%;height:100%; position:absolute;top:0; } section nav{left:0;} section aside{right:0;} /* 色つけ。背景 */ body{background-color:gray;} header,footer{background-color:lime;} section{background-color:silver;} section section{background-color:white;} section aside{background-image:url(./images/background/sky.jpg);} section nav{background-image:url(./images/background/stone.jpg);} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p>章記事</p> ＿＿<section id="S"> ＿＿＿<h3>項記事タイトル</h3> ＿＿＿<p>記事・・・・</p> ＿＿</section> ＿＿<section id="N"> ＿＿＿<h3>項記事タイトル</h3> ＿＿＿<p>記事・・・・</p> ＿＿</section> ＿＿<section id="L"> ＿＿＿<h3>項記事タイトル</h3> ＿＿＿<p>記事・・・・</p> ＿＿</section> ＿＿<aside> ＿＿＿<h3>補足記事</h3> ＿＿＿<p>本文と直接関係ない記事</p> ＿＿</aside> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#S">Some</a></li> ＿＿＿＿<li><a href="#N">navigation</a></li> ＿＿＿＿<li><a href="#L">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
いくつか方法はあります。 :hover z-indexで背景を指定した画像を前面に置く text-indentでずらす 何れかをvisibiltyで ・・・
ごく簡単な例です。 何はともあれ順当にHTMLを <div id="manga1"> 　　<ol> 　　　　<li id="C1"><a href="#C2">２コマ目へ</a></li> 　　　　<li id="C2"><a href="#C3">３コマ目へ</a></li> 　　　　<li id="C3"><a href="#C4">４コマ目へ</a></li> 　　　　<li id="C4"><a href="#C5">５コマ目へ</a></li> 　　　　<li id="C5"><a href="#C6">６コマ目へ</a></li> 　　　　<li id="C6"><a href="#C1">１コマ目へ</a></li> 　　</ol> </div> のように書きます。idに数字を最初にかけない! [画像]は、Wikiの 漫画 - Wikipedia( http://ja.wikipedia.org/wiki/%E6%BC%AB%E7%94%BB ) にある画像へ進み、名前を[Petit_Sammy_eternue.jpg]に変更してimagesホルダーに保存する。 また、それぞれのコマを指定サイズで切り抜いてPetit_Sammy_eternue_1.jpg～Petit_Sammy_eternue_6.jpgとして保存しておきます。 ★リンクの画像は単なるテキストでも良いです。 [例]<li id="C1"><a href="#C2"><img src="./images/Petit_Sammy_eternue_1.jpg" width="191" height="167" alt="２コマ目へ"></a></li> 　↓ <li id="C1"><a href="#C2">２コマ目へ</a></li> 　※本来はサンプルのように<img>で画像を入れておくほうか良いです。速度は変わらない。 ★印刷時にはちゃんと６コマの漫画になります。(印刷プレビューで・・) ※Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力でチェック済みのウェブ標準HTML4.01strict + CSS2.1 ※タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- div.section{ position:relative; top:50px;width:100%; background-color:gray; height:180px; } div#manga1{ position:absolute; top:5px; width:100%; } div#manga1 ol,div#manga1 ol li{ list-style-type:none;display:block; margin:0;padding:0; } div#manga1 ol{ width:205px;height:170px; margin:0 auto; overflow:hidden; position:relatve; background-color:white; } div#manga1 ol li{ width:100%;height:100%; } div#manga1 ol li a{ display:block; width:196px;height:167px; margin:auto; text-indent:-200px; background-image:url(./images/Petit_Sammy_eternue.jpg); } div#manga1 ol li a[href="#C2"]{width:196px;height:167px;background-position:0px 0px;} div#manga1 ol li a[href="#C3"]{width:191px;height:167px;background-position:-196px 0px;} div#manga1 ol li a[href="#C4"]{width:195px;height:167px;background-position:-2px -165px} div#manga1 ol li a[href="#C5"]{width:191px;height:169px;background-position:-199px -166px;} div#manga1 ol li a[href="#C6"]{width:204px;height:169:px;background-position:0px -331px;} div#manga1 ol li a[href="#C1"]{width:185px;height:165px;background-position:-202px -335px;} --> ＿</style> <style type="text/css" media="print"> <!-- div#manga1 ol,div#manga1 ol li{ list-style-type:none; margin:0;padding:0; } div#manga1 ol{ width:400px; } div#manga1 ol li{float:left; } --> </style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div id="manga1"> ＿＿＿<ol> ＿＿＿＿<li id="C1"><a href="#C2"><img src="./images/Petit_Sammy_eternue_1.jpg" width="196" height="167" alt="は"></a></li> ＿＿＿＿<li id="C2"><a href="#C3"><img src="./images/Petit_Sammy_eternue_2.jpg" width="191" height="167" alt="はあ"></a></li> ＿＿＿＿<li id="C3"><a href="#C4"><img src="./images/Petit_Sammy_eternue_3.jpg" width="195" height="167" alt="はあ～"></a></li> ＿＿＿＿<li id="C4"><a href="#C5"><img src="./images/Petit_Sammy_eternue_4.jpg" width="191" height="169" alt="はあ～く"></a></li> ＿＿＿＿<li id="C5"><a href="#C6"><img src="./images/Petit_Sammy_eternue_5.jpg" width="204" height="169" alt="はあ～くしょん"></a></li> ＿＿＿＿<li id="C6"><a href="#C1"><img src="./images/Petit_Sammy_eternue_6.jpg" width="185" height="165" alt="・・・・"></a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
#boxにもborder-box付けてあげると良いと思う。 height:100%;は親継承だから、 #containerのborder-boxした100%を継承して、そこを100%としているので、 #boxにもbox-sizing:border-box;付けたらそれが100%になるかと。 ごめんなさい、説明できそうにないので、 騙されたと思って付けてみてください。（笑）
#1です。 「分かっていてあえてやる」ということで理解しました。 まあ、 ＞画像で表示していた表題 「表題」ってことはロゴか見出しなんだからやっぱり大きさ変わっちゃダメだろ、と思いますが、わざとやっているということでこれ以上のケチ付けはやめておきます。 さて。 いまさらですが、フォントサイズはちゃんと自動で変化していますね。 じゃあ何がダメかというと var wpx = $("div#content").width(); var wpx = $("div#content1").width(); var wpx = $("div#content2").width(); var fpar = (Math.floor((wpx)/(400/100)));// 横幅px ÷ (最少幅px/100) $("div#content").css("font-size",fpar+"%"); $("div#content1").css("font-size",fpar+"%"); $("div#content2").css("font-size",fpar+"%"); これですね。 お気づきじゃないようですが、変数wpxで各ブロックの幅を取得していますが、それを連続して書いているために、結局wpxにはdiv#content2の幅が入っています。だから予定通りの文字サイズにならないんですね。 ということで、 var wpx = $("div#content").width(); var fpar = (Math.floor((wpx)/(400/100))); $("div#content").css("font-size",fpar+"%"); var wpx = $("div#content1").width(); var fpar = (Math.floor((wpx)/(400/100)))； $("div#content1").css("font-size",fpar+"%"); var wpx = $("div#content2").width(); var fpar = (Math.floor((wpx)/(400/100))); $("div#content2").css("font-size",fpar+"%"); とちゃんと毎回取得直後に計算するか、 function resize(block){ 　wpx = block.width(); 　fpar = (Math.floor((wpx)/(400/100))); 　block.css("font-size",fpar+"%"); } のように関数を用意して、 resize($("div#content")); resize($("div#content1")); resize($("div#content2")); のように呼ぶという方法があります。
HTMLならば、iframeに、scrolling="no"足してみて。
#3 補足URLを読みました。text-align: justify の設定初期値のアルゴリズムはUA依存であり、全ブラウザで同じ表示にする事は出来ません。 http://hp.vector.co.jp/authors/VA022006/css/text.html#text-align http://www.y-adagio.com/public/standards/tr_css2/text.html#alignment-prop UA依存性をなくす為に「CSS Text Module Level 3」で text-justify が定義されていますが、2013/11/17現在の全ブラウザでは使用できません。 http://www.w3.org/TR/css3-text/#text-justify-property また、プロポーショナルフォントの横幅はフォント依存なので全環境で縦の行数を揃える場合は固定幅フォント(等幅フォント)を指定する必要があります。 http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%83%9D%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88 ブラウザのフォントサイズはユーザCSSによってクライアント側で自由に変更できるのが実情です。 フォントサイズが変更されても正しく見えるように制作するのが現実的だと思います。 http://www.smbc.co.jp/accessibility/guidelines/guideline_18.html
再現できません。どのブラウザでも、またIEの互換モードでも・・ 単純な表だけにして他の要因がないか調べるしかないかと・・ ★タブは＿に置換してあるので戻す。 [HTML4.01 strict]+[CSS2.1] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- table[summary="テストのための表"]{ border-collapse:collapse; } table[summary="テストのための表"] tbody td{ border:solid 1px black; } table[summary="テストのための表"] tr:first-child td+td{ width:16em; } table[summary="テストのための表"] tr:first-child td+td+td{ width:auto; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table summary="テストのための表"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<td colspan="2">あいうえお</td> ＿＿＿＿＿<td>かきくけこ</td> ＿＿＿＿＿<td>そしすせそ</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>あいうえお</td> ＿＿＿＿＿<td>あいうえお</td> ＿＿＿＿＿<td>かきくけこ</td> ＿＿＿＿＿<td>そしすせそ</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
どこまでのケースを想定するかに依りまずが、こんな感じでしょうか。 検索: (<a(?: +(?!title *=)[^ >]*)*) title *= *(?:"[^"]*"|'[^']*'|[\w.:-]*) 置換: $1 ■対象 <a title="ここは文字列が入っています" href="index.html" class="link"> <a title='ここは文字列が入っています' href="index.html" class="link"> <a title = test href="index.html" class="link"> <a class="link" title="ここは文字列が入っています" href="index.html"> ■対象外 <area title="ここは文字列が入っています" href="index.html" class="link"> <area class="link" title="ここは文字列が入っています" href="index.html"> <a class="<link>" title="ここは文字列が入っています" href="index.html"> <a class=' title="test"' title="ここは文字列が入っています" href="index.html"> ■参考URL http://w4ard.eplusx.net/translation/W3C/REC-xml-20081126/#sec-starttags http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/intro/sgmltut.html#h-3.2.2 本格的に対応すると複雑になるので多少妥協しました。対象外の <a> は妥協の産物です。 XML 1.0, HTML 4.01 に概ね準じていますが、対象外の class="<link>" なんかは違反なので考慮しなくていいかもしれません。 「この手の悪いコードがあるかもしれない」という前提で考慮したほうがベターではありますが。 class=' title="test"' は違反ではありませんが、通常見ない書き方なのでここはまあ妥協で。 http://w4ard.eplusx.net/translation/W3C/REC-xml-20081126/#NT-NameStartChar これ全部対応するのはさすがに骨が折れる…。 # Re: kouta-222さん
>フロントエンド 利用者、訪問者の目に見える部分です。 ウェブデザインにおいては、デザインそのものです。 対義語はバックエンドです。 バックエンドは、HTMLコード、CSSコード、JavaScriptプログラム、サーバーのCGIプログラムなどです。 HTMLとCSSはデザインに直結していますので、フロントエンドとも言えます。 >Twitter Bootstrap 総合的なデザインテンプレート（CSSファイル）です。 レイアウトも含まれます。 「このようにレイアウト、デザインしたい場合はこのようにHTML、class属性を書いてください」というルールをまとめた物です。 >パンくずリスト 語源はヘンゼルとグレーテルの話でパン屑を道に落として、どういう道を歩いてきたかの目印にした事です。 それになぞらえて「ページを移動した履歴」になります。 昔のウェブサイトの構造はトップページからコンテンツページにたどって行き、他のカテゴリーを見る場合は一度トップページに戻る必要がありました。 http://komakusa.net/internet/hp-zu.html この図の例で言うと、TOPページから商品紹介、そして「ばら」に移動した場合、 　TOPページ > 商品紹介 > ばら というパンくずリストができあがります。 そこから「お問い合わせ」を見る場合は、TOPページに戻ってからお問い合わせページに移動しなければならないため、 　サイトトップ > お問い合わせ というパンくずリストになります。 しかし昨今の作り方の多くは、コンテンツページから他のカテゴリーのコンテンツページに直接移動する事ができますので、 　TOPページ -> 商品紹介 -> ばら -> お問い合わせ という順番で移動していても、パンくずリストは 　サイトトップ > お問い合わせ というふうに、商品紹介を経由してきた事が消えています。 このように、昨今のウェブサイトの作り方は、パンくずリストの名前の由来となった「今まで通ってきた道」と表示内容が一致しておらず、 単純に、現在表示中のページはトップページからどのような階層になっているかということを指し示しています。 というわけで、個人的にはこういう書き方になっている物を、トピックパス、カテゴリーツリー（ディレクトリツリー）と呼んでパンくずリストとは区別していますが、どうやらこの呼び方は流行らないようです。
質問1は関係ありません。 ただ、17色についてはキーワードを使うほうが楽です。 aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、orange、purple、red、silver、teal、white、yellow 　それ以外は、rgbで統一したほうが管理しやすいでしょう。将来的にrgbaとの整合性も取れますから・・rgb(255,255,0) = yellow 　私は、分かりやすくもあるので、rgb(00,00,00)～rgb(255,255,255)に統一しています。rgb(100%,100%,0%)でも良いでしょう。 質問2 　16進数は、二桁記述するようにしたほうが良いです。一部ブラウザには1桁だと認識しない物があります。#ff0 ⇒ #ffff00内部的に1桁は2桁に置換されて処理されます。 『3桁のRGB表記（#rgb）は6桁の形式（#rrggbb）に変換される。これは桁を繰り返したものであって、ゼロを付け足したものではない。( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/syndata.html#color-units )』 　なお、慣習的に 0123456789ABCdef とABCは大文字と言うのがわかりやすいのですが、区別はされませんので、すべて小文字でも良いです。aとc 6とbの区別 　以上、ごく一部です。詳しくは 　⇒4.3.6 色( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/syndata.html#color-units ) 　まず仕様書を調べて、分からない時に聞くと良いですよ。
書くようにしましょう。!!! 　ウェブ、特にHTMLは対象の間違いがあっても何とか解釈して表示を試みるようになっています。(参考文献の後半)　だからと言ってそれに期待するのは不味いです。--すべてのブラウザが処理してくれるわけではない。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 　スタイルシートが別ファイルに存在する場合、ユーザエージェントはスタイルシートの文字エンコーディングをを決定するにあたり、以下の（高いものから低いものへ）優先順位を遵守しなければならない: 　　1. HTTPプロトコルでの"Content-Type"フィールドの"charset"パラメータ（または他のプロトコルの類似のパラメータ） 　　2. BOMと@charsetの両方またはいずれか一方（以下参照） 　　3. <link charset="">または（もしあれば）リンクの機構による他のメタデータ 　　4．スタイルシートやドキュメントが参照する文字集合（もしあれば） 　　5. UTF-8を仮定する ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで 　⇒4.4 CSSスタイルシートの表現( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/syndata.html#charset ) 　4.はリンク元のHTMLが使用しているcharsetが使われていると類推はしますが、その場合異なる文字集合のHTMLからの参照はうまく処理できない場合があります。 　言い換えると、上記の対応をすべて行っておけば良いです。ただし、HTML5以降は、HTMLもUTF-8で記述することが前提となります。 1. もしサイト内のCSSをすべてUTF-8で提供するなら、.htaccessなどでHTTP応答ヘッダに加えるようにする。 2. BOMは書かなくて良いですが、@chersetを記述する。 3. <link rel="stylesheet" media="screen" cherset="UTF-8"> 4. HTMLもUTF-8で書く ・・で完璧
SPECCTR http://www.specctr.com/ PS、FW、AIプラグインです。 Buy Specctrページの「Try Specctr Lite」から無料機能制限版（width、heightのみ）をダウンロードできます。 有料版は、やりたいことの全て＋αができると思います。 cacoo https://cacoo.com/ 先日知ったばかりですが、寸法線ツールがありました。 距離測定や色測定ができるかどうかはわかりません。 無料、または有料のウェブアプリです。 図形描画ツールもありますが、サイズ確認方法などが手間になると思いますし、Adobeのでやるのと大して変わらないかもしれません。 Visio http://office.microsoft.com/ja-jp/visio/ ArgoUML http://argouml.tigris.org/ EA http://www.sparxsystems.jp/ これらのツールは「UMLツール」で検索すると出てきます。
[解説] Q:背景を画像で敷き詰め（リピート表示）たいのですが Q:・containerの高さが0になってしまう。 何も指定しなければ、リピートされます。 ⇒初期値: repeat( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/colors.html#propdef-background-repeat ) Q:最初に表示されている部分より下がリピートしてくれません。 （ファーストビューより下の部分に背景が適用されない。 　floatさせると、それが所属していた要素から切り離されますから、元の要素からそれが欠落するために背景は残った要素分の高さになります。 　「浮動体はフロー内にないので、浮動体の前後に生成された位置指定されないブロックボックスは、あたかも浮動体が存在しないかのように垂直に流れる。( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/visuren.html#floats )」 .container {background: url("hoge.jpg") 0 0 transparent;} .inner {background: url("hoge.jpg")} ★bodyに指定したので良いでしょう。もちろんheader,section,footerに指定しても良い。 <div class="container"><div class="inner"> こんなclass名をつけると、検索エンジンは理解しないし、そもそも自分が困る。 とにかくHTMLは率直に文書構造だけを記述すること。それによってデザインの自由度がまします。 　あとは、その文書構造にしたがってセレクタを記述するだけです。タイプセレクタ、子孫セレクタ、クラスセレクタ、擬似要素・・・サンプルでは使ってませんが子供セレクタ、隣接セレクタ、擬似クラスもある。 　分からないときは、ハウツーサイトではなく仕様書に目を通すこと!!
＞この記述は文法上正しいでしょうか？ 　何か誤解されているようですね。 　文法と言うのは、HTMLもCSSでも同じです。機械的なもので、例えばHTMLですと、P要素はブロック要素でこれこれの要素内にしか存在し得なくて、内部にinline要素しか入れられないなどですし、CSSの場合はcontentプロパティは、擬似要素と組み合わせて内容を持つ要素に内容を追加する。・・などいうものです。よって文法的には誤りではありません。 　一方、HTMLには文法以上に、HTMLは文書構造を示すように要素--タグ--を選択し、要素が足りなければidやclass名で文書構造を補完するというなどの基本があります。 　例えば<table>はブロック要素でその内部に最低ひとつの<tbody>と、ゼロ個以上の<caption><thead><tfoote>を持てば、文法上は整合しますが!!!!、それをデザインのために使ってはならないというようなものです。 　さて、<strong>あいうえお</strong>とは、この単語、ないし部分が重要!!というマークアップですから、文法上は整合していますが、『「あいうえお」の写真』と言うような場合、これが<strong>というマークアップで意味的によいかどうかは、私には分かりません。 　strongでマークアップされていれば、検索エンジンなどの機械や誰が見ても、この部分は、この文書にとって「重要」な要素--部品--だと判断するでしょうが、それが正しいか否かは著者以外には判断できません。 　普通はstrongというタイプセレクタに対しては行わないでしょう。なぜなら、他の本当の意味で重要で<strong>要素すべてにマッチしてしまいますから・・
WordpressをCMS（コンテンツ・マネジメント・システム）として使用する以上、その対象であるHTML5とCSSの知識は必須です。 その上で、構築ツールに当たるWordPressの知識が必要になるでしょう。 社内システムであれば、WordPressのカスタマイズは、プラグイン程度で済ませられると思いますので、phpによるカスタマイズ知識が必要になることはあまりないでしょう。 （VBやJavaによる一般的なWeb開発に比べて、WordPressをphpで拡張するのはかなりコツが要ります） また、実はWordpressはあまりjQueryと相性がよくないので、javascriptがらみのカスタマイズも、最初から必須になることはないと思います。 まずはHTML5とCSSを。
＞以前どこかのサイトでこの方法が書かれていたのですが、再度見つけることができなかったので 　さすがにそれは探し方が悪いです。 　まず最初、いの一番に見るのは仕様書ですよ。幸いに現在ウェブ標準のCSS2.1は邦訳もあります。 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cover.html ) 　　　⇒12 生成内容、自動番号付け、およびリスト( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/generate.html ) 　気になるのですが・・・仕様書を御存知ないと言うことは、CSSでもっとも重要なセレクタやカスケーディングをご存知ないのでは？？？ 　ＣＳＳ(カスケーディングスタイルシート)と言うくらいですから、カスケーディングを知らないとCSSは使いこなせません。仕様書でもプロパティより先に書かれている。 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て ※内容を追加するのですから、内容を持ち得ない--空要素--、img,brなどには使えません。また擬似要素の属性などを継承しますから、dispalyなどで上書きしなければなりません。 　よく使われるのが、counter関係のプロパティと組み合わせて、第１章２項のように章番号を付け加えたり、印刷用スタイルシートでリンク先URLを追記したり、float解除とか・・ 　仕様書をブックマークして、必要なときいつでも参照できるようにしましょう。ウェブ上に散在する「ハウツー」は、参考にしても、ほとんど(まったく)意味がありません。なぜなら仕様書を御存知の人だったら「仕様書をご覧ください」ですむはずです。詳しく正確に書かれています。 　そのようなサイトは、仕様書の存在を知らないか、理解していないからこそ「書ける」のですからね。 　HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/cover.html )もね 　仕様書を見て分からない時に質問されると効率的です。
恐らく、これに近いソースになっているのだと予想します。 【html】 <dl class="news"> <dt>2013年10月30日</dt> <dd>メディア掲載のお知らせ</dd> <dt>2013年10月29日</dt> <dd>ホームページを立ち上げました</dd> </dl> 【css】 .news dt{ float:left; width:100px; } .news dd{ padding:0 0 10px 100px; margin-bottom:10px; border-bottom:solid 1px #CCC; } 2列目は中央に寄っているのではなく、上の段の日付部分が折り返されているのでdtの縦がddよりも長くなり、floatの自然な機能として上のdtの右側に回り込んでいるだけです。 これはdtにclearを入れる事によって簡単に解決します。 また、ddに入れている下線（borderでも背景画像でも同じ）はあくまでddの範囲の一番下に表示されますので、 この記述方法だと、dtの方がddよりも縦が長くなると、日付の文字と下線がかぶってしまいます。 これに関しては、上記のclearだけでは解決しません。 dtの折り返しを防ぐには単純に幅を広げればいいかと言うとそうではなく、閲覧者の環境によって文字サイズや文字幅は様々ですので、見ている方によっては崩れます。 どの環境でも崩れず作るには、dtのwidthとddのpadding-leftの数値をpxではなくemで指定するとよいです。 em文字サイズによって変わる相対的な指定ですので、文字サイズが大きくなるとemの幅も大きくなり、環境によって2行になるような事はありません。
こんにちは。 スクリプトをimg要素の後に持って行くか、ページのonloadで呼び出せば動くと思います。 エラーは document.getElementById("pict")が取得できないためです。 （imgタグ生成前に呼んでいませんか？）
「何が」文字化けしたのかがどこにも書いてないんですが、とりあえずhtmlとcssはちゃんとUTF-8で保存されてますか？ 文字化けって言ったら大抵保存する文字コードの間違いなんですが、まあそれもどこにも記載されてないので確認です。
できるだけDIVは使わない。使うときも「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )」が原則です。HTML5では、より厳しく「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html#the-div-element )訳すと「適切な他の要素がないときの最後の手段としてdiv要素を使用することが強く奨励される。」」 　例えば、 <body> 　<div class="header"> 　　ヘッダ 　</div> 　<div class="section"> 　　<h2>タイトル</h2> 　　<dl> 　　　<dt>2013.08.29</dt> 　　　<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> 　　　<dd>よろしくお願いします。</dd> 　　　<dt>2013.08.30</dt> 　　　<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> 　　　<dd>よろしくお願いします。</dd> 　　</dl> 　</div> と率直にHTMLを書いて、日付を左に表示したいとすれば、そのようにスタイルシートを書けばよいだけです。将来気が変わったら他のデザインにすることも容易です。 　別にdl(定義リスト)でなくても何でも良いです。 <div class="section"> 　<h2>見出し</h2> 　<h3>2013.10.29</h3> 　<p></p> 　<h3>2013.10.29</h3> 　<p></p> だろうが・・・・文書構造を示す最適なマークアップにすればよい。スタイルシートを使う目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 )」なのですから、好きにデザインできるのですよ。HTMLには構造しか書いてないので作るほうも、スタイルシートでデザインを変えるのも楽ですし・・・ ★日付のfloatと本文のmarginを組み合わせてあります。 ★ウィンドウ幅には依存しません。スマホ縦でも横でも、幅広のパソコンでも 　　ウィンドウ幅を変更してみましょう。 ★タブは＿に置換してあるので戻す。 [HTML4.01strict]汎用(PC/スマホ兼用) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} div.header,div.section,div.footer{ width:80%;min-width:460px;max-width:800px; margin:0 auto; padding:5px; background-color:white; } div.section dl dt{ float:left; } div.section dl dd:after{ content:""; display:block; clear:left; } div.section dl dd{ margin-left:6em; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>タイトル</h2> ＿＿<dl> ＿＿＿<dt>2013.08.27</dt> ＿＿＿<dd>本文が長いと</dd> ＿＿＿<dt>2013.08.29</dt> ＿＿＿<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> ＿＿＿<dd>よろしくお願いします。</dd> ＿＿＿<dt>2013.08.30</dt> ＿＿＿<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> ＿＿＿<dd>よろしくお願いします。</dd> ＿＿</dl> ＿</div>＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-10-30</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> [HTML5]★スマホおよび、IE9以降のモダンブラウザ用 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:gray;} header,section,footer{ width:80%;margin:0 auto; padding:5px; background-color:white; } section dl dt{ float:left; } section dl dd:after{ content:""; display:block; clear:left; } section dl dd{ margin-left:6em; } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>タイトル</h2> ＿＿<dl> ＿＿＿<dt>2013.08.27</dt> ＿＿＿<dd>本文が長いと</dd> ＿＿＿<dt>2013.08.29</dt> ＿＿＿<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> ＿＿＿<dd>よろしくお願いします。</dd> ＿＿＿<dt>2013.08.30</dt> ＿＿＿<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> ＿＿＿<dd>よろしくお願いします。</dd> ＿＿</dl> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
この場合は、率直にtableで良いですよ。 ★こういうときこそ、tableを使う　表データだから virtical-alignが使える。 ★タブは＿に置換してあるので戻す。 <body> ＿<div class="header"> ＿＿<form action="http://www.google.co.jp/search"> ＿＿＿<table summary="searchForm" id="search" border="0"> ＿＿＿＿<tbody> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<th>キーワード</th> ＿＿＿＿＿＿<td><input type="text" name="q" size="20" value=""></td> ＿＿＿＿＿＿<td><input type="submit" value="探す?"> ＿＿＿＿＿</tr> ＿＿＿＿</tbody> ＿＿＿</table> ＿＿</form> ＿</div> スタイルシートは table#search{ border-collapse:collapse; width:26em;margi:5px 5px 5px auto; line-height:2em; } table#search th{ border: red 1px solid; backgrund-color:rgb(255,160,160); vertical-align:middle; } table#search td{ border:none; vertical-align:middle; padding-left:5px; text-align:right; } table#search td+td{ text-align:left; }
一挙にそこに進んだって無理です。 スタイルシートを取り入れるには、何よりも先に、HTMLをきちんと学びなおしましょう。 ・W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_input ) 　に「メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。」と書かれているのは伊達じゃありません。(英語でメモとは日本語のメモよりも重要な意味をもちます) 絶対に目を通しておく記事 ・スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 ) ・構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/intro/intro.html#h-2.4.1 ) 　そして、「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )」 　必ず読んで理解すること。 　それには、 HTMLは文書構造を書く。文書構造しか書かない ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　と言うことが書いてあります。 　そしてスタイルシートの登場です。HTMLで示された文書構造を元にスタイルを適用する要素を指定するセレクタ(選択子)を書いて、そのプロパティを記述します。 要素(Element)とは、文書を構成する要素のことで、タグでマークアップされます。 　<h1>あいうえお</h1><!-- その文書の見出し要素であることを示す --> 　<p>かきくけこ、さしすせそ</p><!-- 他の文書のひとつの段落であることを示す --> 　<div class="section"><h2>見出し</h2><p>・・・</p><p>・・・</p></div> 　　<!-- この部分が文書構造で本文(section)であることをclass名で示しているブロック要素 --> 　デザインにかかわることはHTMLには書きませんし、デザインのためにマークアップするのではない!!! 　その上で例えば次のようにマークアップされたHTMLがあるとします。 [HTML4.01] <body> 　<div class="header"><!-- この文書のヘッダ --> 　　<h1>タイトル</h1><!-- 見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> 　　<div class="nav"><!-- ナビゲーション --> 　　　<h2>サイトマップ</h2><!-- 見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> 　　　<ol><!-- 序列リスト --> 　　　　<li><a href="">トップ</a></li><!-- リストの項目 --> 　　　　<li><a href=""><strong>新着情報</strong></a></li> 　　　　<li><a href="">製品</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="section"><!-- 本文ブロック --> 　　<h2>本文</h2><!-- このブロックの見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> ・・・・・ これがHTML5だとしたら <body> 　<header><!-- この文書のヘッダ --> 　　<h1>タイトル</h1><!-- 見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> 　　<nav><!-- ナビゲーション --> 　　　<h2>サイトマップ</h2><!-- 見出し --> 　　　<ol><!-- 序列リスト --> 　　　　<li><a href="">トップ</a></li><!-- リストの項目 --> 　　　　<li><a href=""><strong>新着情報</strong></a></li> 　　　　<li><a href="">製品</a></li> 　　　</ol> 　　</nav> 　</header> 　<section><!-- 本文ブロック --> 　　<h2>本文</h2><!-- このブロックの見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> となるでしょう。 【以下の説明はHTML4.01で行います。】 　そしてスタイルシートで、ヘッダーのstrong要素の文字を赤くしたいなら、セレクタを 外部スタイルシート、<hea></head>内に ・div.header p strong{color:red;}と書 と書きます。 　いずれを書いても、<div class="nav"></div>内、<div class="section"></div>内の、<strong></strong>の文字は赤くなりません。 　なぜなら、 div.header p strong{} とは、headerというclass名をもつdiv要素の子孫(半角スペース)の子孫のp要素の子孫のstrong要素と言う意味だからです。 　一方、単に strong{color:green;} 　と書いた場合は、すべてのstrongは緑の文字になりますが、上記のように指定したものがあると、そちらが優先されます。なぜならより詳しく厳密に指定してあるからです。 　また、 　さらにsection内の<p></p>について <p>記事でここは<strong style="color:blue">注目</strong>して</p> 　としたら、<head></head>内や外部スタイルシートで書いても変更することはできません。 　これらのどの要素にデザインをするかの指定方法--セレクタはスタイルシートで最も大事な部分です。 　Ultimateなどで作成するプロパティやその値の書き方なんて、テキストエディタで書いたってしれた物ですし、それがいくら書けたからと言って、目的の要素に対してスタイル(デザイン)が指定できるわけじゃありません。 　まず身につけなければならないことは 1) HTMLで文書構造をきちんとマークアップできるようになること!! 　　　デザインは文書構造さえきちんと出来ていれば好きになります。 2) 次にCSS(カスケーディングスタイルシート)のカスケーディングを身につけます。 　5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/selector.html ) 　6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/cascade.html ) 　　もちろん、その前の1 CSS 2.1仕様について 　2 CSS 2.1の手引き 　3 適合性: 必要条件と推奨事項 　4 構文と基本データ型 も一通りは・・ 　それが出来ると 「cssの記述は掲載されているのですが、html側の記述が掲載されていません。」 　が、【すでに書かれているHTMLにスタイルを指定する方法】が自然と分かるようになります。 　みんな通ってきた道です。プロパティより先に知っているはずですから、書かれてないのです。 　
メディアクエリにはデータベースなんてありません。 そのページを表示する端末の種別やサイズに応じてCSSを切り替えるための仕組みです。 とりあえず、このページがわかりやすいメディアクエリの説明になっているのではないかと思います。 http://d.hatena.ne.jp/amachang/20080425/1209139140 なお、書かれた時期が少々古いため、上記ページで書かれている対応ブラウザが少なくなっております。現在の対応状況は以下ページの表の"Media Queries"欄で書かれている通りです。 http://fmbip.com/litmus/#css3-properties なお、CSSを直接ページに記述する場合は、 <style type="text/css"> <!-- @media only screen and (min-width: 0px) and (max-width: 320px) { // ここにiPhone用のCSSを書く } //--> </style> という風にします。
それはbackground-sizeに起因する物ですか？ background-imageを使わずにborderやbackground-colorで要素の大きさを調べて、意図した通りの大きさになっていますか？ もし要素の大きさが意図通りになっていないのであれば、要素の大きさを意図通りになるようにCSSを組み直してみてください。
いわゆるtableで言うところの、vertical-align="middle" ですよ。 難しく考えないで、そのまま率直に、スタイルシートを書けば良いです。 個人的には、HTML5は古いブラウザには利きませんので、HTML4.01strictで十分だと思います。 サンプルはHTML5 + CSS2.1 です。文字コードはUTF-8 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) で検証済み ★タブは＿に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script> <script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"></script> <![endif]--> <style media="screen"> <!-- header nav ul{ list-style:none; display:table; border-collapse:separate; border-spacing:3px; width:200px; margin:0 auto; padding:0; position:relative; } header nav ul li{ display:table-row; } header nav ul li a{ vertical-align:middle; display:table-cell; border:black 3px solid; padding:2px 2px 2px 64px; width:140px; height:56px; color:white; background-color:black; } header nav ul li a:before{ position:absolute; left:6px; } header nav ul li a[href="./a"]:before{content:url(./images/aa.gif);top:6px;} header nav ul li a[href="./b"]:before{content:url(./images/bb.gif);top:75px} header nav ul li a[href="./c"]:before{content:url(./images/cc.gif);top:144px} header nav ul li a:hover{color:yellow;} header nav ul li a:active{color:red;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="./a">あいうえおかきくけ</a></li> ＿＿＿＿<li><a href="./b">こさしすせそたちつてとなにぬね</a></li> ＿＿＿＿<li><a href="./c">のはひふへほ</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿＿<aside> ＿＿＿<h2>Something aside</h2> ＿＿</aside> ＿</section> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
「PC用」というか、「ブラウザの横幅が広い」状態で見る、と想定しているならば、 width: 650px;もメディアクエリ分けしてあげたら良いのではないでしょうか。 @media only screen and (min-width:1000px){ #content{ width: 650px; } } とか。 min-widthなのか、min-device-widthなのかは是非お好みで。px数もお好みで。 記述内容の詳しい説明は「メディアクエリ 幅」とかで検索したら山ほど出てきます。多分。 もしくは、そもそもcommon-l.cssはスマホ端末では読み込みたくない、 というのであれば、そちらの読み込みをmin-widthで振り分けてあげるとか。 よきcssを！
サンプルのページはFlashで作られてます。 簡単に言うと、全画面Flashのページを作成して、クリックで別のページに遷移しているだけです。 画像クリックで別ページに行く方法はわかると思いますが、 その画像をフェードインさせたいなら普通はjavascriptでやるのが一般的です。 フェードインjQueryのライブラリを検索してみれば、フェードインくらいなら沢山見つかると思うのでそれを使いましょう。 javascriptが全くわからないという事でしたら、超絶な力技ですがフェードインをgifアニメーションで作成するという方法もあります。 それなら、スタートページにはリンク付き画像をひとつ置くだけで済みます。
ブラウザが互換モードで動作しているからです。 1999年のHTML4.01の勧告以来『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1 )』とされてきたのに、他の仕様で作っている、他の仕様であるにしてもブラウザが互換モードで動作するように指定しているからでしょう。 ※以前のIEは、他のブラウザとの差別化、ユーザーの囲い込み、他のブラウザを排除するために独自の解釈をしていました。そのためにIEでしか見れないウェブサイトをたくさん作ってしまいました。 　ところが、世の中Windowsばかりじゃない・・・。そのため世の中がウェブ標準になっても他の世界と解離していった。 　そのために、IEにはウェブ標準モードと、IEの過去の仕様にあわせた互換モードが存在します。標準モードで動作させるためにはDOCTYPE宣言を HTML4.01strictの場合 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> HTML4.01transitinalの場合 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> と書かないとなりません。 　⇒DOCTYPEスイッチ－HTMLの基本( http://www.htmq.com/htmlkihon/302.shtml ) ※そのようなidの使い方は、とてもたくさん見かけますがまずいです。sidebarじゃ何が書かれているか分からないし、将来下に回そうとした時に困るでしょう。しかもidじゃ一箇所しか使えない!!。headerもsidebarもfooterもひとつのHTML内に何度も登場する可能性がある。リンクターゲットやjavasciptのターゲットなどにidを使いましょう。またその名称も後から内容が分かるように・・ ※floatはこの様な場合使用しません。フォントサイズが変わったりすると崩れたり、そして何よりも本文中でfloatが自在に使えなくなります。また、floatさせるために文書の順番を変えるなど文書構造が制約を受けます。 ※サンプルは、リキッドです。480px～920px程度まで伸縮しても崩れない ※IE6以降は中央配置IE5,IE5.5では左による。 ※IE7以前は、min-height,height:100%に対応していないが崩れることはない ※firefox,Opera,Chrome,Safari,IE--Linux版も--で標準で表示される。 ★Another HTML Lint HTML5 - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェック済み ★タブは＿に置換してあるので戻すこと。 [サンプル] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>IE8でサイドバーのレイアウトが崩れる場合の対処法 </title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- p{line-height:1.6em;text-indent:1em;margin:0;} div.header,div.section,div.footer{ width:90%;min-width:470px;max-width:900px; margin:0 auto; padding:5px; } div.section{ position:relative; min-height:200px; } div.section h2,div.section p,div.section div.section{ margin:0 31% 0 0; width:auto; } div.section div.aside{ width:30%;height:100%; position:absolute; top:0;right:0; } /* 参考のため色づけ */ body{background-color:gray;} div.header{background-color:yellow;} div.section{background-color:silver;} div.footer{background-color:lime;} div.aside{background-color:aqua;} div.section div.section{background-color:white;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>IE8でサイドバーのレイアウトが崩れる場合の対処法 </h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>章見出し</h2> ＿＿<p>class名は、HTML5の新しい要素名を参考にしてある。</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>記事だよ</p> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>本文と関係ない記事</h3> ＿＿＿<p>と言う意味でasideとclass名をつけてある。</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
参考URL見ました？ 2)で（1）を表現すると #abc{ margin-top:0; margin-right:20px; margin-bottom:0; margin-left:0;} となります。 (1)のショートハンドでは、(2)は表現できません。0と指定しないは違うので。 デフォルト値が0でない要素の場合は、違いが出ます。 例えば ul>liとかに#abcを使っていた場合など
インラインフレームで呼び出されたHTMLの中に普通にJavaScript書かれてますよ。
#sidebar{ width:320px; float:right; background:green; } と背景background-colorの指定をしているのは、#sidebarだけだからです。 他の要素にもbackground-colorを指定すればよいだけです。 　それよりも、「独学で学んでいる初心者です。」が気になります。独学--私も--であろうと、なかろうと誤った道に入り込むと無駄です。 <div id="container"> <div id="header">ヘッダー</div> <div id="main">メイン</div> 　　　　　　<div id="sidebar">サイドバー</div> <div id="footer">フッター</div> </div> 　のマークアップは、とてもよく見かけますが、その時点で誤りです。DIVの目的は、HTMLに用意してある要素(どのような要素であるかはタグで示す)が足りないときに!! 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』ために存在するのですよ!! 　今後一般化するHTML5の「新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )」を見られるとわかるように!! <body> 　<div class="article"> 　　<div class="header"><h1>ヘッダー</h1></div> 　　<div class="section"><h2>メイン</h2> 　　　<div id="aside"><h3>サイドバー</h3></div> 　　</div> 　　<div class="footer"><h2>フッター</h2></div> 　</div> </body> ・・・・header/section/footeをひとつしか含まないならarticleは不要ですから <body> 　<div class="header"><h1>ヘッダー</h1></div> 　<div class="section"><h2>メイン</h2> 　　<div class="aside"><h3>サイドバー</h3></div> 　</div> 　<div class="footer"><h2>フッター</h2></div> </body> 　だけでも良いです。idではなくclassを使用するのは、これらは文書内に何度も登場するはずのものなのでidではまずいです。HTML5では、そのまま要素(タグ)ですからね。 headerは、記事の見出し sectionは、本文、section内にsectionで見出しレベルが下がる footerは、記事のフッター asideは、本文と直接関係ない記事 ・・html5だと <body> 　<header><h1>ヘッダー</h1></header> 　<section><h2>メイン</h2> 　　<aside><h3>サイドバー</h3></aside> 　</section> 　<footer><h2>フッター</h2></footer> </body> となります。こうしてデザインとは関係なく内容で書かれていると、あとあとのメンテナンスもとっても楽になります。そして、デザインと無関係なので自在にデザインできます。 そのうえで、スタイルシートは 上記最初のHTMLなら・・ div.header,div.section,div.footer{ width:80%;min-width:480px; margin:0 auto; padding:5px; } div.section{ position:relative; min-height:300px; } div.section div.aside{ width:20%; position:absolute; right:0;top:0; height:100%; } div.section h2{ margin-right:21%; } /* 色をつけておく */ div.header{background-color:yellow;} div.section{background-color:lime;} div.aside{background-color:green;} div.footer{background-color:aqua;} div.section h2{background-color:red;} HTML5用なら header,section,footer{ width:80%;min-width:480px; margin:0 auto; padding:5px; } section{ position:relative; min-height:300px; } section aside{ width:20%; position:absolute; right:0;top:0; height:100%; } section h2{ margin-right:21%; } /* 色をつけておく */ header{background-color:yellow;} section{background-color:lime;} aside{background-color:green;} footer{background-color:aqua;} section h2{background-color:red;} ※CSS2以降、基点となるセレクタに続けてセレクタを書きます。 #section は、*#section の意味に解釈されます。#は兎も角classの場合は、基点セレクタを書くほうがわかりやすい。
セレクタ .thumbnail に対してスタイルを適用しようとしていますが，index.html 内に .thumbnail は存在していません。 『自分で作ったコード』には addClass('thumbnail') が抜けているのです。 『自分で作ったコード』の該当部分 img = $('<img>').attr('src', files[i]); これを次のように修正します： img = $('<img>').attr('src', files[i]).addClass('thumbnail'); これにより，jQuery で挿入された img 要素に thumbnail というクラスを当てることができます。 その thumbnail に対してスタイルを適用すれば，思った通りの表示になるはずです。
<header></header>(HTML5)もしくは、<div class="header"></div>、<div id="header"></div>(HTML4)でマークアップされた部分に含まれる要素のうち、左に表示したい物は左に、右に表示したい物は右にスタイルシートで指定すれば良いです。 [HTML5の例] <body> 　<header> 　　<h1>ページタイトル</h1> 　　<p>ページの簡単な説明</p> 　　<nav> 　　　<ol> 　　　　<li><a href="/">Top</a></li> 以下省略 でしたら header h1,header p{margin-keft:50%;min-height:100px;position:relative;} header nav{position:absolute;width:50%;top:0;right:0;height:100%;} [HTML4の例] <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　　<p>ページの簡単な説明</p> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href="/">Top</a></li> 以下省略 でしたら div.header h1,header p{margin-keft:50%;min-height:100px;position:relative;} div.header div.nav{position:absolute;width:50%;top:0;right:0;height:100%;} とでも書けばよい。 　HTMLさえちゃんと書けていれば、スタイルシートでいかようにも指定できます。
結論：スクリプトの不具合と考えられます。 もし修正するなら，スクリプトによる遷移を解除し，デフォルトのリンク動作に戻すのがおすすめです。 考えられる原因は，JavaScript の仕様の違いです。 同じスクリプトの文面でも，各ブラウザがそれぞれわずかに異なった解釈をすることで，意図しない結果を得ることはよくあります。 開発者は Safari 6.0.5 でも動作させるつもりで作成したのでしょうが，不運なことに今回はうまくいかなかったようです。 （１）のテンプレートでは JavaScript がオフの環境も考慮されており，正しく href="#services"，id="services" が設定されています。 オンの環境では，JavaScript によってこのデフォルトの動作（href="#services" をクリックすると id="services" へ移動する）をキャンセルしてから遷移を起こす仕組みになっています。 しかし，JavaScript がオンの状態でもうまく動作しない環境の場合，キャンセルだけが正常になされて遷移が起こらないことになります。 つまり，クリックしても移動しないという結果になるのです。 JavaScript をオフにして試すと，なめらかな動きこそなくなるものの正常に動作するはずです。 簡単な解決方法は，スクリプトによる遷移の動作を取り払うことです。 デフォルトの動作ならばほとんど全てのブラウザで動くはずです。 どうしてもスクリプトによる遷移を行ないたいならば １）正常な動作をするスクリプトに差し替える ２）テンプレートの開発者にバグ報告を行ない，修正してもらう ３）自力でスクリプトを修正する などになります。 １）正常な動作をするスクリプトに差し替える （１）のテンプレートは Smooth Scrolling http://css-tricks.com/snippets/jquery/smooth-scrolling/ を用い，一方（２）のテンプレートは jquery.nicescroll 3.1.2 http://areaaperta.com/nicescroll または Bootstrap http://getbootstrap.com/ を用いているようです（（２）のほうは不確かです）。 これらを取り替え，正しく動くように多少記述を書き換えればうまくいくかもしれません。 また，「スムーズスクロール」という技術はこれら以外にもたくさんあるので，how to サイトを参照して代替スクリプトを用意するのもよいかと思います。 ２）テンプレートの開発者にバグ報告を行ない，修正してもらう テンプレートの開発者に使用状況や現象などを細かく報告し，修正してもらいます。 （１）のテンプレートは onhashchange イベントや location.pushState() メソッドなどの比較的新しい技術を用いているように見えますが，これらと旧ブラウザへの対応がこんぐらがってうまく動いていないと推測しています。 ３）自力でスクリプトを修正する 「スムーズスクロール」で調べればより安定動作する書き方が見つかるかと思いますので，それに倣って修正します。 ちなみに Mac OS X 10.6.8, Safari 5.1.9 では（１）（２）ともに問題なく動作しました。 余談です。 私はスムーズスクロールが好きではありません。 理由は，遷移が遅い点とブラウザの「戻る」が効かない点です。 遷移が遅いのは，スムーズさを強調したいからか，素早すぎると混乱するからでしょうか。 にしても 1000 ミリ秒もかけてもたもた移動する必要はないと思うのです。 ページ内ジャンプのあと先ほど見ていた場所にすぐ戻りたいと思うことはよくありますが，これを叶えてくれるアイテムは今のところブラウザの「戻る」ボタンしか知りません。 しかし，スクリプトによってデフォルトの動作がキャンセルされてしまうと戻ることができません。 この場合，デフォルトの動作を再現するのはスクリプトの責任であるはずですが，そのためにはずっと複雑なアルゴリズムを書く必要があるためか，実践されているのを見かけたことはありません。 デザインとしてはかっこいいのかもしれないけど（私は思わないけど），ユーザーに優しくない気がするのです。 シンプルに，デフォルトのジャンプでいいではないかと思ってしまいます。
＞それともclass名のように或る程度自由に決める事が出来るのでしょうか。 　自由に決めることは出来ません。XHTML(XML)だと自由に決めることが出来ます。 　これには歴史があって、 　HTML自体、本来--その文書をタグを用いて、その文書を構成する要素(element)をマークアップする、言い換えれば文書構造をマークアップするものなのですが、それがデザインに流用されると言うことがされてきました。そのため・・ 　『Webページはより複雑化し、限られた環境にしか適応しなくなり、相互運用性問題に悩まされることとなり、障害を持つ人々にアクセス障壁が設けられてしまう。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/present/styles.html#h-14.1 )』 　正しく理解されていなかったのですが、HTML4の時代から、『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』とされていました。 　その当時から、すでに自由ではなく、class名やidは「文書構造を示す物」だったはずです。そうすることで、検索エンジンはどの部分がheaderであり、どの部分が節--章--項(section)であるかが理解できるはずでした。 　「class名やidが文書構造を示すために使われてこなかった」という反省から、HTML5では、『文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements )』となり、DIVは、原則として使えなくなりました。 　DIVは、文書構造を示す他に適当な要素がないときのための最後の手段として使用する---と変わりました。 　そのために、私は、HTML4であっても極力HTML5の新しい要素名を、class名として使用することにしています。もちろん、その意味も含めて!!! 　⇒3.1. 新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/html5-diff/#new-elements ) に追加すると section　原則としてh1, h2, h3, h4, h5, h6 要素を(ひとつだけ)伴う。sectionの階層とhのレベルは一致する。 　<section> 　　<h2>・・・</h2> 　　<section> 　　　<h3>・・・</h3> 　　　<section> 　　　　<h4>・・</h4> article　内部に<header><section><footer>を持つ、あるいは持つと期待される。 　など・・ 　あなたの質問で示されている『main』『sub』をあえて使用しなかったのは、これらはそれぞれ『main』→section、『sub』→aside,ないしnavになるべき「構成要素」だと判断したからです。 ★class名は文書構造をしめすもの。その名称と意味はHTML5の新しい要素名をモデルとする。 　　将来HTML5が本格的に利用できるようになったとき移行が容易。 　　検索エンジンに正確に内容を示すことが出来る。(SEO) 　　自身も将来のメンテナンスが極めて楽になる。 【参考資料】 　⇒HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/news106_2.html ) 　　の【問題2】 　⇒HTML5タグリファレンス - HTML5.JP( http://www.html5.jp/tag/index.html ) 　　邦訳です。原文は、 　　　⇒HTML5( http://www.w3.org/TR/html5/ )
各会社または個人によって異なってくると思います。 基本的には、ドメイン料とサーバー維持費はクライアント側が払い請求が依頼者(あなた)宛てにされることが多いかと思います。 実際に、依頼する前に確認しておいたほうがいいと思います。 また、ページ修正などでお金が発生する場合、しない場合など制作して完了ではない場合(細かな更新情報の掲載など)もあると思いますのでしっかり確認の上、契約を結ぶことをおすすめいたします。
#2です。 jQuery2.0は、1.9.x系の命令を維持しつつ、旧タイプブラウザへの互換性を捨て、コードをすっきりさせてダウンサイジングし、実行速度を上げたバージョンです。 なので、「1.9.xにしたら動かないプラグインがある」という問題は、そのまま残ります。 あと、1.9.xは、1.8.3から複数の関数を削除して整理したバージョンですが、追加された内容は、おそらくほとんどのjQueryユーザには縁のないものでしょう。 また、1.9.x以降、仕様が必須になった機能は、1.8.3でも普通に動作するものです。 「jQueryの勉強」にも程度がありますが、市販されているjQuery書籍にも、1.8.3準拠（というより1.9だと動かない命令を含んでいる）のものが数多いことから、自分は1.8.3を使います。
どういたしまして。 なるほどやはり私の詰めが甘かったようです。 background-position が上書きされてしまっていることが原因です。 以下の background-position の行を削除し，『background: ... center bottom』を『background: ... center 90%』に書き換えてください。 plan.css の 5 行目あたり body { ... background: url(images/plan/budacenter2.png) no-repeat center bottom; background-position: 0% 90%; ... } これで解決します。 スタイルの上書きやセレクタの優先順位に関する知識が必要なようです。 もしかしたら，IE と FF の違いもここに起因するのかもしれません。 『background-position: ... 90%』と指定していますが，90% を計算するための基準となる長さが IE と FF で違うため，上下位置にずれが生じるという考察です。 ちなみに div#wrapper のセンタリングも正しくないようです。 ブロック要素をセンタリングするには margin: ... auto が常套句です。 margin や padding 周りで余計なことをしていないか，調べてみてください。 ３カラムレイアウトにすることで生じる問題は，文書構造の破綻です。 本来ならば div#wrapper だけが文書に必要であったはずなのに，見た目のために余計な要素を挿入せねばならない点です。 見た目の上ではただ空の div 要素が左右に配置されるだけですが，HTML 文書としては，div#wrapper の前後に無意味な div 要素が存在することになってしまいます。 見る側にとっては実際どうでもよいことなのですが，やはり無意味な要素はひずみを生みやすい。 のちに別の人間が更新を行なう際，このような無意味な要素の存在は混乱のもとですし，間違って消してしまったがために表示崩れに悩む，などの弊害が想像されます。 自分だけで更新するにせよ，たとえばデザイン変更の際にはこの無意味な div たちも気にかけねばならないので，やはりややこしくなります。 また，div#wrapper は 860 px 幅のディスプレイがあれば充分読めたはずなのに，余計な 210 px の div 要素を追加することで，ディスプレイへの要求は 1280 px 幅に跳ね上がってしまいます。 コンテンツは全て見えているのに横スクロールバーが出ているなんて気持ち悪く感じます。 PC に慣れない人だと，最悪の場合ブラウザが壊れたと捉えかねないかも。 左右のカラムにも意味を持たせれば（たとえばメニューや記事へのリンクを置くなど）いいのですが，背景画像の為に構造をまるまる変えねばならない，というのも滑稽な話です。 背景画像などの見た目が最重要なブランドサイトでもない限り，見た目の課題は CSS だけで解決したいところです。 最後に，フリーの WEB デザイナーを目指されているということについてお答えしますが，その前にまず，私が WEB デザイナーではないことをご了承ください。 そうでなければ，これ以降は飛ばしてください。 正直なところまだまだ勉強が必要だと感じました。 スタイルの上書き，それも同じセレクタ内で隣り合った行にある上書き関係すらご自分で解決できなかったわけです。 本職の方々はこれくらい朝飯前でしょうから（私ですらすぐにわかったのです），競争に負けてしまうと思われます。 フリーでやっていくには，アピールポイント以前の問題で，基礎体力すらない状態です。 まずはアルバイトなどの見習いとして業界に入り，学びながら独立のための準備をするのがよいと思われます。 近頃は WEB 関係の専門学校もあるようですから，自己投資してみるのも意味のある行動でしょう。 独学で進めるのであれば，一度 体系的に学ぶことをおすすめします。 私の経験から，余談です。 私は趣味で WEB デザインに触れる過程で，How to サイトだけではなく W3C の仕様書を確認することもよく行ないましたが，これが体系的な知識の整理に繋がったと考えています。 時間こそかかりましたが（趣味なのでいいですよね），それなりの知識をつけたと自分では思っています。 もちろん業界人ではないので，仕事での実践的な知識には欠けるでしょう。 しかし，それらは基礎体力さえあればカバーできることだろうし，業界の新人さんたちも同じスタートラインではないかと思うのです。 このプロセスを賢く短時間でこなす場合，体系的にまとめられた書物を読むのが一番，というのが持論です。
SASS/LESSは、CSSの実装のうち、仕様的に貧弱だった部分を再定義して、近代的な「今風の」仕様に生まれ変わらせるメタ言語です。 単に「CSSを書きやすくする」だけでなく、例えばSASSの "Mixin" や "Extend" など、プログラム的なコード展開や演算子機能の追加、関数の存在など、簡単なマクロ言語環境も持っています。 決して「便利なツール」という位置づけではありません。 また、"Compass" のような多数のビルトインライブラリが使えるため、省力化効果も大きいです。 自分は VisualStudio でSASSパーサを使っていますが、生成されるcssが自動でminify(最適化=改行・コメントを自動削除、複数ファイル連結)されるため、内容を判断する事も出来ません（つうかその必要もないですが）。 また、一か所でも記述にミスがあると、内容が空白のcssが生成されるため、一発でエラーがわかります。 あと、ちょっと誤解があるようですが、SASS/LESS記述ファイルを、ネイティブなCSSに変換する作業は、JavaScriptを使用した「閲覧時リアルタイムパース」だけでなく、専用のコマンドラインツールを使ったり、エディタ（というより統合開発環境）に組み込まれたパーサレンダラで自動実行する方法もあります。 簡単な内容ならリアルタイムパーサでも構いませんが、一般サイトなら、事前にCSS生成しておく方が、スピード的にも有利です。 モバイル開発などを行うと、CSSははっきり言って、もう時代遅れの仕様だと痛感します。 いったんSASSを覚えると、正直、二度とネイティブなCSSは触りたくなくなりますよ。
　:afterで追加される画像は置換インライン要素ですからサイズは画像本来のサイズになります。displayでblockに指定しても利きません。 　スマホがメインの対象でしたら、HTML5、CSS3が利用できますから、6. Border Images( http://www.w3.org/TR/css3-background/#border-images )が使用できます。 <section> <figure> <img src="./images/sample01.jpg" width="480" height="360" alt=""> </figure> <p> テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト </p> </section> の、figureの周囲に画像ボーダーを使用します。画像はz-indexで後ろに回すことになります。
h6.{ h6はタイプセレクタで適用文書がHTMLの場合、HTMLの要素名に該当します。 .はクラスセレクタです。続くclass属性の値のリストの値が書かれていません。 　適用するHTML文書内のh6要素(Element)のうち、class属性の半角スペースで区切られた値リストにその値が含まれているもの(h6要素) 　属性セレクタ [class~="[リスト値]"]と全く同値です。 　 sample2 {}(宣言ブロック)内には、[プロパティ名]:(コロン)[値]を;(セミコロン)で区切って書きます。 line-height: 1; 単位はつけるべきです。 .sample2:after, sample2:before { CSS2.1ですと、基点となるセレクタを書くべきです。*である場合は省略できますが、それでも書いておいたほうがよい。*はCSS1との互換性確保のためにCSS2から追加された全称セレクタと呼ばれる一種の「タイプセレクタ」ですが、詳細度は0です。 <h6 class="sample2">メニュー４</h6> 　文書構造上意味のないclass名をつけるべきではありません。サンプルサイトは説明で必要なので書いていますが、自分のHTMLに使用する場合は、 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4 )』 　です。そうしないと、数年後に見直そうとした時に意味不明になっちゃいます。 　以上が詳しい説明です。 　それぞれの単語は分かっていることとして説明してあります。なぜなら、それぞれの用語が理解できないうちは、まだあなたには早すぎると言う事です。 No.2で示した(4～6)ものに加えて 1 CSS 2.1仕様について( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/about.html ) 2 CSS 2.1の手引き( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/intro.html ) 3 適合性: 必要条件と推奨事項( http://momdo.s35.xrea.com/web-html-test/spec/CSS21/conform.html ) 　を読まれると、理解できるようになります。楽しみに励んでください。 　もちろん、HTMLの仕様書も・・ 　私も、そして、みんな通ってきた道です。!!!!王道なんてありません。コツコツと基本に忠実に学んでいくのが結果的に最短な道です。 　頑張ってください。
mahalo1114 さんの思いとは別に、ソースがいろいろと間違っているから、上手くいかないんですよ。 ｃｓｓ以前に、htmを正しく書きましょう。<ul #menu>とか</div>>とか、ケアレスミスしていませんか？ cssもケアレスミスしています。閉じるべきところは閉じ、閉じすぎているところは削り……、もう一度よくご自分の書かれたソースを点検してみてください。
以下の追加・変更でどうでしょうか。 ＞アコーディオンメニューより右にずれて表示 　　margin-left:0px;　を追加 ＞１行目の位置はそのままに、行間の隙間を調整 　　line-height:20px;　で行間を調整 　　padding-top:10px;　で１行目の壱を調整 ↓ #acMenu dd{ background:#f2f2f2; width:265px; height:150px; line-height:20px; text-align:center; border:#666 1px solid; display:none; padding-top:10px; margin-left:0px; }
＞例えば#mainというidを持ったdiv要素を除いた全てのdiv要素を指定するなど。 全てのdivを対象に設定をして、#mainに別の設定をするのではまずいのですか？
