[mysqld] character_set_server=utf8 mysql再起動ですかね。
文字コードの設定が原因でしょう。 テーブルの文字コード、SQLを実行しているクライアントの文字コード、クライアントを実行しているターミナルの文字コード等々、全体の文字コードがちゃんと合ってないと文字化けします。
>>MYSQLにアクセスのテーブルをアップサイジングはできますか？ テーブルをＭｙＳＱＬに移すことは可能ですよ。 ただし、そのテーブルを使うプログラムとか、諸々も同時に変更が必要なことが多いです。 それに必要な知識が無い方の場合、その対応ができないので、「事実上できない」となります。 アクセスのテーブルをＳＱＬＳｅｒｖｅｒに移行することも同様です。
こんにちは Linux(CentOS7 64bit)搭載サーバー側の設定も必要なのでは？ http://itmemo.net-luck.com/linux-centos-mysql-remote/ とか。
＞　dropしない場合は、どうなるのかという問いです。 データのみをダンプした場合 INSERT 文が出力されるので『追加』が基本ですが、オートインクリメントでIDを振っているなどユニークキーが有る場合は重複する場合があり、その場合はユニーク制約エラーになります。
例えばmemberid=1 cardid=1の組み合わせのすべてのデータから最新のdayを持った1件、memberid=1 cardid=2の組み合わせのすべてのデータから最新のdayを持った１件など、それぞれの組み合わせの最新が1件ずつ欲しいということですか？ SELECT * FROM (SELECT * FROM tb1 ORDER BY day DESC) tbl GROUP BY memberid,cardid これはFROMの後にSELECTがまたありますね。()の中で日付が大きい順に並べ替えたテーブルを作り、それを「tbl」と命名してそのテーブルに対してグルーピングをかけています。
ORDER BY句でidの逆順でとなっていますが、SELECT句にもidがないといけません。 恐らくそれでうまく順序が揃っていないと思います。 頑張ってください。
sql文の問題以前に、その文字列を作成しているプログラミング言語の変数展開について理解してないと思われる。 まずは、作成した文字列　$sql_t　が意図した文字列になっているのかを確認するのが先でしょう。 mysql_query() 関数を使ってるところをみると、php なのだろうけど、他のプログラミング言語の場合は、まずはそれを明記してください。 とりあえず、phpの波括弧構文では " ken.{$tbl_nu1} " なら 「 ken.tbl_1 」 のように展開されますが、 " ken.{'$tbl_nu1'} "では　{''} が残って 「 ken.{'tbl_1'} 」 となり、SQL文としてテーブル名と認識されません。 $の手前に記号がくるのなら波括弧を使わなくても　" ken.$tbl_nu1 "　でも十分だと思うけど。
>1は全て欲しい >2は二つだけの場合です なら1にあわせてください。 SELECT book,title, null, null, null FROM table_2 WHERE city=? みたいな感じで数があうまでnullとかつけとけばいいかと
$dbh->prepare($sql) を実行するとき、$dbh の中身が空なんじゃないですか？ 書かれているプログラム内では $dbh にDB接続インスタンスを入れている箇所が見あたりませんよ。
＞名前はすべて同じで 同じならmaxかminでいいです。
select kakaku, sonota, aman.title from aman bman where aman.bookid=bman.bookid bookidはどちらにもある番号しか選んでいません。 amanのみ、bmanのみを加えるには上記とbmanにないamanとamanにないbmanを unionで結合する必要があります。
>> memberid,city.town, cityとtownの間が「,」ではなく「.」になってます。 恐らくこれが原因かと。
>>SELECT COUNT (*) ここのCOUNTと(*)の間にスペースが入っていることが原因です。 MYSQLは関数の「(」の前にスペースを入れてはいけません。
LIMIT と直後のシングルクオートの間にスペースが入ってないのが原因じゃないでしょうか。 それと、$offset の後の『.''』は不要だと思います。
>・何も選択しなかったらすべて表示。 select cityid , tenki_id, kansou from zyoho; >・例えば東京だけ選ぶと　あつい　乾燥してるの二つのデータ結果。 これはこの2つのセレクトボックスでは無理では無いかと思います。 > ・天気だけを選ぶと出てくるいくつかのデータ結果。 select cityid , tenki_id, kansou from zyoho where tenki_id = 1; >・県、天気を選ぶと絞り込まれたデータ結果。 select cityid , tenki_id, kansou from zyoho where cityid = 1 and tenki_id = 1;
削除対象テーブルとの相関クエリがだめなのかな？先にid のリストが確定すれば大丈夫かな？ delete from keys where id not in ( select id from keys t0 where exists ( select * from (select key, max( year*100+ month ) as max_ym from keys group by key ) as t1 where t0.key=t1.key and t0.year = round( t1.max_ym / 100 ) and t0.month=t1.max_ym % 100 ) );
> http://localhost/security/lang.php?jp > でアクセスしましたが以下の表示でした。 > > Object not found! > : > ご回答にあるように > Ver5.6.11以前のバージョンをインストールした方がよいのでしょうか？ ご確認ありがとうございます。 なるほど・・・ 現バージョンの既存のApacheの設定をいじることで表示できるようにできるみたいですが、古いバージョンを使うのでもよければそのほうが無難かも知れません。 http://hapisupu.com/2015/11/xampp-5-6-14-version-up-fix-no-security/ http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q12151821317 よろしくお願いいたします。
複雑なクエリーとか使わずデータ保存先として使うだけならSQLiteでもいいんじゃないですか。
mysqlのバージョンが古いですが、最新のバージョンだと普通に1行になるみたいですけど。 union allでもしないかぎり最初のテーブルでみるので、title, contentとか関係なく一緒になります。 微妙に値がちがう（空白があるとか）そういうのじゃないんでしょうか？ カラム名が問題なら as とかでrenameしてunionするとどうなるのでしょう？
MySQL 5.7でオプティマイザヒントを使い、レンジオプティマイザをOFFにすればできます。 SELECT /*+ NO_RANGE_OPTIMIZATION(t) */ col1, col2, col3 FROM t WHERE col1 = 'hoge'; みたいな感じで。古いバージョンではできません。詳しくはマニュアルを読んでください。
補足にコメントします。 ＞1.MySQLへ接続させるには２台のPCを通信させなければならないという事にあまりイメージがわきません。PC間の通信設定はファイル共有などする場合のみ必要な環境かと思っておりました。 通信しなかったら、どうやって違うPCのMySQLにつなぎに行くのですか？　テレパシーですか？ ＞現状２台は同じWi-Fi環境下で、もちろん同一のIPでインターネットへ通信できる状況です。同じIPでインターネットへ接続できていたとしても、イントラネット環境を構築しないとMySQL（他サーバー然り）へは接続できないという事でしょうか？ 2台のPCのIPアドレスが同じだったら、お互いの間で通信することはできません。自分と相手の区別がつかないからです。この状態でどうして自分のPC以外で動いているMySQLにつなげられると思うのですか？ ＞その方法の方達はPCの通信設定はできているうえで、ご解決されているのでしょうか。。？ 当然です。
InternalServerError になってますね。 一概にここがおかしいと特定するのは難しいですが、サーバ内の設定やCGIの記述に原因がある可能性が高いです。PHPで記載されているということですので、PHP側のエラーログを確認する、Apache(？)のエラーログを確認する、システムログを確認するといった事をして、具体的なエラーの原因を特定するしか無いと思います。どこかのホスティングサービスを使用されているのでしたらサポート窓口に問い合わせてみるのもいいかもしれません。 早く直るといいですね。
insertとdeleteは一つのSQL文で同時実行はできないと思います。 別で書くなら INSERT INTO tbl_order_old (SELECT * FROM tbl_order WHERE orderday BETWEEN '2015-11-01' AND '2015-11-30'); DELETE FROM tbl_order WHERE orderday BETWEEN '2015-11-01' AND '2015-11-30';
AとBとでは、SQLの目的が異なるように見えます。 Bは2015/11に発売されたアイテムの定価をカテゴリーごとに合算したもの、 Bは2015/11に発売されたアイテムの売上をカテゴリーごとに合算したものに見えます。 例えば、あるアイテムに対してorderテーブル内に5つのレコードがあった場合、Aではそのアイテムに対する価格が5回加算されますが、Bでは1回しか加算されません。 従って、AとBでは結果が異なると思います。
１．本番環境用としてはお勧めしませんが、ご自身の勉強用としてならどれで学んでも構いません。 どれで勉強しても基礎となる考え方は同じですから、まずは書籍に従って一通り勉強してみればいいと思います。 ２．それぞれに良い所、不便な所がありますが、基本的な動作原理、考え方は同じですから、どれか一つキッチリ勉強すれば他のモノもすぐに使いこなせるようになると思います。
ドキュメントルートにindex.html がないと　403のエラーが出ます。 （正確にいうと、Options 設定でIndexesのありなしや、DirectoryIndexでどのファイルを 　指定しているか次第ですが） >ドキュメントルートは下記のとうりです。 >/home/nakahiro7/[ドメイン名]/public_html/ これの注意書きがあるときは、 FFFTPでアップロードするときに /home/nakahiro7/[ドメイン名]/public_html/ に移動してから、index.html等を含むコンテンツをアップロードして 下さいという意味です。 （多分、これまでは、ホームディレクトリの 　/home/nakahiro7/[ドメイン名]/ 　にアップロードしてしまっていたんじゃないですかね）
ご参考に http://qiita.com/mpyw/items/b00b72c5c95aac573b71
それは難しいので uid, name, itemname を取得したのち、他のプログラムで整形するほうが良いです。
試しに、下記のようにしてみてはいかがでしょうか？ SELECT * ... (途中省略) ... AND ((photo1 is not null AND photo1 != '') OR (photo2 is not null AND photo2 != '') OR (photo3 is not null AND photo3 != '')) ... (以下省略); これでも引っかかるようなら、空文字列の問題ではないですね。
oracle でも　カンマによるテーブル結合は inner join だったはず。 mysqlもその規則は同じなので、oracle で実行したSQL文はそのまま実行できます。 よって書き直す必要ないです。 カンマ結合はcross inner join なので、INNER JOIN table2 ON 条件 で先に対象行を絞り込みした方が処理は速くなるといわれているのですが、 最近のmysql(5.1以降) だと全部and で繋いでいる条件式ならば、最適化されて同じ速度になるようです。 いずれにしても、全部 inner join の条件で書くべきでouter join は不要。 FROM m 　inner join h on m.mid = h.mid(+) AND m.tcd = '0' 　inner join p on h.pid = p.pid(+) 　inner join c on m.rcd = c.rcd And c.cid = 'aaa' ;
select id,point from a union select id,point from b order by id でよろしいかな
それじゃ、こうかな？ select プロジェクト, count(distinct 日付), sum(時間) from テーブル group by プロジェクト
postされてきたデータやデータベースなどから持ってきたデータを、html文書に埋め込むときは、htmlspecialchars()関数で、<>や"&を正しくHTML エンティティに変換する必要があります。 cakePHPでも、自動ではありません。ただ、この長たらしい関数を h() として宣言していますので、多用してください。 http://book.cakephp.org/2.0/ja/core-libraries/global-constants-and-functions.html#h
文字列を数値に変換すると表現していますが、実際には文字列に含まれる数字を抽出しているに過ぎません。 しかも文字列の先頭が数字でなければ変換不能と判断します。 「tanaka」には数字が含まれていませんので数値に変換できないと判断し「空」と変換され、数値の「空」はゼロと等価なので「0」です。 試しに「1satou」と言うユーザーを作って見てください。これは id = 1 で検索可能です。 でも「honda2」というユーザーを作っても id = 2 で検索できません。これは最初の1文字目が数字で無いので変換できないと判断して「0」に置き換えられています。
WebアプリでPDFを動的に作るというのなら PHP でなら、TCPDFかFPDFを使うのが定番ではないかと。 固定文書部はPDFを作っておいて、可変部のみそれに差し込みするとなると FPDIを使ってPDFを読み込んで、それに可変部を追加する形になるでしょう。 もしくは、固定文書を含めて、全部TCPDFの命令プログラムで作るか。
どうしたいのか良く分かりませんが所持金を引き算したいのであれば下記です。 update g set g_money=g_money -(select sum(price) from cg where cg.userID=g.UserID)
http://qiita.com/yadok/items/fa72e8ae1d97033be218 レコード数が多く、更新が少ないならばこちらが良いです。
LIKE '文字列%' で、「文字列」で始まるものを検索できます。 LIKE '%文字列' で、「文字列」で終わるものを検索できます。 LIKE '%文字列%' で、「文字列」を含むものを検索できます。 つまり 例えば「文字列でござる」を検索するには LIKE '文字列%' か LIKE '%文字列%' 例えば「これが文字列」を検索するには LIKE '%文字列' か LIKE '%文字列%' 例えば「これ文字列だって」を検索するには LIKE '%文字列%' ですね。 ちなみに、LIKE で条件文字に % を付けない使い方は普通はしません。 検索結果が ＝ (等号) と同じなので、よりシンプルな ＝ を使います。
mysql コマンドは標準入力から SQL を読み込んでも動きますので、JavaScript なり PowerShell なりで SQL を出力するプログラムを作ってパイプで渡せば動かすことができます。 http://blog.goo.ne.jp/dak-ikd/e/973d1ae14c10e70a19f3b0d1b47a53ec
delete 仕入れテーブル where (商品,規格) in (select 商品,規格 from 商品テーブル where 担当 = 'Bさん') and 入荷日='2014/1/2' これでどうでしょうか？
こんにちわ。 演算子の優先順位の影響で意図した結果が得られていないのではないでしょうか？ ORを以下のように括弧でくくってあげるとどうでしょうか？ >+ " AND ((comment_text IS NULL) OR (LENGTH(comment_text) = 0))"
ご参考。 http://labs.timedia.co.jp/2014/10/selecting-max-record-in-group-by.html
文字の後ろに桁数分、空白があるのでセットされないのでしょう。 そもそも型の桁数分、入ることも想定されますので必要な分の桁数にしておくべきです。
こんにちは。 ははぁ・・・なるほど。 以前の質問から順番に読んで、ご質問の意図がわかりました。 LIMIT句を付けた場合のオプティマイザの挙動については、公式ドキュメントを見る事が良い方法です。 MySQLがどのようにクエリーを解釈して実行するかが書かれています。 ご質問にあるメリットは、まさにコレです。 ＞常に少しでも最適、さらに最適な方法がないかを追求していくのが、 ＞面白い仕事のやり方だとも考えます。 同感ですね。 まぁ、追求できない（させてくれない）現場も多々ありますが・・・。
LIMIT句を使えば、もっと簡単に出来るよ。 SELECT TOP 1 * FROM food WHERE food.food_id=1 ORDER BY food.entry_date DESC; つまり、DESCで並び変えて先頭を抽出するだけ。 MySQL LIMIT で検索を！
karute_idというのは何んなんですか。
こんにちわ。 以下のようなテーブル構造とデータの場合で回答させていただきます。 コンソールからのコピペのため読みにくいところはご容赦ください。 【データ部分】 mysql> select * from frame; +----------+--------------+--------------+ | frame_id | reserve_date | reserve_time | +----------+--------------+--------------+ | 1 | 2015-07-15 | 10:20:00 | | 2 | 2015-07-15 | 10:30:00 | | 3 | 2015-07-15 | 10:40:00 | | 4 | 2015-07-15 | 11:40:00 | | 5 | 2015-07-15 | 12:00:00 | +----------+--------------+--------------+ mysql> select * from reserve; +------------+----------+---------------+--------+ | reserve_id | frame_id | customer_name | number | +------------+----------+---------------+--------+ | 1 | 1 | Tanaka | 1 | | 2 | 1 | Yoshida | 2 | | 3 | 1 | Yamada | 3 | | 4 | 1 | Ota | 4 | | 5 | 3 | Huguta | 1 | | 6 | 3 | Tanaka | 2 | | 7 | 3 | tokorozawa | 3 | +------------+----------+---------------+--------+ 【回答部分】 mysql> select A.frame_id,A.reserve_time,count(B.reserve_id) as count from frame -> as A left join reserve as B on A.frame_id = B.frame_id -> where A.reserve_date = "2015-07-15" -> group by A.reserve_time; +----------+--------------+-------+ | frame_id | reserve_time | count | +----------+--------------+-------+ | 1 | 10:20:00 | 4 | | 2 | 10:30:00 | 0 | | 3 | 10:40:00 | 3 | | 4 | 11:40:00 | 0 | | 5 | 12:00:00 | 0 | +----------+--------------+-------+ 上記でcoonyanp様の求めるデータが取得できてるかなと思うのですが、いかがでしょうか？ ご参考になれば幸いです。
http://mountainbigroad.jp/fc5/mysql_java.html
できない場合があるようです。
REPLACEを調べましょう。
下記ではいかがでしょうか？ SELECT * FROM SYOUHIN WHERE 商品ID = (SELECT MAX(商品ID) FROM SYOUHIN);
条件が 指定日以下 抽出内容が Max(日付) で グループ指定すればいいです。
やり方だけ書きますね。 select * from テーブル where 日付=(select max(日付) from テーブル where 日付<='指定日') select * from テーブル where 日付>='指定日' 文法にかなり自信なしｗ
過去に複数ある日付の中から、指定日に、一番近いレコード 過去のレコードを全件selectし、その中から最大値をselectするという二段構えのSQLになるのではないでしょうか。
【お詫び】質問文を正しく理解していませんでした。回答は撤回します。
"SELECT DISTINCT aaa.*" + " FROM aaa" + " WHERE (aaa.flag = false)" + " AND aaa.id NOT IN (SELECT bbb.id FROM bbb" + " WHERE (bbb.flag = false))" って感じでどうかしら？試してないけど。
select user_id, max(date) from your_table group by user_id;
MySQLでは様々な言語（というかキャラクターセット）を取り扱う事ができるが、そのほとんどでデフォルトのCollationはアルファベットの大文字と小文字を区別しないようになっているね。キャラクターセットをUTF8にしてCollationを指定しない場合、Collationはutf8_general_ciというものになり、これはアルファベットの大文字と小文字を区別しない。キャラクターセットがUTF8の時に使用できるCollationは他にutf8_binとutf8_unicode_ciがある。お察しの通り大文字と小文字を区別するようにするためのCollationはutf8_binだ。utf8_unicode_ciは私は使った事無いが日本語のカタカナとヒラガナとかも含めてcase-insensitiveになるらしい。 (1)なので、Collationを指定する。Collationはテーブルカラムに対して行われるので mysql> alter table <テーブル名> modify <カラム名> collate utf8_bin; 面倒であればmysqldumpでダンプを取った後、データベースのデフォルトCollationを変更するか作りなおしてからインポートするといいだろう。 mysql> alter database <データベース名> default character set utf8 collate utf8_bin; (2)冒頭で説明した通りMySQLではほとんどのキャラクターセットのCollationデフォルト値がcase-insensitiveだ。が、多分ほとんどの人は知らずにciのまま使っていると思われる。問題が発生するまではciを使っていることすら意識していないのではないだろうか。 私個人の話になるが、私は（Key-Valueでいうところの）Value値となる項目（例えばブログ記事テーブルのようなものがあればそれのタイトル列や本文列）はci、ハッシュ値となるKey値はci、ID（Primary Key）となるKey値はcsとciを要件によって使い分けている。 > 以下の設定を my.cnf に追加 > - 文字コード関連をutf8に設定 > - lower_case_table_names = 1 このパラメータはファイル名に大文字小文字の区別がない（←正確には違う）Windowsで意味があるもので、Linuxでは不要というか逆に混乱の元になるので0にする方が良いだろう。MySQLはデータベース名はOSディレクトリ、テーブル名はOSファイルと密接に関わるのでこのようなパラメータがある。 大本のデフォルト値を操作したい場合、my.cnfの[mysqld]セクションに collation-server = utf8_bin collation-database = utf8_bin collation-connection = utf8_bin というパラメータを入れるといい。
UPDATE money_table SET shisan= (SELECT SUM( cc.shisan ) FROM cc WHERE cc.user=money_table.user) です。SETの=以下はレコードに対し値が１個設定されるSQL文を書く必要が有ります。
MySQLへの接続が localhost からじゃないって事はないですか？
こんにちわ。 root以外のユーザにgrant権限を付与することは可能です。 参考URLの 【1.管理者用ユーザを作りたい】 をご覧頂ければわかりますが、"WITH GRANT OPTION"でgrant権限をユーザに付与できます。 >GRANT ALL ON *.* TO adminuser@'%' IDENTIFIED BY 'password' WITH GRANT OPTION; そのユーザが持つ権限の範囲内でgrantをできるようです。
かなり無理やりですが、以下のSQLでsujino様の求めるshareディレクトリ部分だけを抜き出せるかと思います。 SELECT SUBSTRING_INDEX(hoge,'/',1) as dir FROM (SELECT SUBSTRING_INDEX(text,'/',-2) hoge FROM test) as tmp; ※testというテーブルのtextカラムににMessageカラムの内容が入っていると思ってください。 '/'で区切った文字列の後ろから二個分('share/(ファイル名)')を取り出し、その後'/'で区切った文字列の前から一個分を取ることで'share'を抽出しています。 もっとまともな書き方があると思いますが、ディレクトリの深さが変わらないのであれば、このSQLでも取れるかと思います。 ただ、アプリケーションを通すのであれば、アプリケーション側で文字列処理を書いた方がよいかと思いますので、ご検討ください。
＞このＳＱＬ文は間違っているでしょうか。 間違っています。 あるテーブルに、IDと言うフィールドがあり、IDが1～10の10個のレコードが入っているとします。 IDが4未満の物だけ、IDを降順に並べて出力するSQL文を考えます。 貴方が考えたSQLと同様にUNIONを使って書くと SELECT * FROM TABLE WHERE ID<4 UNION SELECT * FROM TABLE ORDER BY ID DESC と言うSQL文になります。 このSQL文は、UNIONの前のSELECTの結果 ID:1 ID:2 ID:3 と、UNIONの後のSELECTの結果 ID:10 ID:9 ID:8 ID:7 ID:6 ID:5 ID:4 ID:3 ID:2 ID:1 を、繋げて並べて出力するので ID:1 ID:2 ID:3 ID:10 ID:9 ID:8 ID:7 ID:6 ID:5 ID:4 ID:3 ID:2 ID:1 と言う結果を返します。 欲しい結果は ID:3 ID:2 ID:1 なので、このSQL文は「間違っている」と言う事になります。 IDが4未満の物だけ、IDを降順に並べて出力する、正しいSQL文は SELECT * FROM TABLE WHERE ID<4 ORDER BY ID DESC となります。 従って、貴方がやりたい事は $sql = "SELECT * FROM hospytal WHERE shochi LIKE \"%$keyword%\" order by kuchikomi desc);"; // 口コミ数の降順 です。 WHERE句で絞り込むと同時に、同じSELECT文で、ORDER BY句にDESC修飾を付けて降順で並び替えします。
やってやれないことはないでしょうが、やればいいってもんでもないでしょう。 簡単にSELECTして、並べ替えたらどうですか。
そのようなケースなら、普通なら検索結果をプログラミング言語内で処理すると思いますよ。2重のループにすればいいだけなので大して難しくはないでしょう。私ならそうします。 SQLで取得は、不可能ではないかもしれませんが、できたとしても非常に複雑になるのでやめたほうがいいでしょう。
こんにちは。 rpmでインストール済みでしたら、 以下コマンドでパッケージのchangelogを確認できます。 >rpm -q --changelog mysql-libs 質問者様が確認したい内容とズレていましたらすみません。
>こういった場合、何が原因と考えられるでしょうか？ 何が原因かを考えるより、どうやって原因を特定するかが重要です。 何が原因かは、私はDBがどうとか文字コードの指定がどうとかの前に、そもそもメッセージが空なんじゃないかと思います…。が、そういう予想が正しいかどうかはさておき、私ならまずINSERT直前の「メッセージ」の内容を確認します。 ファイルに書き込むのが現実的でしょうか。それを確認すれば、DBとの接続で情報が失われるのかメッセージの内容に問題があるのか、そもそもメッセージが空なのか切り分け出来ます。
phpMyAdminはMySQLをGUIで操作するためのソフトであって、データベースそのものでは無いので勘違いしないようにしましょう。 本番環境のデータを元にテスト環境を構築するのであれば、エクスポート→インポートが確実で簡単なやりかたですね。 サーバが全く別なのであれば、本番環境のDBを止めてMySQLのデータディレクトリを丸ごとコピーするという手もあります。
>サブクエリで返される複数の行を一列で表示する そもそもfamily テーブルで一列で取得する必要性はあるのでしょうか。 上記のようにしたい理由はなんでしょうか。 SQLで行うよりもサーバサイドのプログラムでやることかなーと思います。
記事数、アクセス数から言えばデータベースにとって負荷と感じることは全く無いレベルのモノです。 サーバのスペック次第ですが、記事数、アクセス数が一万倍くらいになっても平気でしょう。
実現したいことは以下のどちらでしょうか？ 1.社会が50以上または英語が50以下の生徒を抽出する。 2.社会が50以上かつ英語が50以下の生徒を抽出する。 1.の場合は、社会と英語で別々に抽出してもよいのではないでしょうか？ -- 社会 SELECT t_seito.id, t_seito.name, t_score.score FROM t_seito INNER JOIN t_score ON (t_seito.id = t_score.seito_id) WHERE t_score.kyouka_id = 4 AND t_score.score >= 50; -- 英語 SELECT t_seito.id, t_seito.name, t_score.score FROM t_seito INNER JOIN t_score ON (t_seito.id = t_score.seito_id) WHERE t_score.kyouka_id = 5 AND t_score.score <= 50; どうしても1SQLでやりたいなら次のようにもできますが、社会と英語の結果が入り混じります。 SELECT t_seito.id, t_seito.name, t_score.kyouka_id, t_score.score FROM t_seito INNER JOIN t_score ON (t_seito.id = t_score.seito_id) WHERE (t_score.kyouka_id = 4 AND t_score.score >= 50) OR (t_score.kyouka_id = 5 AND t_score.score <= 50); 2.の場合はちょっと複雑ですが、次のような感じでしょうか。 SELECT t_seito.id, t_seito.name, shakai.score, eigo.score FROM t_seito INNER JOIN t_score AS shakai ON (t_seito.id = shakai.seito_id AND shakai.kyouka_id = 4) INNER JOIN t_score AS eigo ON (t_seito.id = eigo.seito_id AND eigo.kyouka_id = 5) WHERE shakai.score >= 50 AND eigo.score <= 50; ちなみに、1.の場合で見やすく抽出する場合は、上記2.のSQLのWHERE部分をANDからORに変更すればOKです。 SELECT t_seito.id, t_seito.name, shakai.score, eigo.score FROM t_seito INNER JOIN t_score AS shakai ON (t_seito.id = shakai.seito_id AND shakai.kyouka_id = 4) INNER JOIN t_score AS eigo ON (t_seito.id = eigo.seito_id AND eigo.kyouka_id = 5) WHERE shakai.score >= 50 OR eigo.score <= 50; 試してないので動作保証できませんが、大体上記のような感じになると思います。
いつも決まったSELECTを行うのであればVIEWを作ってしまうが良いでしょう。
$sql = 'INSERT INTO order(syain,syohinmei,kingaku,timestamp) VALUES("'.$syain.'","'.$syohinmei.'",'.$kingaku.',"'.$timestamp.'")'; ↓ $sql = 'INSERT INTO order(syain,syohinmei,kingaku,timestamp) VALUES(:syain,:syohinmei,:kingaku,:timestamp)';
＞mysql.5.1は無いみたいでした。 残念！ ではこういうのは 99999999 - col2 asc はできませんから order by col1 asc, col2 desc, col3 asc ➡ order by col1 asc ,dummy1 asc , col3 asc として テーブル追加、変更時にdummy1には　99999999 - col2　を値として設定すればよいです。 逃げですけどね。これしかないかな。
mysql はランク関数がないので、必要データを選択して並べ替えて、変数を使ってカウントアップまたは、自己結合で、ランク用のデータ見比べという作業が必要でしょう。 ランキング１：科目毎のランキング（同じstudent_idが１～10位独占等可） １科目ごとなら whereで科目を選択指定して並べ替える。以下だと、全部同じ数値でも、見つけた順に並びますので、３つ同値なら同順とするには、自己結合が必要。プログラム側で取得値を前行値と見比べながら順位をつけていく方が楽かも。 select * , (select @a:= @a+1 from (select @a:=0) dummy) as rank from seiseki where kamoku_id = 1 order by score desc , time asc , created asc ; ランキング２と３は、ランキング１の全科目データがそろってないと取り出せないので、 まずは、ランキングに使う３カラムの値を連結して、並べ替えを単純化する。 desc と asc が混じっているので、一つだけ逆順になってる score を 最高点-scrore としておき、数値の先頭に '0'文字を加えて、文字列の桁数をそろえるには、CONCAT と RIGHT 関数を使う。 以下とりあえずの設定 scrore は 100点満点、time は４桁以内、create は、datetime型とする,createカラムが最初から datetime や date型ならcast不要だけど -- 全科目いっぺんに 並べ替え順のチェック select * , CONCAT(RIGHT(CONCAT('000' , 100-score ), 3 ),'_' , RIGHT(CONCAT('0000', time), 4),'_' ,CAST(created as datetime ) ) as rank_data from seiseki order by kamoku_id , rank_data ; -- rank 付け 自己結合により、同値は上位の同順 select s1.kamoku_id, s1.id, count(s2.id) + 1 as rank from ( select *, CONCAT(RIGHT(CONCAT('000' , 100-score ), 3 ),'_' , RIGHT(CONCAT('0000', time), 4),'_' ,CAST(created as datetime ) ) as rank_data from seiseki ) as s1 left join ( select id,kamoku_id , CONCAT(RIGHT(CONCAT('000' , 100-score ), 3 ),'_' , RIGHT(CONCAT('0000', time), 4),'_' ,CAST(created as datetime ) ) as rank_data from seiseki ) as s2 on s1.rank_data > s2.rank_data and s1.kamoku_id = s2.kamoku_id group by s1.kamoku_id , s1.id order by s1.kamoku_id , rank ; ランキング２：自分（student_id)の全受講履歴と履歴毎のランキング 上記テーブルをサブクエリテーブルとして、取り出す. mysqlは、group by に指定して無くても、連動して一意に決まるとわかっているカラム値の取り出しが可能なので、s1.* で取り出しておく select * from ( select s1.*, count(s2.id) + 1 as rank from ( select *, CONCAT(RIGHT(CONCAT('000' , 100-score ), 3 ),'_' , RIGHT(CONCAT('0000', time), 4),'_' ,CAST(created as datetime ) ) as rank_data from seiseki ) as s1 left join ( select id,kamoku_id , CONCAT(RIGHT(CONCAT('000' , 100-score ), 3 ),'_' , RIGHT(CONCAT('0000', time), 4),'_' ,CAST(created as datetime ) ) as rank_data from seiseki ) as s2 on s1.rank_data > s2.rank_data and s1.kamoku_id = s2.kamoku_id group by s1.kamoku_id , s1.id ) as rank_tbl where student_id = 1 order by created ; ランキング３：id指定時のランキング情報　も　同様に select * from ( select s1.kamoku_id, s1.id, count(s2.id) + 1 as rank from ( select *, CONCAT(RIGHT(CONCAT('000' , 100-score ), 3 ),'_' , RIGHT(CONCAT('0000', time), 4),'_' ,CAST(created as datetime ) ) as rank_data from seiseki ) as s1 left join ( select id,kamoku_id , CONCAT(RIGHT(CONCAT('000' , 100-score ), 3 ),'_' , RIGHT(CONCAT('0000', time), 4),'_' ,CAST(created as datetime ) ) as rank_data from seiseki ) as s2 on s1.rank_data > s2.rank_data and s1.kamoku_id = s2.kamoku_id group by s1.kamoku_id , s1.id ) as rank_tbl where id = 1 ; 件数が大量の場合の実行時間は、不明なので、もし文字連結で、実行時間が大幅にかかるようなら、最初に提示の科ごと選択した並べ替えデータから、プログラム側でさらなる選択をかけることになるかもしれない。
質問の意図がよくわからず回答します。 > 列の1つのデータに対してROUNDを行うのではなく、1つの列全体にROUNDを行うことはできますか？ where条件で絞っているのではないでしょうか？特に条件など指定しなれければ、指定した列に対し、全て処理してくれます。 ex) SELECT ROUND(列名,n) FROM 表名 上記の場合、「列名」の全てに対し、ROUND関数が働きます。 回答になってなかったら、すみません。
http://q.hatena.ne.jp/1332485699 普通のDBだとcheck制約でやりますが、mysqlだと使えないっぽいのでやるとしたらトリガーでやるんですかね。
>この２つの合計を求めたいのです。 これは別々の合計の値でしょうか？ AとCの合算でしょうか？ それによってSQLが多少変わります 以下のようなテーブルデータを想定しました テーブル A, B, C, D -------------- 2, 5, 3, 10 4, 10, 5, 5 6, 5, 7, 10 8, 10, 9, 5 10, 5, 11, 10 <別々に合計の値を算出する場合> SELECT SUM( CASE WHEN B = 10 THEN A ELSE 0 END ) AS 'A合計' ,SUM( CASE WHEN D = 10 THEN C ELSE 0 END ) AS 'C合計' FROM テーブル <結果> 'A合計', 'C合計' ---------------- 12 , 21 <合算する場合> SELECT SUM( CASE WHEN B = 10 THEN A ELSE 0 END ) + SUM( CASE WHEN D = 10 THEN C ELSE 0 END ) AS 'AC合計' FROM テーブル <結果> 'AC合計' --------- 33 以上、参考になれば幸いです
こうですかね？ select kbn, max(point), biko, date from T_DATA where flg = true group by date order by date desc limit 0, 4;
こんにちは。 こちらは参考になりませんか？ http://www.dbonline.jp/mysqlinstall/install/index1.html
SELECT t1.* FROM テーブル t1, テーブル t2 WHERE t1.次の管理番号 = t2.管理番号 AND t1.ステータス = 2 AND t2.表示フラグ = 1; +----------+------------+--------------+------------+ | 管理番号 | ステータス | 次の管理番号 | 表示フラグ | +----------+------------+--------------+------------+ | 2 | 2 | 1 | 0 | +----------+------------+--------------+------------+
とりあえず、順番に検証必要でしょう。 まずは、 php, phpmyadmin , mysqlサーバー のそれぞれのversion確認 phpMyAdminでの接続は、最新版なら mysqliクラスのはずだけど、そこはどのようになってますか？わざわざmysql関数に書き換えたりしてないよね？ インストールしたmampディレクトリー下の phpmyadmin/config.inc.php 内の以下の行チェック $cfg['Servers'][$i]['extension'] = 'mysqli'; で、phpMyAdminで接続できると云うことは、php.iniのmysqli 接続設定はそのときのままでよいということ。php.ini書き換えてphpMyAdminすら繋がらなくなったりしてないかな？ まずは php.ini をもどして apache 再起動。（これが解らなくなっていたら、mampを再インストールして初期値に戻す方が早いかも？？） で、そのときの php.ini の mysqli 用設定で以下の項目を調査。 mysqli.default_port = 3306 mysqli.default_socket = "MySQL" ;; これは、windows のサービス登録のばあい。mac 用はmac 用の記述がすでに php.ini に記載されていたはず ;; mysqli.default_host = →　cakePHP はdatasourceの記述からすると version 2 以降だよね？ 1.3時代と記述方法が違うし、cakePHP1.3時代の情報がかなり引っかかるので情報のversionもよく確認のこと。 cakePHP2.xではpdo 接続なので、socket 接続なら socket キー指定必須 // 以下 database.php記述： propaty 設定部分のみ　抜粋 public $default = array( 'datasource' => 'Database/Mysql', 'port' => 3306, /* php.ini のmysqli.default_port の値 */ 'socket'=> 'MySQL', /* php.ini のmysqli.default_socket の値を転記(大文字小文字も間違わずに転記のこと), 空欄なら、このキー省略 */ 'host' => 'localhost',/* または、'127.0.0.1' 、 php.ini のmysqli.default_hostが空欄なら、このキー省略 */ /* その他 login , password , database , encoding , prefix キーを適宜設定 */ };
行を増やす必要があるので、連続数のテーブルを作っておくか、サブクエリ内にunion で作るかして、連続数のテーブルとjoin すればいける。 interval の最大値が3-4程度なら、連続数テーブルをunionで作って以下のように，元のテーブル名 tbl としている select date_add( tbl.dates , interval nn.n minute) as dates , tbl.id from tbl left join ( select 0 as n union select 1 union select 2 union select 3 union select 4 ) as nn on tbl.interval >= nn.n ; interval の最大値が、10以上なら、0 から 9 の連続数テーブルを作っておくのがよい create table num( n int ); insert into num values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9); 10 以上は、自己結合で生成 select n1*10+n2 as n from num n1 cross join num n2 ; 100 以上は、３つ自己結合 で、元のテーブルにこのサブクエリテーブルをjoin。以下のように select date_add( tbl.dates , interval nn.n minute) as dates , tbl.id from tbl left join (select n1*10+n2 as n from num n1 cross join num n2 ) as nn on tbl.interval >= nn.n order by tbl.id , dates ;
コードの順序として、 '顧客情報検索 'Mysql接続変数定義 Dim con As New ADODB.Connection Dim rs As ADODB.Recordset Dim stSQL As String 'ＳＱＬ文 If Not IsNull(Me!txt顧客ID) And Not IsNull(Me!txt顧客カナ) Then stSQL = "SELECT * FROM t_kokyaku" stSQL = stSQL & " WHERE (CusID =" & Me!txt顧客ID & ")" stSQL = stSQL & " OR (顧客カナ Like '" & Me!txt顧客カナ & "%');" End If If Not IsNull(Me!txt顧客ID) And IsNull(Me!txt顧客カナ) Then stSQL = "SELECT * FROM t_kokyaku" stSQL = stSQL & " WHERE (CusID =" & Me!txt顧客ID & ");" End If If IsNull(Me!txt顧客ID) And Not IsNull(Me!txt顧客カナ) Then stSQL = "SELECT * FROM t_kokyaku" stSQL = stSQL & " WHERE (顧客カナ Like '" & Me!txt顧客カナ & "%');" End If If IsNull(Me!txt顧客ID) And IsNull(Me!txt顧客カナ) Then MsgBox "検索できません" Exit Sub End If Debug.Print "SQL: [" & stSQL & "]" 'DB接続 con.Open "Driver={mySQL ODBC 5.3 Unicode Driver}; Server=localhost; Database=jinq; Uid=jinq_a; Pwd=jinqadmin; " 'ＳＱＬ文実行＆レコードセット代入 Set rs = con.Execute(stSQL) のようにするほうが、いろいろとベターでは、と思います。 MySQLに接続する前に Exit Sub を実行することもありますから。
ログ（ /var/log/mariadb/mariadb.log とか）にはどんなエラーが出てますか？
>>詳しい方、この様な場合はどの様に対処したら良いか教えて下さい。 私はwordpressは詳しくありません。でもＣｅｎｔＯＳは使っていますし、いろんなソフトを導入しています。 そのとき、質問者さんと同様に、うまくいかないことが多いですね。 書籍を見ても、古いバージョンが対象だったり、ネットで参考事例を探すと、それこそ、とても古いバージョンから最新まで、いろいろと混在しています。 また、導入するＯＳが違っていたり、アプリの組み合わせが違っていたりで、すんなりといかないことが多いです。 ブログを探して、質問者さんのように、「うまくいかなかったけど苦労して解決したレポートです」というのが見つかっても、それが古いバージョン対象の話だったりで、がっかりすることがありました。 まずは、エラーメッセージを元に、ネットで同じトラブル事例が無いか探し、それでも解決できなければ、回り道のようですが、付属のソフトのマニュアル（英文？）あるいは、対象のアプリのソースコードを読むのが一番ではないでしょうか？ （私がメールサーバ関係のアプリがうまく動作せず、悩んだとき、ＰＨＰのソースを追いかけて、解決しました。でも、設定ファイルの英文コメントをしっかりと読めば、どうすればいいのか、しっかりと書かれていたのを後で見つけて、くやしい思いをしたものです。）
手っ取り早いのは一度ビューを作ることです。 //準備 create table hoge(id int not null auto_increment primary key,kbn int); insert into hoge(kbn) values(1),(2),(3),(4),(5),(1),(1),(2),(4),(5),(3),(1),(2),(5),(5),(3),(2),(1); //ビューの作成 create view vhoge as select kbn,count(*) as cnt from hoge group by kbn; //集計 select kbn,cnt,(select count(*)+1 from vhoge as v2 where v1.cnt<v2.cnt) as rank from vhoge as v1 order by rank asc; ※もしビューを使いたくないのであればビューに書いたのと同様のSQLをそのまま書きます select kbn,cnt,(select count(*)+1 from (select kbn,count(*) as cnt from hoge group by kbn) as v2 where v1.cnt<v2.cnt) as rank from (select kbn,count(*) as cnt from hoge group by kbn) as v1 order by rank asc
>配列で扱わなければならないのに文字列で扱っていることがエラーの原因なのでしょうか >$last_idのところを配列に直せば良いのでしょうか？ その逆で「文字列を入れるべきところに、配列を充てているので『型変換が発生してますよ』」ということです。$last_id['id'] で取得できるので $stmt->execute(array($last_id['id'],$pro_team)); でよいのでは? 配列については以下が分かりやすいかも。 http://www.phpbook.jp/tutorial/array/ ※直近idの取得には $newID =$conn->lastInsertId(); という関数もあります。御参考まで http://php.net/manual/ja/pdo.lastinsertid.php
０からはじまる連番を得たいだけならこんな感じ SELECT *,(select @a:=@a+1 from (select @a:=-1) as dummy) as zero from tbl select @a:=-1のところは初期値マイナス１の値を与えておきます
ご希望のことはできないと思います。 商品テーブルをエクセルなどで開いておいてidと名前を参照すればいいのではないでしょうか？
＞複数テーブルだと実行できないように理解しましたが、 そうですね ＞何が問題か教えてください。 そもそもupdate でlimitをすること自体がイレギュラーな処理です where句で厳密に条件を提示するべきですね とはいえ、以下のようにリレーションする部分をあらかじめ処理したうえで その結果をうけて処理するればできないことはなさそうです。 //元データ create table tbl1(id int not null primary key,data int,flag tinyint not null); insert into tbl1(id,data) values(1,11),(2,12),(3,13),(5,15),(6,16); create table tbl2(id int not null primary key,data int,flag tinyint not null); insert into tbl2(id,data) values(1,21),(2,22),(4,24),(5,25); //とりあえず確認 select * from tbl1; →flagはすべて0 //limitしないupdate update tbl1,tbl2 set tbl1.flag=1 where tbl1.id=tbl2.id; //確認 select * from tbl1; →3件flagが1になる //１回クリア update tbl1 set tbl1.flag=0; select * from tbl1; →flagはすべて0 //tbl1のid順で上位1件をupdate update tbl1 set flag=1 where id in (select * from (select tbl1.id from tbl1 inner join tbl2 on tbl1.id=tbl2.id order by tbl1.id asc limit 1) as sub); //確認 select * from tbl1; →1件だけflagが1になる ※サブクエリはlimitを利用できないので一度ダミーで処理をいれる
//元データ create table tbl(id int,name varchar(20),number int,score int); insert into tbl values(1,'tanaka',358,98),(3,'tanaka',358,23),(4,'tanaka',358,45),(11,'yamada',126,63),(17,'yamada',126,77),(23,'suzuki',274,36),(45,'suzuki',274,16),(59,'suzuki',274,89),(73,'suzuki',274,75),(80,'hanako',89,24); //検索 select * from tbl where number in( select number from (select number from tbl group by number order by min(id) asc limit 2) as sub ) order by id asc; 考え方 select number from tbl group by number order by min(id) asc limit 2 で、idの小さい２人分のnumberを抜き出し そのnumberを持つ全データを抜き出す。 本来であれば select * from tbl where number in( select number from tbl group by number order by min(id) asc limit 2 ) order by id asc; でいければ楽なのですが、通常のサブクエリにlimitが使えないので一度select文でうける
接続先の mySQL が特に何も設定を変更していない のであれば、以下のページが参考になるかもしれません。 http://immature.01kawa.com/database/phpmyadmin/phpmyadmin%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E6%96%87%E5%AD%97%E5%8C%96%E3%81%91/
　Ｎｏ２．補足宛 　ＭｙＳＱＬが、いかに物理ドライブの物理ファイルを「意識しなくてもプログラミング」出来るようにという目的で作られたとはいえ、システムの管理者は物理構造を意識しないと仕事になりません。データを格納しているわけですから、データを格納する場所が必要なのは当然で、その場所は必然的に、ファイルとなります。 　ただ、そのファイル構造が複雑なので、単純なコピー・ペーストではデータベースをコピーすることは出来ませんよというだけの話です。（ちなみに、ちゃんと構造と動きを理解して、必要な手順を踏めば、ファイルのコピーでのデータベースのコピーも有りです。かなり難しいので普通はしません。データベースをコピーするにはもっと簡単で便利な方法がありますから。） 　アクセスでは、データを管理するのはひとつのファイルだけでしたが、ＭｙＳＱＬでは、データベースを管理するために、複数のファイルが絡み合って管理されます。単純なＭｙＩＳＡＭタイプのデータベースでさえ、３つのファイルで構成され、しかも、そのファイルの内容は、グローバルなカタログデータベースとの絡みが存在します。カタログデータベースの存在を考えれば、関係するファイル数はもっと増えると言うことです。 　そのあたりの構造を全部ここに書くのはさすがに無理です。 　リファレンスマニュアルの（例えば、５．１なら日本語マニュアルがあります。ここです。http://mysql.stu.edu.tw/doc/refman/5.1/ja/index.html）2章・４章・13章あたりを熟読してください。直接の答えは、13章にあります。 　ファイルの場所は、デフォルトのインストールのまま設定を変えていなければ、MySQLのインストールフォルダーの中のdata\mysqlとdata\データベース名 あたりでしょう。データベース生成時にもフォルダ指定が出来るので、その場合は、そこになります。 　
MySQLを正常に停止させてからデータフォルダを丸ごとコピーして、新しいPCでMySQLの設定ファイル（my.cnfまたはmy.ini）のデータフォルダの場所を書き換えて、新しいPCでMySQLを起動すれば動くと思います。 但し、バージョンが大きく異なる場合は問題が発生する場合があるので、その場合はmysqldump.exeでダンプを取って、新しいPCのMySQLにインポートするといいでしょう。
>ロックは複数のプロセスから同時にアクセスしないよう トランザクションで処理すればいいだけでは？ innoDBでテーブルロックは普通はあり得ない運用スタイルです
select * from (select * from infomation where start_dt <= '2014/01/10' and (end_dt >= '2014/01/10' or end_dt is null) order by end_dt desc, start_dt desc limit 3) as a order by a.start_dt desc;
delete 文のエラーは、相関クエリかどうかよりも、 where 句内のサブクエリのfrom句に直接、deleteやinsert の対象テーブルが置けないということだった。サブクエリ内from句にさらにサブクエリテーブルにしてやればokのようなので、row コンストラクタを使って組み合わせチェック方式にする。 -- 削除用修正 delete from treepath where row( ascendant_id, descendant_id ) in ( select p.ascendant_id, c.descendant_id from ( select ascendant_id from treepath where descendant_id = 4 and ascendant_id !=4 ) as p , ( select descendant_id from treepath where ascendant_id = 4 ) as c ); 「プログラム側で in リストに数値を書き入れたSQL文作成」とは、結構ごり押しで、目的SQL文を作る方法です。 -- 基本はトランザクション内での実行で、まずサブクエリにしているselect文に for update をいれて、必要id 取得, ここでは２つのサブクエリがあるので、２つそれぞれ発行が必要 select ascendant_id from treepath where descendant_id = 4 and ascendant_id != 4 for update ; select descendant_id from treepath where ascendant_id = 4 for update ; -- プログラムは php などで、データベース接続ですよね？取り出したidリストの配列からphpの文字列編集で以下のような文字列にしてクエリ発行 delete from treepath where ascendant_id in (1, 2) and decendant_id in (4, 6); 「ツリー編集のケース」になにがあるかは、いわれてみればそうですね。　挿入のみ、削除のみなら、上記と前回提示のinsert 文などそれぞれ1文でいけるから、２文必要なのは枝替えだけかな？でも、自由編集だとこの枝替えのほうが頻繁に発生するような気がしたので、頻度認識がずれていたようです。 あと、同じ親内部での兄弟ノード表示順変更は、番号自体の変更が必要になったりするので、もとのitem テーブルのid そのままではなく、表示順用 id みたいなのを作ったりしてました（経路列挙で作った時）。ネスト集合だと、左右位置情報で、順番替えが行われるから、表示順がidに依存しないという利点があります、SQL文考えるの面倒だけど。
select * from infomation where start_dt <= '2014/01/10' and end_dt >= '2014/01/10' order by start_dt desc end_dt desc limit 3 でいいですか？
AWSはともかくデータベースの特性上エクスポートせずに別のデータベースへの移行は ほぼほぼ難しいかと もしリプリケーションできるならとりあえず試してみる価値はあるかも
共通id にauto_increment値は使わない意見に賛成。 その場合でも、トランザクションにしないと、片方のテーブルにのみ挿入できてもう一方は挿入されない事態は発生する。 mysql_(iが付かない)関数群はトランザクション機能の無かった時代の遺物なので（トランザクションもトリガーも未対応）、 mysqliクラスかPDOクラス群を使って下さい。 あと、mysql サーバーのversion が5.1 以降であることと、テーブル作成時に innodb エンジンを指定している必要があります。
＞１を入れる部分で文章みたいなのを入れてみたのですが、できませんでした。 ＞1の部分は数字じゃなきゃできないでしょうか？ はて？以下試してみてください //元データ create table tbl (id int ,data001 varchar(10) null ,data002 varchar(10) null); insert into tbl values(1,'aaa','bbb'),(2,null,'ccc'),(3,'ddd',null),(4,null,null),(5,'',''); //更新 update tbl set data002=if(data001 is not null and data002 is null,'hoge',data002),data001=coalesce(data001,'fuga') where data001 is null or data002 is null; ちなみにnullと''は別なのは理解いただいていますよね？
普通、条件分岐はIFやCASEを使います。 SELECT IF(`総額` / `個数` < 10000,10000,`総額` / `個数`); SELECT CASE WHEN `総額` / `個数` < 10000 THEN 10000 ELSE `総額` / `個数` END; ただ単に「大きいほう」なら SELECT GREATEST(`総額` / `個数`,10000); でも構いません。
この場合はusr_trmでユーザーごとのtrmを確認しないといけないのでは？ select t1.usr_id,t3.name ,group_concat(if(t2.cat_id=1,t1.trm_id,null)) as cat1 ,group_concat(if(t2.cat_id=2,t1.trm_id,null)) as cat2 from usr_trm as t1 inner join trm as t2 on t1.trm_id=t2.trm_id inner join usr as t3 on t1.usr_id=t3.usr_id inner join usr_trm as t4 on t4.usr_id=t1.usr_id and t4.trm_id=3 group by usr_id order by rand() limit 10; ＞総務に所属する人をランダムにn件 便利な機能だとは思いますが、SQLは明確な結果を得るための手段なので 不確実なrand処理を選ぶのは、個人的にはお勧めいたしかねます
＞データベースを読み込む部分だけ文字化け これはプログラムでDBからデータを取得しているという認識でよろしいですか？ その際、PHPを利用していますか？PHPのバージョンによって処理が異なりますが charsetを指定してやればよいと思います http://php.net/manual/ja/ref.pdo-mysql.connection.php
delete 仕入れテーブル where (商品,規格) in (select 商品,規格 from 商品テーブル where 担当 = 'Bさん')
select t1.usr_id,t3.name ,group_concat(if(cat_id=1,t1.trm_id,null)) as cat1 ,group_concat(if(cat_id=2,t1.trm_id,null)) as cat2 from usr_trm as t1 inner join trm as t2 on t1.trm_id=t2.trm_id inner join usr as t3 on t1.usr_id=t3.usr_id group by usr_id
どうしてもコマンドプロンプトが大好きというなら cmdで開いたコマンドプロンプトの左上のアイコンをクリックして メニューをだし、プロパティー→レイアウトでウィンドウの幅を調整できます ちなみに、コマンドプロンプトからというと以下どちらのパターンでしょうか？ (1)mysqlクライアントでログインしてselectを発行 (2)mysqlにリダイレクトでselectを流し込み結果を標準出力に得ている (1)ならinto outfile構文を使って、(2)であればファイル出力演算子をつかって ファイルに落とし込んでしまえば、好きなエディタで確認できます コマンドプロンプトでなくてもいいならphpMyAdminなどのツールをつかうか odbc経由でアプリで確認するなどGUIな処理の方がより見やすくなると思います
mysqlへのアクセスはどうやっていますか？ →コマンドラインからmysqlコマンドでsqlを流し込んで実行している →コマンドラインからmysqlのクライアントを利用している →phpMyAdminなどを利用している →odbc（ほか）経由でアプリから利用している →phpやperlなどプログラムから所定の手続きを経てデータをとりだしている 文字化けについては利用環境にあわせた照合順序を設定すればよいですが 一度化けた状態でデータが保存されるととりだせない可能性もあります
＞何かおかしなところがございましたらご指摘いただけたらありがたい DBの部分はまぁよいとして、htmlに組み込むところを少し調整した方がよいようです こんな風にしておくと、htmlの部分がぐちゃぐちゃにならずにプログラムとの 親和性があがります とくに例示では$_POSTの中身をそのまま出力していましたが、さすがにNGです <?PHP $value=array(); //想定するデータを初期化しておく $value['name']=""; if(isset($_REQUEST['name'])){ $value['name']=htmlspecialchars($_REQUEST['name'],ENT_QUOTES,'UTF-8'); } $checked=array(); //想定するデータを初期化しておく $checked['team_id']=array(1=>"",2=>"",3=>"",4=>"",5=>""); if(isset($_REQUEST['team_id']) and is_array($_REQUEST['team_id'])){ foreach($_REQUEST['team_id'] as $val){ $checked['team_id'][$val]=" checked"; } } print <<<eof <form> <input type="hidden" name="cmd" value="search" /> <table> <tr> <th class="th_top">選手名</th> <td class="td_top"> <input type="text" name="name" size="30" value="{$value['name']}"> </td> </tr> <tr> <th>チーム名</th> <td> <input type="checkbox" name="team_id[]" value="1"{$checked['team_id'][1]}/>名古屋 <input type="checkbox" name="team_id[]" value="2"{$checked['team_id'][2]}/>徳島 <input type="checkbox" name="team_id[]" value="3"{$checked['team_id'][3]}/>千葉 <input type="checkbox" name="team_id[]" value="4"{$checked['team_id'][4]}/>浦和 <input type="checkbox" name="team_id[]" value="5"{$checked['team_id'][5]}/>磐田<br /> </td> </tr> </table> <p> <input type="submit" value="検索"> <input type="reset" value="リセット"> </p> </form> eof;
基本的にMySQLではFULL OUTER JOINはできませんが、 今回の命題ではそもそもJOINじゃなくてテーブルの統合ですよね？ であればどちらかのテーブルにもう片方を流し込むか、あらたなテーブルをつくって 両方流し込むのが妥当では？ とりあえず統合するキーになるカラムがprimaryもしくはunique属性で処理されている 前提で解説します。 例示のものだとテーブル1（データベースじゃないですよね？）にテーブル2を 流し込みたいと読めるので INSERT IGNORE INTO テーブル1(カラム1,カラム2,・・・・) SELECT カラム1相当のカラム,カラム2相当のカラム,・・・・ FROM テーブル2; ※テーブル2に該当するカラムがないならNULLを指定する とすれば既にテーブル1にあるテーブル2のデータは無視され、テーブル1にないものだけ あらたに挿入されます。 逆にテーブル1に競合データがあってもテーブル2で上書きするなら INSERT ON DUPLICATE KEY UPDATE構文が有効かもしれません。 新規でテーブルをつくるのであれば、CREATE TABLEするさいに有効なユニーク属性を 設定したうえで、テーブル1、テーブル2の順番で流し込めばいいでしょう また無理やりFULL OUTER JOINするなら、キーになる絡むだけUNIONして サブクエリを作っておくかVIEWを用意しておき、そこにテーブル1とテーブル2を LEFT JOINすればよいのでは？
＞結局「MySQLのユーザー」は自動的に「Linuxのユーザー」になっているということですか。 うまく伝わらないのがもどかしいですが 仮にlinuxのユーザーがaaa,bbb,cccとありその他rootがいるとします またmysqlのユーザーがaaa,xxx,yyyとありその他rootがいるとします (1)linuxのユーザーはmysqlのユーザーと全く別物 linuxにあるbbb,cccはmysqlのユーザーとしては存在しません またmysqlにあるxxx,yyyはlinuxのユーザーとして存在しません たまたまaaaという同じ名前がある場合もあるし、rootのように 管理者を明示するようなある程度定型なユーザーも存在します。 (2)linuxに存在しないユーザーでもmysqlにログインできる かりにaaaさんがxxxでmysqlにログインすることはできるし 同様にaaaさんがrootとしてログインすることもできます もちろんaaaさんがaaaとしてログインすることもできます とうぜんlinux上のrootが、yyyという一般ユーザーでログインすることもできます 繰り返しになりますがlinuxのユーザーはmysqlにとって直接意味はありません。 (3)プログラムは特定のlinuxユーザー権限で動いている mysqld（サーバー）は起動時のオプションの指定で 特定の権限で動くことになります。 もっとつっこんで言えばすべてのlinuxのプログラムは「誰か」の権限で 動いています。 理論上mysqldをlinuxのroot権限で動作させることは可能ですが、 セキュリティ上の問題で万が一mysqldがセキュリティホールを利用して乗っ取られた ときに、root権限で動いていればlinuxシステムに対してroot権限をもつことができ システム全体が乗っ取られる危険があります。 したがってmysqldは「mysql」という特別なユーザー（この場合の特別とは 特別に権限を制限された・・・という意味に近い）によって実行されるわけです (4)サーバーの実行権限者がlinuxファイルシステムへの実行権限者になる 仮に自分がlinuxのrootで、rootとしてmysqlにログインしたとしても outfileする際に発揮できるのはサーバーが実行されている「mysql」という （限定された）ユーザーの権限でしかありません。 mysqlにログインしているのは「クライアント」としてログインしているにすぎず mysqldは常に「自分はmysql権限でしかうごかないよ」と認識しているからです 結論としてselect * from テーブル into outfile "/tmp/test.txt"; でファイル出力する場合、そのファイルの所有者はmysqlでしかなく ls -la /tmp/test.txtとすると、mysql所有であることが確認できます 私の説明の仕方もわるく、うまく理解してもらえないのは申し訳ないですが 一度linuxの入門書から読み始めて最低限linuxがどうやって動いているか 学習されることをお勧めします
http://liginc.co.jp/web/programming/mysql/87393
データベースのデータ型はあくまでデフォルトの提案値でしかないので テーブルのデータ型がInnoDBと表示されていれば問題ありません。 ちなみにMySQL5.5からテーブル作成時のデフォルトデータ型がInnoDBになったようですね ご利用の環境がMyISAMと表示されているということはそれより前のバージョンなのでしょう。
＞＞質問3.select だから意味があります。 ただの読み込みではなく、「更新のための読み込み」であるということを明示しています。 updateやinsertは更新と決まっています。 ＞BIGIN; UPDATE tb_a SET price = 残高-10000 WHERE id = xxx; INSERT tb_a (price) VALUE (10000) WHERE id = yyy; COMMIT; ですよね？ 合ってます。 ２行だけロックされて他からは読み込めません。 ＞これはつまり、SELECT～FOR UPDATEとは選択のためのクエリーではなく「行ロックします」というクエリーなのですか？ そして上のBIGIN～UPDATE～INSERT～COMMITは以下のように書かないといけないのでしょうか？ BIGIN; SELECT * FROM tb_a WHERE id = xxx FOR UPDATE; SELECT * FROM tb_a WHERE id = yyy FOR UPDATE; UPDATE tb_a SET price = 残高-10000 WHERE id = xxx; INSERT tb_a (price) VALUE (10000) WHERE id = yyy; COMMIT; 読みたいときにselect,更新したいときにupdate、追加したいときにinsertでいいです。 つまり、上２行のselect は不要なのですが、 UPDATE tb_a SET price = 残高-10000 WHERE id = xxx; ここ、残高は先に読んで10000円あるかどうか確認しないといけませんよね。 こういう場合は SELECT 残高 FROM tb_a WHERE id = xxx FOR UPDATE; UPDATE tb_a SET price = 残高-10000 WHERE id = xxx; となります。 他の情報で10000円があることが確認されていればselectは不要になります。
もしかして XXX>=開始 AND XXX<=終了日 ということ！？
PRIMARY KEYを設定してください。 create table if not exists name_list (no int(100) not null auto_increment PRIMARY KEY, name varchar(100) not null) ところで、、、 以前、create table if not existsというクエリを流せばいいと回答しましたが、 サーバサイドで動かしているプログラムは基本的にテーブルありきで実装すると思います。 ですからIF NOT EXISTSというようにするというのはちょっとおかしいかな？と思いました。
SQLとして CREATE TABLE IF NOT EXISTS を流せばよいと思います。 http://www.dbonline.jp/mysql/table/index1.html
＞if($rows && !empty($_POST['numberSearch'])){ $_POST['numberSearch']が"0"のときemptyで評価すると正となります !emptyですから偽ですね emptyは理論的な空ですから 空文字列""、整数の0、浮動小数点数の0、文字列の"0"、NULL、FALSE、 空の配列array()、変数が宣言されているが値が設定されていない変数 などすべて空とみなします。 http://php.net/manual/ja/function.empty.php ちなみにSQLで参照するのにWHERE句に検索文字を入れない意味がわからない。 また古いmysql_系の関数を使い続けるはデメリットしかないので リプレースを検討してください
＞ちなみに、phpMyAdminのデータがなかったという状態です。 であれば ＞$sql = "INSERT INTO ideamemo_table (color, title, contents, create) VALUES ('$color', '$title', '$contents', '$create');"; で与えている各変数$color,$title,$contents,$createがきちんと入っていないのかも この直後に以下をして確認してみてください print $sql; また、mysql_query($sql, $con);がエラーを吐いているかもしれないので mysql_query($sql, $con) or die(mysql_error()); でエラーを拾うのも手です。 ＞mysqli()関数などを用いた方がいいってことですよね？ mysql_関数から一番移植性が高いのはmysqli_関数の手続き型です。 ただしあくまでもコンパチな機能なので可能であればPDOなど 現時点で標準的な仕様に切り替えた方がよいとおもいます
どこで詰まっているかがよくわかりませんが すでに正規化がされているのですから商品管理テーブルを用意してい 商品ID、商品固有のデータ、ブランドID、性別ID、カテゴリーID、 ブランドサイズID、インタナショナルサイズID を入れていけばよいでしょう。 たとえば売上集計用に販売管理テーブルが必要になった場合一番単純なモデルで 商品ID、数量、金額、日付 などを入れておけばよいです。 ただしご指摘の通り効率的な集計をしたいのであれば販売管理テーブルに それぞれのIDまで埋め込んでインデックスを貼っておけば おそらく数倍～数十倍高速化ができます。
＞１つずつチェックをするのは非常に非効率 (1)ページングする つまり１ページに表示するデータ数を制限する また１ページ当たりの表示数ルはユーザーが任意に選べるようにする （10、50、100くらいの大雑把に） (2)ページごとにすべてチェックする・すべてチェックを外す を選べるようにする (3)データの引き継ぎにはセッションをつかう とすればある程度まとまった単位で処理できるとおもいます ただし、1万件のデータを選んだあと印刷実行というのはミスが頻発しそうです。 選ぶ画面はあくまで選ぶ画面として確定までしてしまい 印刷は確定データをつかって選択画面なしに印刷した方がよいのでは？
#2です ちなみにこんな感じ？ //元データ create table item_genre(item_id int, genre_id int); insert into item_genre values(1,1),(1,2),(1,3),(2,1),(2,3),(2,4),(2,6); create table user_genre(user_id int,genre_id int); insert into user_genre values(1,1),(1,3),(2,1),(2,3),(2,4),(3,1),(3,3),(3,4),(3,5),(4,1),(4,4),(5,5); //結果 select user_id,item_id from user_genre as ug inner join item_genre as ig on ug.genre_id=ig.genre_id group by user_id,item_id having (user_id,count(*)) in (select user_id,count(*) from user_genre group by user_id); user4(user_id=4)は希望ジャンルが2個、item1(item_id=1)はジャンルが3個なので ジャンル数だけで考えればuser4はitem1に含まれますが、item1はgenre_id=4を 含まないので対象外、item2はジャンル1も4も持つため対象 user5(user_id=4)はgenre_id=5しか持たず、itemリストにgenre_id=5を持つ要素がないため 対象外
どちらにしても、DISKのどこかに不具合があるようですね。 WindowsならCheckdiskなどしてみるのがいいかもです。 DISKが９９％一杯なんてことはないですよね。
mysqldumpのオプションに--default-character-set=ujisを指定するとどうですか？ もともとの作成データベースはeucjpmsのほうがいいようですが。
utf8固定なのでできません。 http://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_character_set_system
ブラウザ経由でデータベース操作出来るようなWebページの作成と、そのWebページをおくWebサーバの構築が必要になるよ。 で、WebページにDB操作用のプログラムコードを書いたり、Webページ画面用のXHTMLを書いたり。 多いのはOSSのApache WebサーバとPHPの組合せ。このへんは、構築予定のマシンのOS、OS のバージョンに対応したソフトウェアとテキストが入手できないと、はじめて取り組むときは大変かも。 まあ図書館なり本屋なりでPHP 入門書を探して自分にあってると感じたのを選べばいいと思うけど。
あ、ごめんなさい itemテーブルにデータをつっこんだときに itemテーブル自信をアップデートするということですか？ http://dev.mysql.com/doc/refman/5.1/ja/routine-restrictions.html その関数やトリガを実行したステートメントが ( 読み取り、または書込みに ) すでに使用しているテーブルを改変することはできない ・・・という制限があります
技術的な話になると微妙ですが結論からいえばサブクエリが問題になることはまずありません じつは今回のSQLも select member_no ,member_name,max(title2) as max_title2 from member inner join rireki on rireki_member_no=member_no where title2 between '2014-09-13' AND '2014-09-19' と書くとわずかに効率的になるのですが、本来のSQLの書き方からいうと じゃっかんズルをしているところがあるのであまりお勧めしません。 いずれにしてもきちんとインデックスを設定しておけば、スピードに大差はないでしょう。 どうしてもカリカリにチューニングをしなくてはいけない場合に 調整項目としてはサブクエリを除外する検討が必要になってくるかもしれません
http://ma-bank.com/item/600 失礼！ 仕事に出かける直前だったのでチラ見で回答。 やり方は、上記サイトを！
　まず、やっていいこと、いけないこと。から。 ＞これは日付（開催日）で代用しようと思っています。同じ日に2試合は「絶対に」ないので。 　この部分は、極めて正しい対応です。 　でも、 ＞1試合で一方のチームが10点を取ることは「限りなく0に近いので」とりあえず10用意する。 　これは、絶対にやってはいけません。こういう事をやった時に限って、１００年に一度しか無い、11対１５なんてスコアに巡り会うことになります。（迷信のようだというなかれ。マーフィーの法則として知られる法則群の一つです。限りなく０％に近い確率で起こることは、何れ、必ず、そして最悪のタイミングで発生すると言います。） 　さて、全部をテーブル化しようとすると、スペースにも限りが有るので、考え方の一つを紹介しておきます。 　まず、属性がいろいろと出ていますが、その属性が、「何に依存するものなのか？」を考えます。言い換えると、何が決まれば、その属性を特定することが出来るかです。 　例えば、ホームチームの１ゲームの得点で有れば、開催日と開催場所が決まれば、必ず特定できますね。（もし、有るチームの試合に対して「だけ」のデータであれば、開催場所は不要です。） 　この組み合わせで特定できる属性の他の例は、ホーム・アウェイの各チームの監督名とか、主審名とか、１ゲーム全体に関わる属性群となります。 　さて、有るゴールの得点者は、何に依存しているでしょう？開催日と開催場所と、発生時間（試合開始からのタイム）となります。 　さて、こうやって、全部の属性が、何に依存しているかを整理してみましょう。 　こうやって作業していった時に、「開催日と開催場所」とか、「開催日と開催場所と、発生時間」とかいった有る事象を特定するためのキーになる物を主キーとします。 　そして、主キーに依存しているものを全て、テーブルの項目としてテーブル内に格納します。 　（こうすれば、ゴール１・ゴール２・・・・なんて項目にはならないはずです。ある特定の時間に発生するゴールは絶対に１つだからです。） 　考え方によっては、「開催日と開催場所、発生時間」の組で特定できるものが他にもあります。警告や反則の発生です。これも、ゴールと同じテーブルに入れることが出来ます。ただし、この場合は、この時間に何が起こったのかを記録するフィールドがひとつ必要になります。その代わり、ゴールも警告も反則もとにかく、ゲーム中に発生したイベントは全てこのテーブルに格納できます。 　 　ここで注意するのは、どちらのチームで発生したのか（どちらのチームの得点になったか）は、記録の必要はありません。選手名が解れば、各チームの選手リストを登録してあるテーブルから調べられますからね。 　 　むやみにテーブルを増やす必要はありませんが、テーブルを分けるのを怖がってはいけません。事象を特定するためのキーが異なる時は、あっさりとテーブルを分けましょう。 　この作業を、「正規化」と言います。（かなり作業を簡略化しています。ここまでを正しくやれば、第２正規化と言われる部分までの作業が終わるはずです。「ここで注意するのは」の項が見落としなく配慮出来れば、第３正規化まで終わるはずです。普通は、ここまで出来れば、よしとされます。） 　データベースのテーブル設計をする時には、避けて通れない作業ですから、根気よくやってみてください。この作業が正しく出来れば、次にデータベースを使うアプリケーションを作るのが、ぐっと楽になります。 　頑張ってくださいね。
修正版、itemテーブルはlevelだけ拡張しました ユーザーごとのtypeは別テーブルで管理します。 CREATE TABLE IF NOT EXISTS item ( id int(11) NOT NULL AUTO_INCREMENT, parent_id INT, name varchar(32) NOT NULL, level int NOT NULL, PRIMARY KEY(id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; →itemにデータ投入 INSERT INTO item (parent_id, name) VALUES (null, 'item1'); INSERT INTO item (parent_id, name) VALUES (1, 'item2'); INSERT INTO item (parent_id, name) VALUES (2, 'item3'); INSERT INTO item (parent_id, name) VALUES (3, 'item4'); INSERT INTO item (parent_id, name) VALUES (2, 'item5'); INSERT INTO item (parent_id, name) VALUES (null, 'item6'); INSERT INTO item (parent_id, name) VALUES (6, 'item7'); INSERT INTO item (parent_id, name) VALUES (null, 'item8'); →itemテーブルのlevelをセットします DROP PROCEDURE IF EXISTS UPDATE_LEVEL; DELIMITER // CREATE PROCEDURE UPDATE_LEVEL() BEGIN DECLARE CNT INT; DECLARE LVL INT; SET LVL=1; UPDATE item SET level=0; UPDATE item SET level=LVL WHERE parent_id IS NULL; SELECT COUNT(*) INTO CNT FROM item WHERE level=LVL; WHILE CNT>0 DO UPDATE item INNER JOIN (SELECT id FROM item WHERE level=LVL) as temp ON parent_id=temp.id SET item.level=LVL+1; SET LVL=LVL+1; SELECT COUNT(*) INTO CNT FROM item WHERE level=LVL; END WHILE; END // DELIMITER ; CALL UPDATE_LEVEL(); →user_itemテーブルと、user_item_typeテーブルをつくり CREATE TABLE IF NOT EXISTS user_item ( user_id INT, item_id INT, type varchar(16) NOT NULL, UNIQUE(user_id,item_id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE IF NOT EXISTS user_item_type ( user_id INT, item_id INT, type varchar(16) NULL, UNIQUE(user_id,item_id) ); →プロシージャを作っておきます。 DROP PROCEDURE IF EXISTS UPDATE_ITEM_TYPE; DELIMITER // CREATE PROCEDURE UPDATE_ITEM_TYPE(IN num INT) BEGIN DECLARE LVL INT; DECLARE MAX_LVL INT; SET LVL=2; SELECT MAX(level) INTO MAX_LVL FROM item; DELETE FROM user_item_type WHERE user_id=num; INSERT INTO user_item_type(user_id,item_id,type) SELECT num,id,type FROM item LEFT JOIN user_item ON user_item.item_id=item.id AND user_item.user_id=num WHERE item.level=1; WHILE LVL<=MAX_LVL DO INSERT INTO user_item_type(user_id,item_id,type) SELECT num,t1.id,COALESCE(type, (SELECT type FROM user_item_type WHERE user_id=num AND item_id=t1.parent_id)) FROM item as t1 LEFT JOIN user_item ON user_item.item_id=t1.id AND user_item.user_id=num INNER JOIN item as t2 ON t2.id=t1.parent_id WHERE t1.level=LVL; SET LVL=LVL+1; END WHILE; END // DELIMITER ; →item_userテーブルが変更されるたびにUPDATE_ITEM_TYPEを実行します DROP TRIGGER IF EXISTS TRG_INSERT_USER_ITEM; DELIMITER // CREATE TRIGGER TRG_INSERT_USER_ITEM AFTER INSERT ON user_item FOR EACH ROW BEGIN CALL UPDATE_ITEM_TYPE(NEW.user_id); END; // DELIMITER ; DROP TRIGGER IF EXISTS TRG_DELETE_USER_ITEM; DELIMITER // CREATE TRIGGER TRG_DELETE_USER_ITEM AFTER DELETE ON user_item FOR EACH ROW BEGIN CALL UPDATE_ITEM_TYPE(OLD.user_id); END; // DELIMITER ; DROP TRIGGER IF EXISTS TRG_UPDATE_USER_ITEM; DELIMITER // CREATE TRIGGER TRG_UPDATE_USER_ITEM AFTER UPDATE ON user_item FOR EACH ROW BEGIN CALL UPDATE_ITEM_TYPE(NEW.user_id); END; // DELIMITER ; →user_itemにデータ投入 INSERT INTO user_item (user_id, item_id, type) VALUES (1, 1, 'allow'); INSERT INTO user_item (user_id, item_id, type) VALUES (1, 3, 'deny'); INSERT INTO user_item (user_id, item_id, type) VALUES (1, 7, 'allow'); INSERT INTO user_item (user_id, item_id, type) VALUES (2, 1, 'allow'); INSERT INTO user_item (user_id, item_id, type) VALUES (2, 2, 'deny'); INSERT INTO user_item (user_id, item_id, type) VALUES (2, 8, 'allow'); INSERT INTO user_item (user_id, item_id, type) VALUES (3, 1, 'deny'); →ユーザーごとのallowを表示 SELECT id as item_id,user_id,parent_id,name,type FROM item INNER JOIN user_item_type ON id=item_id WHERE AND type='allow';
実用にはidとdateの組み合わせがユニークであるという条件が必要ですね 処理的にはこう select * from tbl where (id,date) in (select id,max(date) from tbl group by id);
MySQLと連携するアプリでCSVをSQL文に変換しながら投入すればいいのでは？
よくあるランク付けの方法を応用すればよいでしょう。 まず、id順でitem_idごとにランクをつけます SELECT id,user_id,item_id,( SELECT COUNT(DISTINCT id) +1 FROM user_item AS t2 WHERE 1 AND t1.id > t2.id AND t1.item_id=t2.item_id ) AS rank FROM `user_item` AS t1; これを元に、user_idが1、rankが1のものを抽出します。 なお上記rank項目はHAVING句に移動します SELECT id,user_id,item_id FROM `user_item` AS t1 WHERE user_id=1 HAVING ( SELECT COUNT(DISTINCT id) +1 FROM user_item as t2 WHERE 1 AND t1.id > t2.id AND t1.item_id=t2.item_id )=1;
この構造はとても集計する気があるとは思えませんが、 unionすればできないことはないでしょう select id,region,null as station,0 as sort from tb1 union select id,region,station1,1 from tb1 where not station1 is null union select id,region,station2,2 from tb1 where not station2 is null union select id,region,station3,3 from tb1 where not station3 is null union select id,region,station4,4 from tb1 where not station4 is null union select id,region,station5,5 from tb1 where not station5 is null order by id,sort
SELECT * FROM m_nendo WHERE sdate <= '2014/03/31' and edate >'2014/03/31' ではなくて SELECT * FROM m_nendo WHERE sdate <= '2014/03/31' and edate >='2014/03/31' ですね
検索方法が本当にその2つだけならPRIMARYとpost_id以外のインデックス要らんと思うぞなもし。 後で各SNSや合計のSNSシェア数のトップ10（※１）を出したい、とかが出てきたらその時に各列単独でインデックス張ればいいんでないの。 SNSシェア数はBTREEインデックスよりHASHインデックスの方がいいかも。いや、変わらんかも。 うーん。やっぱりカーディナリ値が低すぎてインデックスの効果ないような気がするな。 こういうときこそOracle EEのBITMAPインデックスなんだけどな。超高いけど。 （※１）例えばtotalなら select post_id from tablename order by total desc limit 10 offset 0 とかか。 ～～～～ ところで、そもそもIDという列要るかな？　普通にpost_idが主キーじゃだめなの？
とりあえずトリガーつかってみてください http://dev.mysql.com/doc/refman/5.1/ja/create-trigger.html 基本的にはテーブルごとに、追加・削除・更新のトリガーを それぞれ作っておくとよいでしょう。 ちなみに微妙なのが「ユーザー名」の扱いですね 通常、mysqlのアクセスは管理者、編集者、読者程度のユーザーを設定し それに対して、webアプリなどでアクセスして更新する際に 代理で作業をさせると思います したがって、質問者さんがいうユーザーが、実質上のユーザー（作業者）であるなら そのユーザー名を渡してあげないといけないし、mysql上のユーザー（権限者）であるなら それを取得する必要があります。
マシンBに２つmysqlを立てればいけるんじゃない？ そうでなく１つのmysqlプロセスでやりたいという場合は 理論的に命題がなりたっていないような・・・ A=B、B=CでA!=Cということですよね？
>データーベース設計する際、店舗と通販は別々のテーブルを作成する必要があるのでしょうか？ 出荷元テーブルをつくって出荷元コードに店舗と通販を別コードで登録すればいいでしょう 店舗数と通販数はそれぞれ１つずつですか？ 複数店舗、複数通販サイトを管理するのであれば、出荷元テーブルだけでなく 出荷属性テーブルで、店舗と通販を分けておくと 店舗の合計出荷や通販の合計出荷など属性ごとに集計ができるようになります。 （厳密には分けなくてもいけますが、分けた方がより集計しやすい）
オンライン中は更新途中のファイルが数多く存在します。 更新中にディレクトリーでコピーされたものは整合性がなく、 万が一の時に戻しても整合性エラーでデータベースが立ち上がらなくなります。
SQLか検索を使ってデータを絞り込んだらデータの一覧が表示されると思います。 その一覧の下の方に「クエリ結果操作」というのがあって、エクスポートを選択するとエクスポートの設定画面に遷移しますので、フォーマットをCSVにして実行するとエクスポートできます。
誤差の出るケースを吟味して、一定の条件が見つかれば、それを元に計算式を変えればいいと思います。
cd PDO_MYSQL-1.0.2 のあとに phpize で作られます
ロックを掛けた接続内では、ブロックされないので、ロック状況の取得は出来ないようです。 テスト状況を作るには、２つ以上の接続を作って、一つは、ロックしたままとする必要があるので、コマンドラインクライアントと、xampp(apache)などのhttpサーバー経由しphpでmysql接続とを駆使して、以下のようにしてみると、どのようにロックが行われているかを見ることが出来ます。 [1]. コマンドラインクライアントから、ロックする > lock tables `xx_tbl` write; [2]. phpで、上記ロックしたtableにアクセスするphpプログラム実行 select * from `xx_tbl` 　　しかし、writeロックがかかってるので、待機状態になり、結果は返ってこない 　　とりあえず、このウィンドウはこのままおいて [3]. ブラウザの別ウィンドウまたは別のタブから、以下を発行するphpプログラム実行 show processlist; 　→　３スレッドが返ってくる i: コマンドラインクライアントのスレッド、接続のままさわってなければ、sleep ii: ロックテーブルにアクセス待機中スレッド、Stateカラム に waiting という記述、Infoカラムに、待機中クエリの内容 　　ブロックされたクエリが表示されるだけなので、from 句からロック中のテーブルを推測するしかできない。 iii: show processlist;　を発行したスレッド。Infoカラムにそのクエリ [4]. コマンドラインクライアント で、ロック解除 > unlock tables; 　[2] のウィンドウをそのまま開いていれば、待機終了して、データ取得した結果が表示される。 ということで、ロック中のテーブルへさらに他からアクセスしている時しか、それを関知することはできないようです。
＞Excelのファイルを直接読み込むことができるような機能 SQL文をExcelでざっとつくって、コピペでphpMyAdminに貼りつければ 済む話のような気がしますが・・・
yambejpさん来てくれてよかったですね。いつも博雅適切なご回答拝見しています。 さて、ざっと見ですみませんが、こちらが想定していたこだわり条件テーブルは kid | noiyo 1　 |新築 2　 |南向き 3　 |セキュリティ充実 ～ という「定義だけ」のものでした。この場合、bukkenテーブル本体の方には SET型のカラムを作り、 | kids | | 1,3,5,8 | のように該当するkidを(複数可のカンマ区切りで)入れておきます。なのでクエリは単純で SELECT * FROM bukken WHERE (price BETWEEN '1000' AND '3000') AND (address LIKE "%名古屋市西区%" OR address LIKE "%名古屋市東区%" ～) AND ( FIND_IN_SET("2",kids) AND FIND_IN_SET("3",kids) AND FIND_IN_SET("5",kids) ) のような感じで済むはずです。(実際には*ではなくきちんとカラム名を) また、地域は、address欄をLIKEで検索すると別テーブルが不要な反面、遅いですから、物件数や対象地域の範囲により、できれば 市町村コードなど利用すればずっと速くなるかと。 その場合はbukkenテーブルにエリアコードのカラムを作成・挿入しておけば、クエリは (area_code IN (23102,23103,23104)) /* 北区 or 東区 or 西区の例 */ のようになります。 ご参考まで。 http://www.soumu.go.jp/denshijiti/code.html
垂直分割、水平分割といったキーワードで調べてみられると良いかと思います。 http://www.slideshare.net/infinite_loop/socialgame-db-slice
commitしてみては？
select *,datediff(`out`,`in`) diff from office order by diff asc; ○年×日というのはうるう年など勘案すると正確にだすのは工夫が必要なので 日数で表示したほうがよいでしょう
select id,date,max(cost) as cost from tbl where id=129 group by id,date
(1)日本語を使うケースはほぼ100%ないですね (2)セキュリティはあまり関係ないでしょう カラム名を検索者がダイレクトに指定することはまずありえないので カラム名の日本語でインジェクションが発生する可能性はほぼありません。 逆に万が一もしそういう仕組みを考えているならすぐ見直すべきです。 (3)上で否定しておいてなんですが・・・ 自分でやる環境はほぼ日本語カラム名をつかっています。 他人を気遣う必要がなく迷惑をかけないなら日本語で十分です。 余談 日本語ではまるケースはいろいろ想定されます。 とくにMySQLのバージョンアップ、枯れたシステムの3.23系から5.0以上に 環境をシフトする際にかなりトラブリました。 システム周りの環境はは数年単位でかわっていくものです。 別環境に移行する準備を当初から想定しておかないと、かなり痛い目を見ます。 また、メンテナンスする際も、かならずしも日本語入力できる環境とは 限らないことから、日本語を利用することによるリスクは高めに想定しておく 必要があります。なんらかの日本語が入力できない状況で、データベースから エクスポートをしようとしてはまるとか、ないことはないと思います。 バグやエラーなど一般的なトラブルの際にも、日本語に起因する問題なのか そうでないのか、無駄にチェックが増えるので、デバグも不利になります。 全部ひっくるめて、自分でなんとかする覚悟と技量があるなら、日本語カラム名で やるメリットはあるので、トライする価値はあるでしょう
自分目線であればそんな感じの管理なんでしょうね さて命題の件は //仮データ create table game(issue varchar(10),h_a varchar(10),h_score int,a_score int,opponent varchar(20)); insert into game values( '●','H','8','9','チームB'),( '○','A','2','8','チームC'),( '●','H','4','9','チームD'),( '○','A','3','4','チームB'),( '●','H','0','1','チームB'),( '△','A','3','3','チームC'),( '△','H','1','1','チームE'); として（集計結果をみるためすこしデータいじってます） (1) select (h_a='H')*h_score + (h_a='A')*a_score as score ,issue,opponent from game order by score desc; (2) select opponent,coalesce(sum(issue='○')/(sum(issue='○')+sum(issue='●')),0) as ratio from game group by opponent order by ratio desc; となります。ポイントは ＞勝率は「勝った試合数÷（勝った試合数+負けた試合数）*100」 とする場合、引き分けしかない相手をどうするかですね いわゆる勝ち点方式のように引き分けも評価対象にしないと 引き分けが多いチームとの力関係が相対評価できないと思います 今回はcoalesce関数で引き分けだけの関係は負けと同等としています また、自分がホームかアウェーかわかっていてそれぞれの点数がわかっているので issueとダブルバインドしている点が気になります。 最初の書き込みでうっかり間違えたとおり、issueによる勝ち負けと 点数によって勝ち負け判断の整合性があわなくなる場合もあり、 何をもって勝ち負けをジャッジするか決めておかないと計算があわなくなります。
　カラム名やテーブル名等の名前を「識別子」と言います。 　さて、識別子の作り方にはルールがあるわけですが、MySQLにおけるルールは、次のＵＲＬのページに書かれています。（これは、5.1のものです。） 　http://dev.mysql.com/doc/refman/5.1/ja/identifiers.html 　さて、このページを読むと、「識別子に予約語を使用してはならない。」というルールはどこにも書かれていません。 　そう。そんなルールは無いのです。 　ただし、次のように書かれています。 ＞識別子が予約語、もしくは特殊文字を含む場合、 参照する時必ず引用符で囲まなければいけません。 ＞(例外：修飾名内で点の後に続く語は識別子であるため、予約語であっても引用符で囲む必要はあり ＞ません。) 　つまり、文法に従うだけなら、引用符で囲みさえすれば、予約であっても斟酌なしに使っても良いということです。 　従って、事例としてあげられたALTER文は、立派に合法的な文です。決して、MySQLがとちっているわけではありません。（ちなみに、CREATE TABLE文でも引用符で囲むことを忘れなければ、ちゃんと通ります。） 　ですが・・・普通は、やめておくことをお勧めします。 　特に、サードパーティーのツールで、このあたりの解釈が厳密に出来ていないものにぶつかるとトラブルの元になります。 　
select year(date) as Y, month(date) as M, name, sum(price) from SAMPLE_TABLE group by Y, M, name って感じ？
あ・・・$rowsの宣言がされてないですね while($row = $stmt->fetch(PDO::FETCH_ASSOC)){ $rows[]=$row; }; の直前に $rows=array(); としといた方がいいかもしれません。
複数列というのがちょっと面倒なところですが こんな感じでどうでしょう？ //元データ CREATE TABLE tbl (id int not null primary key,d1 int,d2 int,d3 int,d4 int,d5 int,index(d1,d2,d3,d4,d5)); INSERT INTO tbl VALUES(1,1,2,3,4,2),(2,5,4,3,2,1),(3,4,2,1,5,3),(4,2,4,5,1,1),(5,3,2,1,1,2),(6,1,1,1,5,1),(7,2,3,1,5,1); //集計 SELECT id ,d1,COALESCE((d1=m1),0) as f1 ,d2,COALESCE((d2=m2),0) as f2 ,d3,COALESCE((d3=m3),0) as f3 ,d4,COALESCE((d4=m4),0) as f4 ,d5,COALESCE((d5=m5),0) as f5 FROM tbl LEFT JOIN (SELECT MAX(d1) as m1,MAX(d2) as m2,MAX(d3) as m3,MAX(d4) as m4,MAX(d5) as m5 FROM tbl) as sub ON d1=m1 or d2=m2 or d3=m3 or d4=m4 or d5=m5 ORDER BY id
＞＞あまり最初から詰め込みすぎずに、徐々に条件を付けていった方がいいですよ ＞ということはもっと単純な条件式で大丈夫なのでしょうか？ え～と、そういうことではなく、たくさん条件を最初から書くと どの条件節でエラーになっているかわかりづらくなるということです。 今回の質問であれば「こだわり」の部分が問題だったのですから ほかの上限や下限料金、住所などはばっさりコメントアウトしてまえば エラーの切り分けができるので、どこを直せばいいか絞り込めます。 デバグをするときにはなるべく簡潔な処理まで切り詰めた方がいいということです。 （まぁ複合バグもあるのでケースバイケースですが・・・） ＞LEFT OUTER JOINを変更して ちなみに、こまかく見てないのでなんともいえませんが 今回の例だとLEFT JOINした場合はWHEREやHAVINGの処理をかませないと 絞り込みになっていないかもしれません ＞何もcheckboxや他の項目をチェックしなかったら、全てのホテルが表示されてしまします。 ＞本当はチェックしなかったら、表示されないようにしたいのですが。 通常の絞り込みのロジックはこう WHERE 1 AND 条件1 AND 条件2 ・・・ AND検索なのですべての条件に当てはまるものが絞り込まれます。 条件が何もない場合なにも表示しないなら フラグ管理して、条件句に条件を付加していくときにフラグを立てるようにし フラグが0の際には条件句の最後に「AND 0」を足せばいいでしょう。 $flag=0; $sql="SELECT * FROM tbl WHERE 1 "; if(条件1){ $sql.="AND hoge='hogehoge' "; flag=1; } if(条件2){ $sql.="AND fuga BETWEEN 'xxx' AND 'yyy' "; flag=1; } if(条件3){ $sql.="AND piyo LIKE 'zzz%' "; flag=1; } if($flag==0){ $sql.="AND 0 "; }
#3です PHPへの組み込みについては、今後学習していただくとして 一応SQLのサンプル //ホテルの基本情報 CREATE TABLE t_hotels(id int not null primary key,name varchar(100) not null,price_min int not null,price_max int not null,address varchar(100) not null); INSERT INTO t_hotels VALUES(1,'HOTEL A',5000,10000,'栃木県・・・'), (2,'HOTEL B',5000,12000,'栃木県・・・'), (3,'HOTEL C',6000,9000,'千葉県・・・'), (4,'HOTEL D',5000,10000,'千葉県・・・'), (5,'HOTEL E',4000,5000,'埼玉県・・・'), (6,'HOTEL F',15000,30000,'東京都・・・'), (7,'HOTEL G',12000,40000,'神奈川県・・・'); //こだわり情報 CREATE TABLE t_kodawari_key(id int not null primary key,name varchar(20)); INSERT INTO t_kodawari_key VALUES(1,'温泉'),(2,'ランチ'),(3,' ディナー'); //ホテルごとのこだわり CREATE TABLE t_hotel_kodawari(hid int not null,kid int not null,unique key(hid,kid)); INSERT INTO t_hotel_kodawari VALUES(1,1),(1,2),(1,3),(2,1),(3,2),(3,3),(4,3); //温泉かランチにこだわりがあるところ SELECT hid,t3.name,t3.price_min,t3.price_max,GROUP_CONCAT(t2.name) as kodawari,t3.address FROM t_hotel_kodawari as t1 INNER JOIN t_kodawari_key as t2 ON t1.kid=t2.id AND t1.kid IN (1,2) INNER JOIN t_hotels as t3 ON t3.id=t1.hid GROUP BY hid //温泉かランチかディナーのうち２つ以上にこだわりがあるところ SELECT hid,t3.name,t3.price_min,t3.price_max,GROUP_CONCAT(t2.name) as kodawari,t3.address FROM t_hotel_kodawari as t1 INNER JOIN t_kodawari_key as t2 ON t1.kid=t2.id AND t1.kid IN (1,2,3) INNER JOIN t_hotels as t3 ON t3.id=t1.hid GROUP BY hid HAVING count(*)>=2
＞mysql4.0.25 かなり古いバージョンので、試す環境がないのですが MySQL5系でチェックすると CREATE TABLE `tbl`(`data` VARCHAR(20)) CHARACTER SET `ujis` COLLATE `ujis_japanese_ci` ; INSERT INTO `tbl` VALUES('あいうえお'),('あういおえ'),('おあういえ'),('えあいうお'),('かきくけこ'); と、しておいて SELECT * FROM `tbl` WHERE `data` LIKE BINARY 'あ%'; SELECT * FROM `tbl` WHERE `data` LIKE BINARY '%あ%'; SELECT * FROM `tbl` WHERE `data` LIKE BINARY 'あい%'; SELECT * FROM `tbl` WHERE `data` LIKE BINARY '%あい%'; をそれぞれ実行しても、想定どおりの戻りがあるので特に問題なさそうですね COLLATEについては`ujis_bin`でも問題ないです。 なにか入力みすか勘違いのような気がしますが・・・
＞ご指摘の通りに書き換えましたが、検索できませんでした。 一番高い可能性としては、POSTされたデータのキャラクターコードと DBに格納されたキャラクターコードが異なるということです この手のテストをする場合はキャラクターコードでの差異が出づらい 「英数字のみ」でまずテストをすることをお勧めします。 ここで動作確認ができたら次の段階として日本語検索を試してください プリペアドステートメントについてはphpマニュアルなどご一読ください http://www.php.net//manual/ja/pdo.prepared-statements.php
＞msであれば、まず遅い部類に入らない認識 運用方法によりますけど、1秒かからない処理なら普通に待てるんじゃないですかねぇ とはいえ、きちんとチェックしながら集計文を推敲すれば数倍～数十倍の 高速化ができるケースもあるので、常にチューニングに手を抜かない姿勢が必要ですね もちろん、運用上1分以上とか、10分以上処理に時間がかかるものもあります。 そういうものは予約型のUIを作るなど仕組みを考えないと、使用者が待ってくれません。 逆に定期的な締め処理的なものをいれると、その処理自体は1時間かかっても、 処理後の集計を高速にできたりするので、定型の集計が多い場合は検討すると よいかもしれません。 また、システム側からも継続的な過負荷がかかる処理を何本も走らせられないので 一定の処理待ちが発生した場合タイムアウト処理が必要になります。 たとえば、1時間返ってこない処理は、もしかしたらそのまま1日返ってこないかもしれない むしろ一生返ってこないかもしれないので、どこかで見切りをつける必要があるでしょう
phpMyAdminでサーバ接続の照合順序および、各テーブルの照合順序を確認し それに合わせたコード指定を、phpから接続するときに指定してやる PDO、mysqli関数のオブジェクト型、手続き型それぞれによって微妙に 指定が違うのでそれぞれの接続方法にあわせた指定が肝要 （接続後に「set names」を発行するのはNGといわれていますので注意）
＞どうすればこれを修正することができるのでしょうか？ 具体的なSQL文がわからないのでなんとも言えませんが おそらくGROUP BYで日付でMAXをとったままの式で金額を抽出しているのでは？ MAXでとった日付をサブクエリとして利用しないと適正なあたいは得られませんね
Bがカラムとして存在しなければいけない理由は何でしょう？ selectするときにifでデータを作るとか、viewでBカラムに相当するデータを動的に生成するとかではダメなのでしょうか。
stored function からは procedure 経由でも prepared 文は発行できないようです。function自体がprepared に近い機構で動作してて多重prepareは出来ないんだとかいう理由だったような？細かい理由は英文マニュアル参照。 とりあえず、日本語マニュアルには、一文ですまされてますが。 http://dev.mysql.com/doc/refman/5.1-olh/ja/sql-syntax-prepared-statements.html 後半に以下の一文 「準備済みステートメントの SQL 構文はストアドプロシージャー内で利用できますが、ストアドファンクションやトリガー内では利用できません。」 procedure 側へ、データ取りだしSQL文も渡して、procedure内で完結させるしかないのでは？ procedure の連鎖は可能なんだし。 それとも、以下の記事のように、 Gearman MySQL UDF をインストールしたうえでさらに、別アプリケーションから実行とか？ http://d.hatena.ne.jp/heavenshell/20100610/1276161261 上記は、自前MySQLサーバーでないと無理かと思うけど、どういう状況における何のログなのかによっても、取り得る方法は変わってくるでしょう。
0　　　TARO　（ID 2, 3をフォロー） 1　　　HANAKO　(ID 3をフォロー) 2　　　JACK　(ID 0をフォロー) 3　　　TOM　(誰もフォローしていない) でしたら id(主キー),name 0　　　TARO 1　　　HANAKO 2　　　JACK 3　　　TOM と id , follower_ids(idとfollower_idsの複合で主キー) 0 2 2 0 3 0 3 1 ですね。前者のテーブルはidの数だけレコード。 後者のテーブルはフォロワーの延べ数だけあればよいかと。 主キーは数字でなくて文字でもユニーク(一意)であればOKです。
今回の例ですと 「FROMにテーブルを列記する」のと「LEFT JOIN」で結合するのは、 あきらかにやっていることが違います。 なので処理速度の優劣を考える意味がありません。 もしやるならINNER JOINですね 実際abcdテーブルとhogeテーブルに適切なインデックスが設定されていれば FROMだけで処理してもJOINしても負荷は変わらないはずです。 基本的にはEXPLAIN文でSQL文の効率化を検証することができます。 http://dev.mysql.com/doc/refman/5.1/ja/explain.html 個人的にはFROMでテーブルの列記よりJOINする方が 依存関係が分かりやすく、またJOIN語のSQL文に対してWHEREで絞り込みを したりできて便利なので使用頻度は多いです。
MySQLでは、テーブルの別名は、select のfrom節で as でエイリアス振るしか方法がありません。つまり、各SQL文実行時にしか有効でない。 view で、別名付けても、indexが使えなくなるだけだから意味がない。 そのテーブルにたいして定義された view や index、triggerなどは、INFORMATION_SCHEMA　にいろいろ情報が詰まってるので、マニュアルご参照ください。 http://dev.mysql.com/doc/refman/5.1/ja/information-schema.html
テーブルの構成と正規化の状況がわからないので微妙ですが こんな感じでは？ SELECT tokuisaki_id ,sum(nyukin*(nyukin_kubun='現金')) AS 現金計 ,sum(nyukin*(nyukin_kubun='振込')) AS 振込計 ,sum(nyukin*(nyukin_kubun='相殺')) AS 相殺計 ,sum(nyukin*(nyukin_kubun='手数料')) AS 手数料計 ,sum(nyukin) AS 合計 FROM nyukin_meisai WHERE AND uriage_bi BETWEEN '2014/05/01' AND '2014/05/31' GROUP BY tokuisaki_id
No.1です。 いえいえ、単に結果だけほしいならば、 update baken set bekijyo=POW( 2, umaban ); です。
１．select文の カラムリストに () 付けで、複数行データ定義などと言うことはできません。 union all を使ってください。 ２．まずは、select 文だけ書いてみてエラーのない select 文になれば、insert につないで実行可能です。 No1回答への補足をみると １対１対応させるのは、できてるのですね。 ３． umeta_idカラムが auto_increment だからnull を入れているなら、カラムリストから外しても良いと思います insert into ***_usermeta (user_id,meta_key,meta_value) select tableBid,'***_user_level','0' from dbB.tableB where tableBname <> 'Admin' union all select tableBid,'nickname',tableBname from dbB.tableB where tableBname <> 'Admin' ４． dbB.tableB の一行に対して、５行（以上）作って順番指定したいのですね。 ５行用のデータを union all で繋いで作ったtableを join しましょう。 select b.tableBid as user_id, k.meta_k as meta_key, COALESCE( k.meta_v , b.tableBname ) as meta_value from ( select tableBid, tableBname from dbB.tableB where tableBname <> 'Admin' ) as b cross join ( select 'first_name' as meta_k, '' as meta_v , 1 as order_no union all select 'last_name', '' , 2 union all select 'nickname', null, 3 union all select '***_capabilities','a:1:{s:10:\"subscriber\";b:1;}' , 4 union all select '***_user_level','0' , 5 ) as k order by b.tableBid, k.order_no ; 上記のtable記述順でcross join するなら、order by は無くても、希望の順番にはなりそうですけど、一応いれておきました。 このselect文で、insert したい行が生成できているならば、あとは先頭にinsert 用の構文(3で提示の１行目)を繋げばよいでしょう。
>危険はあるのでしょうか ここでいう危険というのはインジェクションのリスクという意味ですよね？ プリペアド処理でリスクヘッジをしているのですから、その点に関しては たぶん大丈夫ですが、きちんと管理しないと割り当てる箇所がずれたりしそうですね
＞PHPadmin これはphpMyAdminのことですか？それとも別の仕組みでしょうか？ （仮にphpMyAdminだとして以下） ＞システム上から確認したときは文字化けが起こっていない ＞PHPadminの画面から確認すると、メールマガジンのデータのみ ＞日本語が文字化けしておりました。 コンソールで表示すると文字化けしないという意味ですか？ phpMyAdminで文字化けしているのであれば、一度データを消して 適切な照合順序を設定の上、再取り込みしてみるとかですかねぇ・・
＞(1)がbになってしまいます ああなるほど、絞り込みをしない場合も全件表示でしたっけ？ で、pageがあるときは絞り込みがない場合だけページング・・・ですか ようやく見えてきました。 試してみればわかりますが、正直あまりいいUIではありませんね 全件表示してあるところからページングをする意味がないので （全件表示させないためのページングですから） とりあえずご指示のとおりであればこんな感じ？ $sql ="select * from tbl_test where 1 "; if($name!==""){ $sql.="and (0 "; $sql.="or `氏名` like concat('%',?,'%') "; $sql.="or `住所` like concat('%',?,'%') "; $sql.=") "; }elseif(isset($_GET["page"])){ $sql.= " limit {$page},{$perpage}" ; }
全件読みたいなら「$sql.= " limit " . $page*10 . ", 10" ;」は書いてはなりませんので、 「検索のテキストボックスが空」のとき、この文を実行しないようにしてください。
＞name欄にヒットしない文字があるときは該当者なし iのついていないmysql関数はすでに利用禁止にちかい状態なので 利用するならもう誰もフォローしてくれない前提で すべて自己解決するしかありません。 ですのでmysql関数の利用を前提の質問は公の掲示板ではしないでください PDOでやるならこんな感じ? <?PHP $dsn = 'mysql:host=localhost; dbname=test'; $pdo = new PDO($dsn,$user,$password); $name=isset($_GET['name'])?$_GET['name']:""; $sql ="select * from tbl where "; $sql.="`氏名` like concat('%',?,'%') "; $sql.="or `住所` like concat('%',?,'%') "; $stmt = $pdo->prepare( $sql); $stmt->execute(array($name,$name)); $count = $stmt->rowCount(); if($count>0){ print "<table border=1>" ; print "<tr>"; print "<th>番号</th>"; print "<th>氏名</th>"; print "<th>住所</th>"; print "</tr>"; while($row = $stmt->fetch(PDO::FETCH_ASSOC)){ print "<tr>"; print htmlspecialchars($row["番号"]); print htmlspecialchars($row["氏名"]); print htmlspecialchars($row["住所"]); print "</tr>"; }; print "</table>" ; }else{ print "no hit!"; } ?>
もう少し限定できませんかね？ 例えば、AテーブルのBフィールドに"http://～/987654321?"と 記録されていて、それを"987654321"に更新したいとか… むしろ、Webアプリで、テキストを操作した方が簡単かも 知れません。とすれば、データベースに入れる前に加工 します。 単に数字列を持つレコードを抽出するなら以下のような SQLになります。 SELECT * FROM A WHERE B REGEXP '^http.*?/\d{9}\?$' 桁数や英字が入った時はそれに合わせて正規表現を 変えます。その「将来」までに正規表現を覚えてください。
＞$page = isset($_GET['page']) ? $_GET['page'] : ''; // 取得 で、$pageを検証する前に ＞$sql.= " limit " . $page*10 . ", 10" ; で変数$pageを利用しています そのままだと常に$sqlのlimitは0始まりになります
＞メール情報をさらにテーブルにして細分化したりしない方向で、そのまま取得できないか はっきりいえば、SQLでやる作業ではない しかしできる・できないという意味ではできるのでできるので一応書いておきます。 しかし、こんなことやってたらRDB上達しないですよ （インデックスは絶対効かないし効率最悪で、データが増えるとすぐいきづまる・・・） //例 select * from TABLE1 where ( TO_USER_NM ,substr(MAIL_TITLE,@pos:=instr(MAIL_TITLE,'『')+1,instr(MAIL_TITLE,'』')-@pos) ,SEND_TIME ) in ( select TO_USER_NM as 顧客 ,substr(MAIL_TITLE,@pos:=instr(MAIL_TITLE,'『')+1,instr(MAIL_TITLE,'』')-@pos) as 商品 ,max(SEND_TIME) from TABLE1 where substr(MAIL_TITLE,instr(MAIL_TITLE,'』')+1,3)='本申込' group by 顧客,商品 ) order by SEND_TIME desc ※ポイント substr(MAIL_TITLE,@pos:=instr(MAIL_TITLE,'『')+1,instr(MAIL_TITLE,'』')-@pos) というのが商品名です
＞limit0, 10 ＞こう表示されます 前回、「下の行で$sqlが上書きされている」って書きましたよね 読まなかった？理解できなかった？わかってて無視した？ $sql = "limit" . $page * 10 . ", 10" ; は、最低でも $sql .= "limit" . $page * 10 . ", 10" ; でしょ？
構造うんぬんではなく、文法エラーのようですね。 echo "<a href = find.php?name=",$name, ", $page_num -1.">" ; の部分、 echo "<a href = find.php?name=". $name . ", $page_num -1.">" ; ではないですか？ " " と　" " など、文字列と文字列を連結するのは　, ではなく　. ですよね。 次の10件の部分も同様かと思います。
こんな感じですかね？ //データ作成 create table tbl(id int,name varchar(10),dt datetime); insert into tbl values(1,'a','2014-04-01 08:00:00'),(1,'b','2014-04-02 08:00:00'),(1,'c','2014-04-03 08:00:00'),(1,'d','2014-05-01 08:00:00'),(2,'e','2014-04-04 08:00:00'),(2,'f','2014-05-02 08:00:00'); →idが1のデータは4つ、内3つのデータが2014年4月の日付 //集計・・・今日が2014年4月である前提でnow()を利用 select count(*) as c1 ,sum(dt between (@d:=date_format(now(),'%Y-%m-01 00:00:00')) and (@d+interval 1 month -interval 1 second)) as c2 from tbl where id=1; ※条件式をsumで集計すると件数がとれます (@d:=date_format(now(),'%Y-%m-01 00:00:00')) というのが、今月1日の、0時0分0秒で '2014-04-01 00:00:00' (@d+interval 1 month -interval 1 second)) というのが、今月1日の1ヶ月後の1秒前で'2014-04-30 23:59:59'
たぶんこういうことをしたいのだと思うけど・・・・ select 顧客,商品,max(購入日時) as 購入日時 from tbl group by 顧客,left(商品,1) order by 購入日時 desc; 商品をx-xのような形式でもつとデータの持ち方が冗長で効率的な集計ができない 素直に枝番で分けている分を別カラムに分けたほうがよいでしょう また、各レコードを認識するためのidを振ってprimary keyを設定するのがスマートです 日時が一緒だった場合どうするとか考えるべき問題はほかにもあります
すくなくとも「echo $err」の位置は変 if(empty($err)){ ・・・・ } の外側もしくは、elseなどで処理しないと 「もし空なら」のブロックの中で表示しようとしても 空かヒットしないかのどっちらかでしょ それと、しつこいようですがINSERTは「IGNORE」で行わないと エラーになるので思った処理にならないかもしれませんよ
PRIMARY KEY (id) FOREIGN KEY (from_id) の間にカンマが必要では？
エラーの内容があるともっと正確な回答ができると思いますが、もしかしてこうすると大丈夫かも？という回答となりますので、参考程度にとらえてください。CASE文の期待値が、テーブルAのカラムRの値を他のカラムの値に応じて変化させたいと思ってます。 begin UPDATE テーブルA SET テーブルAカラムX = 値, テーブルAカラムY = 値, テーブルAカラムR = (CASE WHEN テーブルAカラムZ = 1 THEN 1 WHEN テーブルAカラムZ = 2 THEN 2 END); end もし相違ありましたら大変申し訳ないです；；
コンピュータが「ここおかしいんじゃね？」ってご丁寧に行番号までつけてエラーメッセージを出してくれてるわけです。 英語がわからないならGoogle翻訳に頼っても構いません。 エラーの内容を理解する努力をしましょう。 それをするつもりがないならプログラミングは諦めてください。 <html> <body> <?php $pdo = new PDO("mysql:dbname=db_test;host=localhost", "root", "admin"); if($st->rowCount()>0){ //←PC「$stが何なのかわからないからrowCount()もわからない」 if ($_POST['ID'] != '' && $_POST['NAME'] != '' && $_POST['ADDR'] != ''){ (以下略) ちなみに、「重複チェック→未入力チェック→登録」という流れで書いていますが、 「未入力チェック→重複チェック→登録」の順にした方がいいかと思います。
条件が何も書いていないので妄想になりますが、 create table tbl_c select a.code2, a.name, min(b.point) as point from tbl_a a left join tbl_b b on(a.code1 = b.code1) group by code2, name; こういうことでしょうか？
＞COOK_KIOKU_TBLのCOOK_NAMEとCOOK_TBLのCOOK_NAMEと一致するレコードは頭の方 というのであればCOOK_KIOKU_TBLに順位を確定させるためのソートキーが必要 それぞれidをふるとするとこんな感じかな？ create table COOK_TBL(cid int not null primary key auto_increment,COOK_NAME varchar(10)); insert into COOK_TBL(COOK_NAME) values('パスタ'),('パスタ'),('グラタン'),('オムライス'),('グラタン'),('カレー'); create table ZAIRYO_TBL(zid int not null primary key auto_increment,COOK_NAME varchar(10),ZAIRYO_NAME varchar(10)); insert into ZAIRYO_TBL(COOK_NAME,ZAIRYO_NAME) values('グラタン','鶏肉'),('オムライス','卵'),('オムライス','玉ねぎ'),('パスタ','卵'),('パスタ','麺'); create table COOK_KIOKU_TBL(kid int not null primary key auto_increment,COOK_NAME varchar(10)); insert into COOK_KIOKU_TBL (COOK_NAME) values('オムライス'),('グラタン'); //表示 SELECT DISTINCT k.kid,c.COOK_NAME FROM COOK_TBL as c INNER JOIN ZAIRYO_TBL as z ON c.COOK_NAME=z.COOK_NAME LEFT JOIN COOK_KIOKU_TBL as k ON c.COOK_NAME=k.COOK_NAME ORDER BY COALESCE(k.kid,9999); →kidがnullになる場合は適当に大きなデータにしておく（手抜き） →kid以外のソートが設定されていないので、ソート順は必ずしも一意にならない
\のかわりに/を用いてみてください。
「php側でaffected_rows()やrowCount()で作用した行数を数えて」って 書きましたよね？ 仮にtestdbデータベースにtblテーブルを作ったとして use testdb; create table tbl (id int not null ,data varchar(10),unique (id)); insert into tbl values(1,'a'),(2,'b'),(3,'c'); <?php $dsn = 'mysql:host=localhost; dbname=testdb'; $pdo = new PDO($dsn,$user,$password); $sql = "insert ignore into tbl(id,data) values(?,?)"; $stmt = $pdo->prepare( $sql); $stmt->execute(array(4,'x')); if($stmt->rowCount()>0){ print "ok"; }else{ print "ng"; } ?> とすると、1回目はokで2回目以降はngになりますよね？ ちなみに主キーをユーザーから送ってもらうのはどうかと思いますが
max_sp_recursion_depthで設定するみたいです http://dev.mysql.com/doc/refman/5.1/ja/server-system-variables.html ただあまり再帰処理はしない方がいいと思いますけどね・・・
やり方は2つ 1つは先に select してみてデータが有ればエラーメッセージを表示する。 もう1つは insert してみてエラーが返ってきたら、DBのエラー内容を解読してページにエラーメッセージを表示する。
＞dataカラムにカンマ区切りのデータを保存している いや、SQLでそれはあり得ない・・・ こうしてみて //テストデータ create table tbl(id int not null auto_increment primary key,groupid int,data int); insert into tbl(groupid,data) values(1,1),(1,2),(1,3),(2,1),(2,2),(2,10),(3,1),(3,2),(3,3),(3,10); //カンマ区切り表示 select groupid,group_concat(data order by data) as datas from tbl group by groupid; //data単位で集計 select data,count(*) as count from tbl group by data;
＞10数件のインデックスを張ったテーブルは普通に運用できるものなのでしょうか……？ ＞または、「Using filesort」は大きな問題ではないと考えたほうがよいのでしょうか？ インデックスを貼るとデータの追加、削除のスピードは落ちます。 よって検索と更新、どちらを頻繁にするかということも関連してきます。 私が持っているデータで言えば、２０年前のアメリカ某大手の大型コンピュータで １万件をソートして５０秒というのがありました。 顧客が電話で問い合わせてくるものに対してデータを表示するソフトでしたので、 ５０秒は待てないと言われました。 問い合わせのパターンを絞ってもらってインデックスを１０個作成して検索したら３秒になりました。 サーバーの処理能力にもかかってきますが、１億件を考えるとテストで打ち込んでも タイムアウトするか、しばらくそのサーバーを専有してしまうかもしれません。 （他のすべての処理を止めかねない）
WHERE `SHOP` = shop; shopはテーブルのカラム名になります。 パラメータにする場合は WHERE `SHOP` = :shop; としましょう。
top.php の echo "<form action=koushin_input.php method=get>"; echo "<td><input type=submit value=更新></td>"; echo "</form>"; で id を渡していないから。 HTMLの基本です。 echo "<form action=koushin_input.php method=get>"; echo "<input type=hidden name=id value=".$row['番号'].">"; echo "<td><input type=submit value=更新></td>"; echo "</form>"; としましょう。
削除してから表示するという流れ組んでみてください ボタンじゃなくていいならざっとこんな感じ <table border='1'> <tr> <th>番号</th> <th>氏名</th> <th>住所</th> </tr> <?php $con=mysqli_connect("localhost","root","admin","db_test"); if(isset($_GET["del"]) and isset($_GET["id"]) and $_GET["del"]==1){ $id=(int) $_GET["id"]; $result = mysqli_query($con,"DELETE FROM tbl_test where `番号`={$id}"); } $result = mysqli_query($con,"SELECT * FROM tbl_test"); while($row = mysqli_fetch_array($result)) { echo "<tr>"; echo "<td>".$row['番号']."</td>"; echo "<td>".$row['氏名']."</td>"; echo "<td>".$row['住所']."</td>"; echo "<td><a href=\"".$_SERVER["SCRIPT_NAME"]."?del=1&amp;id=".$row['番号']."\">削除</a></td>"; echo "</tr>"; } mysqli_close($con); ?> </table>
最後のカッコは不要
流れ的にはこんな感じでどうでしょう？ (1)テンポラリテーブルに未出力のデータidをはきだす (2)テンポラリに合致するデータをcsvに出力する (3)出力後テンポラリを元にデータテーブルのoutputカラムをアップデートする
同じtestテーブルで管理しているなら複合インデックスで十分では？ explainで検証しながらやってみるしかないでしょう bが「ほぼユニーク」であるならbで先行して 絞り込みをしてサブクエリをつかって処理する手もないことはないかと。 できれば「ほぼユニーク」をなんらかの形で「ユニーク」に絞り込む 方法を考えた方がいいかもしれませんね
こうなるとおそらくもう釣りだと思うんだけど一応かいときます もし釣りじゃなければ何か参考書でもかって基礎から学習したほうがいいと思います。 <table border='1'> <tr> <th>番号</th> <th>氏名</th> <th>住所</th> </tr> <?PHP $id=(isset($_GET["id"]))?((int) $_GET["id"]):0; $con=mysqli_connect("localhost","root","password","db_test"); $result = mysqli_query($con,"SELECT `番号`,`氏名`,`住所` FROM tbl_test where `番号`={$id}"); while($row = mysqli_fetch_array($result,MYSLQI_ASSOC)){ print "<tr>"; print "<td>".htmlspecialchars($row["番号"])."</td>"; print "<td>".htmlspecialchars($row["氏名"])."</td>"; print "<td>".htmlspecialchars($row["住所"])."</td>"; print "</tr>"; eof; } ?> </table> 前回は<tr>の位置がまちがってました。 ちなみに、削除するときは DELETE FROM tbl_test where `番号`={$id} で削除することになります
my.cnfなど設定ファイルで調整してください
画像などバイナリデータをDBにおくのはあまり効率的だと言えません。 検索や集計ができるわけでもないので 適当なidを数値でもって、ファイルとしておいておき、DBにはそのIDに ひもづくデータをを格納しておくくらいで十分だとおもいますが。
mysqlマニュアルではgeospatial featureと総称されるようです。この章全部参照するのが一番かな。あんまり利用者がいないのか、日本語訳はされていない。 http://dev.mysql.com/doc/refman/5.1/ja/spatial-extensions.html http://dev.mysql.com/doc/refman/5.1/ja/opengis-geometry-model.html 次の章あたりから、実際の例文が出てくる。カラムタイプは geometry になるらしい。 http://dev.mysql.com/doc/refman/5.1/ja/creating-spatial-columns.html
単純にifで場合分けするだけでしょうね、以下例 //元データ create table tbl (id int not null auto_increment primary key,data varchar(30),flg tinyint not null); insert into tbl(id,data) values(1,'a'),(2,'b'),(3,'c'); select * from tbl; id,data,flg 1,a,0 2,b,0 3,c,0 //id=4,dataを'x'を挿入 insert into tbl (id,data) values(4,@data:='x') on duplicate key update data=if(flg=0,@data,data); select * from tbl; id,data,flg 1,a,0 2,b,0 3,c,0 4,x,0 //id=4のdataを'y'に更新、ただしflgが0の場合→flgは0なので更新 insert into tbl (id,data) values(4,@data:='y') on duplicate key update data=if(flg=0,@data,data); select * from tbl; id,data,flg 1,a,0 2,b,0 3,c,0 4,y,0 //id=4のdataを'z'に更新、ただしflgが1の場合→flgは0なので更新されない insert into tbl (id,data) values(4,@data:='z') on duplicate key update data=if(flg=1,@data,data); select * from tbl; id,data,flg 1,a,0 2,b,0 3,c,0 4,y,0
普通考えれば、記事IDには所有者がいて所有者IDでひもづいており 所有者もしくは管理者以外が特定の記事を編集することはできないですよね ＞「◯◯のアカウントで投稿された◯◯番の記事を削除する」 というロジックはないです 条件を二重定義しなくても記事番号だけ指定すれば済みます 「○○番の記事を削除する」だけ指定して WHERE 記事ID = 消したい記事ID AND 所有者ID = 私のID となるなので、該当するレコードの記事IDと所有者IDが合致しなければ ヒットしないでしょう
基本的にroot - localhostの組み合わせだけで問題ないはず ３つ有効なユーザーがあるのであればそれぞれがパスワードを持っているのは仕様。 あとは同じパスワードにするか、別のにするかは運用次第。
＞ただの利用者 として、権限がどこまであるかによりますが ビューを作れるならそれが一番はやそうですね あとはどこに何が入っているか特定できないなら unionなどで処理することになりそうです
OUTER JOIN して COALESCE で選択する方法も有りますね。 ただし、MySQLでは FULL OUTER JOIN が使えないので、LEFT OUTER JOIN と RIGHT OUTER JOIN を UNION する必要が有りますが。 SELECT id, COALESCE(test.name, hoge.name) AS name FROM hoge LEFT OUTER JOIN test USING(id) UNION SELECT id, COALESCE(test.name, hoge.name) AS name FROM hoge RIGHT OUTER JOIN test USING(id); もし、test の中の id が全て hoge にも有るのでしたら、↓だけでも良いです。 SELECT id, COALESCE(test.name, hoge.name) AS name FROM hoge LEFT OUTER JOIN test USING(id); http://dev.mysql.com/doc/refman/5.1/ja/join.html http://dev.mysql.com/doc/refman/5.1/ja/comparison-operators.html#function_coalesce
こういうのは本来日付がずらーっとならんだカレンダーテーブルをつくって それにinsert していくのが普通 また曜日は月曜日=0とした0～6（WEEKDAY関数）もしくは日曜日=1とした1～7 (DAYOFWEEK)が扱いやすい かりにこんな処理にすると //元データ create table staff(uid int,uname varchar(20)); insert into staff values(1,'田中'); create table sch1(uid int,start_time time,end_time time,d date,flg tinyint) ; insert into sch1 values(1,'9:00','22:30','2014-03-17',1),(1,'9:00','13:00','2014-03-18',1),(1,'9:00','20:00','2014-03-19',1); create table sch2(uid int,start_time time,end_time time,dateW int,unique(uid,dateW)); insert into sch2 values(1,'9:00','22:30',0),(1,'10:00','11:30',1),(1,'13:00','15:30',3); カレンダーテーブルがない場合はテンポラリで無理やりつくる こんな感じで3/17、18、20、21をそれぞれとると 3/17は両方ヒット、3/18は日付でヒット、3/20は曜日でヒットし 3/21はヒットしないことがわかる。 create temporary table sch3 select '2014-03-17' as d; select * from sch3 left join sch1 on sch3.d=sch1.d left join sch2 on weekday(sch3.d)=sch2.dateW; create temporary table sch3 select '2014-03-19' as d; select * from sch3 left join sch1 on sch3.d=sch1.d left join sch2 on weekday(sch3.d)=sch2.dateW; create temporary table sch3 select '2014-03-20' as d; select * from sch3 left join sch1 on sch3.d=sch1.d left join sch2 on weekday(sch3.d)=sch2.dateW; create temporary table sch3 select '2014-03-21' as d; select * from sch3 left join sch1 on sch3.d=sch1.d left join sch2 on weekday(sch3.d)=sch2.dateW; これをまとめて、こんな感じ create temporary table sch3 select '2014-03-17' as d; select coalesce(sch1.start_time,sch2.start_time) as s ,coalesce(sch1.end_time,sch2.end_time) as e from sch3 left join sch1 on sch3.d=sch1.d left join sch2 on weekday(sch3.d)=sch2.dateW; いちいちテンポラリテーブルを作るのが面倒であれば最初に書いた通り 10年分くらいので日付を並べたカレンダーを最初につくっておいて where カレンダ.d='指定日' 的な処理をすればいい 仮に10年分日付つくっても所詮3600件程度、100年分作っても3万ちょいなので 対して重い処理にはならない
文法エラーで悩んだときはマニュアルで構文を確認しましょう。 http://dev.mysql.com/doc/refman/5.1-olh/ja/delete.html DELETEの複合テーブル構文は 　DELETE [LOW_PRIORITY] [QUICK] [IGNORE] 　　tbl_name[.*] [, tbl_name[.*]] ... ←DELETEとFROMの間にテーブル名が必要 　　FROM table_references 　　[WHERE where_condition] となっていますので、 　DELETE a 　FROM piyo AS a 　LEFT JOIN hoge AS c ON a.hoge_id = c.hoge_id 　WHERE c.x_id = 13 と書けばいいかと。
//元データ create table hoge(id int not null primary key,kbn int,name varchar(10),score int,flg tinyint,d date); insert into hoge values(1,1,'a',100,1,'2014-03-10'),(2,1,'b',90,1,'2014-03-11'),(3,1,'c',80,1,'2014-03-12'),(4,1,'d',90,1,'2014-03-13'),(5,1,'e',80,1,'2014-03-10'),(6,1,'f',80,1,'2014-03-11'),(7,2,'g',0,1,'2014-03-12'),(8,2,'h',100,0,'2014-03-13'),(9,2,'i',100,1,'2014-03-10'),(10,2,'j',100,1,'2014-03-11'),(11,2,'k',100,1,'2014-03-12'),(12,2,'l',100,1,'2014-03-13'),(13,3,'m',100,1,'2014-03-10'),(14,3,'n',100,1,'2014-03-11'); とりあえず検索条件がかぶるので一度 (1)(2)をつかってビューを作ります。 //view作成 create view v_hoge as select * from hoge where d between curdate() - interval 1 week and curdate() + interval 1 week and flg = 1; //結果 select * ,(select count(*)+1 from v_hoge as v2 where v1.kbn=v2.kbn and v1.score<v2.score) as rank1 from v_hoge as v1 where kbn in (select kbn from v_hoge group by kbn having count(*)>=5) having (select count(*)+1 from v_hoge as v2 where v1.kbn=v2.kbn and (v1.score<v2.score or v1.score=v2.score and v1.d>v2.d) ) <=5 order by kbn asc,rank1 asc; (1)は「何の」一週間以内なのか不明。たぶん今日の？ また一週間とは前も先もあるので命題が中途半端 (4)と(6)のフォーマットはsql側でやらずに出力側のプログラムでやるべき （キャストや結合が無駄なため） (5)はkbnごとに日付がユニークでないと順位が決定できない (7)は意味不明 ５個データがないのに5位ってどういうこと？しかもkbnまでnullじゃ何を示しているか？
select user_id, count(*) from tblA group by user_id having count(*)>1 and count(*)<6 order by user_id"
＞ユニークな値(10桁ほどの英数文字列)を持ったデータを、DBに大量に登録したい といっているのに ＞1件ずつユニークかのチェック しているのはなぜですか？ 元データはユニークである保証がない、つまり 「ユニークな値を期待したデータ」でしかないということですか？ とりあえずデータを取り込むテーブルのユニークな値を保持するカラムに unique属性(プライマリキーを含む)を設定するところからですね 一つ一つのデータのユニークをプログラム的に検証するのは 無駄が多いのでお勧めできません それと、ユニークではないデータ（ダブったデータ）が来た時には 無視するか、上書きするかを決めないといけません。 無視する場合は、INSERT IGNORE INTO 構文 上書きする場合は、INSERT ON DUPLICATE KEY UPDATE 構文 を利用します。 http://dev.mysql.com/doc/refman/5.1/ja/insert.html http://dev.mysql.com/doc/refman/5.1/ja/insert-on-duplicate.html 場合によっては元データがCSV形式であればLOAD DATA INFILE構文 がつかえるかもしれません http://dev.mysql.com/doc/refman/5.1/ja/load-data.html 元データを所定のルールで補完しながらデータを投入するのでしたら やはりINSERT構文が基本です 総合的に考えるとPDOなどの互換性をもった仕組みを利用すると 多少の環境の変化にも対応できるとおもうのでお得です またPHP+MySQLの場合はmysqliという仕組みが用意されていて オブジェクト型・手続き型というアプローチの仕方があります。 それぞれ特性がありますので、やり方は多少ためしてみてから 決めた方がよいですが、一般にオブジェクト型の方が好まれるようです。 ちなみにmysql関数（iがつかないタイプ）を利用した解説書がまだ 販売していたりしますが、内容が古いので参考にしないほうがいいでしょう データの持ち方についてはRDBの原則として正規化をしていると思いますので それに合わせてデータ投入方法を考えないといけません 一度正規化について詳しく勉強したほうがいいかもしれませんね
こんな感じでは？ //元データ create table WK(ID int not null primary key, POSTID int, DATA varchar(20), FLAG tinyint); insert into WK values(1,1,'aaaa',0),(2,1,'bbbb',0),(3,1,'cccc',0),(4,1,'dddd',0),(5,5,'eeee',0),(6,5,'ffff',0),(7,5,'gggg',0),(8,4,'hhhh',0),(9,4,'iiii',0),(10,4,'jjjj',0); //アップデート update WK as t0 inner join (select ID from WK as t1 where (select count(*) +1 from WK AS t2 WHERE t2.ID < t1.ID and t2.POSTID=t1.POSTID) >2) as t3 on t0.ID=t3.ID set FLAG=1 where t3.ID is not null; //表示 select * from WK; ※考え方 POSTIDごとにID順でランクをつけ、そのランクが2より大きいもののIDをつかって アップデートする。
select count(*) as cnt, point from tbl group by point order by cnt desc
>starttimeが2番目に大きいもの ちょっと特殊になりますがこんな感じ select * from tbl where (juchuu,keisiki) in (select juchuu,t2.keisiki from tbl as t2 inner join (select starttime,keisiki from tbl where keisiki=7745 order by starttime desc limit 1,1) as t3 on t2.starttime=t3.starttime and t2.keisiki=t3.keisiki) ここでlimit 1,1の前の「1」が2番目に大きいという意味 つまりn番目に大きいものを含むはlimit n-1,1とする 1番大きいのはlimit 0,1でもいいが、maxを使った方がらく keisikiごとに同じstarttimeがあるとは想定していません 同じものがある場合はさらに順位をつけるロジックが必要になるので
select a.* from a left join b on substring(a.url,8)=b.id where a.url REGEXP '^/color/.*' where substring(a.url,1,7)='/color/' 抽出条件はurlが'/color/'で始まるもの where句はどちらも同じ意味になりますので、 どちらかを使って下さい。 結合条件はa.urlの8文字目以降とb.idが 一致するものです。
これでよくない？ select t1.*,if(isnull(t2.mysequence),0,1) as myflg from mymagazine as t1 left join (select distinct mysequence from mymagazine order by mysequence desc limit 3) as t2 on t1.mysequence=t2.mysequence
一応、0月0日 は許容されています。 年は４桁指定で 2014-00-00 , 2013-03-00 のようになるべく省略せず指定すべきではありますが。マニュアルみるとinsert時の年月日指定フォーマットは、結構柔軟に対処されます。 where 文で比較するときは、そのような日付は、2014-00-00　であれば2013前年より後で、2014-01-01より前と解釈されます。 http://dev.mysql.com/doc/refman/5.1/ja/date-and-time-types.html 「SQL モード」でも許容されるかが変わるので、ご注意ください
２つのテーブルの相関関係がいまいちわからない なぜ２つに分けているか？ それぞれがどういうデータをもっていて どう表示したいのか簡単な例示はできますか？
create table office(name varchar(10),`in` int,`out` int default 2999); insert into office values('田中',2003,2008),('加藤',1995,2001),('桐谷',2009,default) //2007年在籍 select * from office where 2007 between `in` and `out`; //田中さん //2010年在籍 select * from office where 2010 between `in` and `out`; //桐谷さん //在籍年数が4年以上6年未満の社員 select * from office where least(year(now()),`out`)-`in`+1 between 4 and 6 ; //田中さんと桐谷さん
「2得点以上5得点未満の試合」はhome_scoreとaway_scoreの両カラムがという事でしょうか。 それとも自チームが「2得点以上5得点未満の試合」という事でしょうか。 両カラムならば select * from gamedata where home_score >= 2 and home_score < 5 and away_score >= 2 and away_score < 5; 自チームという事なら select * from gamedata where (h_a = 'H' and home_score >= 2 and home_score < 5) or (h_a = 'A' and away_score >= 2 and away_score < 5);
えーと、こんな感じでどうですか？ //元データ create table mytable (myCode int not null auto_increment primary key,val varchar(20)); insert into mytable(val) values('a'),('b'),('c'),('d'),('e'),('f'),('g'),('h'),('i'); //最新6件にフラグをつける select t1.*,if(isnull(t2.myCode),0,1 ) as flg from mytable as t1 left join (select myCode from mytable order by myCode desc limit 6) as t2 on t1.myCode=t2.myCode
とりあえずデータベースを作る権限はなさそうですね？ CREATE DATABASEを削除すると同時に すでに作られているデータベースを使用することを宣言してください USE すでに作られたDB; CREATE TABLE ・・・ またすでに同名のTABLEが存在する場合はまたエラーがでますので CREATE TABLE IF NOT EXISTS などの構文を使うか、そのテーブルを削除してからインポートしてください （テーブルの削除はリスクがありますので自己責任でお願いします）
SELECT 商品番号親 as 新商品番号 FROM Bテーブル UNION SELECT concat(種別,商品番号) as 新商品番号 FROM Aテーブル;
＞共用サーバー系ではトリガーが使えないのは普通なのでしょうか…？ super権限ってのはいわゆるrootユーザーみたいなのですから いろんな意味で難しいのかもしれませんね 極端な権限譲与するとレンタルサーバーのまた貸しみたいなことも できちゃいますしね また高負荷がかかりそうな機能もあまり許諾してもらえないと思います いずれにしろトリガー自体はそれほど重要な機能ではないので サービス側が「プログラムで対応しろ」というのであれば それが限界なのだと考えるしかないと思います
　一つだけ、絶対にテーブルを分けておかなければいけないパターンがあります。 　一人の会員が、二つ以上のブログを持てる場合です。 　この場合、memberテーブルと、blog詳細テーブルが一対多の関係となるため、二つのテーブルが必要です。 　ブログは、金輪際、一人につき一つだと主張するのであれば、blog詳細テーブルのnoフィールドは不用です。 　memberテーブル　blog詳細テーブル共に、同じnoを使用することとして、主キーはどちらのテーブルでもnoとなり、結合するフィールドも当然noとなります。 　後者の場合において、テーブルを一つにするか二つにするかですが、・・・ 　もし、セキュリティーを考えてというのが動機であれば、テーブルは一つで良いです。 　その代わり、テーブルに対してでは無く、フィールドに対してアクセス権限を設定します。 　当然、このようにセキュリティーを強化する場合、ブログを表示するためのプログラムと、会員情報をも扱うプログラムは、別々のＩＤでデータベースにアクセスすることになります。会員情報を扱うＩＤにはテーブル全体に対する権限を許可して、ブログを表示するＩＤには、ブログ情報のフィールドのみにアクセス許可を与えておくわけです。 　ブログを扱うプログラムは、どうあがいても、会員情報にアクセスすることは出来ません。 　同じＩＤでデータベースにアクセスするのであれば、テーブルをいくつに分けようが、セキュリティーは強化されません。 　さて、不正侵入を考えます。ルートが破られれば、何をどうやっても漏洩の阻止は不可能です。 　アクセスするためのＩＤを分けてあれば、最悪、ブログ情報用のＩＤに関しては破られても、会員情報へのアクセスは出来ません。漏洩するのは、ブログ情報だけです。会員情報が破られたら、テーブルを分けていようが同じテーブルだろうが一緒のことで、全データが漏洩します。 　また、データの保全という意味では、どうせ、データベースが壊れたら、テーブルをいくつに分けていようがデータベース丸ごと壊れますから、一緒のこと。　 　となると、検討するのは、どちらの方が保守管理が楽になるかです。 　もう一つの検討課題は、テーブルを分けると、会員情報全体を集約する時に、テーブルの結合が余計に発生します。 　また、テーブルを分けた時には、memberテーブルにある会員にのみ、blog詳細テーブルの情報を作るように、整合性を保証する必要があります。普通は、テーブル定義の時に、参照性制約を定義して保証するのですが、ＭｙＳＱＬでは、ファイル形式の選択によって、之が出来るかどうかが変わるところには注意が必要です。 　後は、動機と環境によりますね。 　シンプルさを考えるなら（当然、保守性はシンプルなのが一番です。）、わたしなら、１テーブルにします。
普通にできると思いますが、varcharなどは可読性のあるデータの方がよいので 改行みたいなものはむしろはじいた方がいいと思いますが
＞$stmt->bindValue(:id, $id, PDO::PARAM_INT); ＞のように型を指定する意味ってなんなのでしょうか？ mysqlを利用する限りたぶん意味ないですね （すくなくとも私の環境ではPHP側でキャストはしてくれないようです） PDO自体必ずしもmysqlを前提としていないので別のsqlやmysqlのバージョンによっては 有効な場合もあるのではないでしょうか？ ただしprepare処理さえしてあればインジェクション対策にはなるので 文字列から型変換される場合も問題ないとおもいますけどね
他のQandAでこういうのがありました。 http://q.hatena.ne.jp/1328465279 参考になれば。 また、WindowsでXamppは相性が悪い（anan19さんのような不具合がある）ので、 MySQLと、Apacheを別々でインストールすることをおすすめ致します。 私もXampではまってしまったので、Xampを辞め、 MySQL、Apache別々でインストールして使っています。 頑張ってください！
せっかくなので軽く書いてみましょう まず元になるデータを羅列します （元テーブル） ID,英単語ID,英単語,意味ID,意味,分類ID,分類,品詞ID,品詞,難易度 1,1,eye,1,目玉,1,物体,1,名詞,2 2,1,eye,1,目玉,2,体,1,名詞,2 3,1,eye,2,視力,3,能力,1,名詞,2 4,2,hand,3,手,1,物体,1,名詞,3 5,2,hand,3,手,2,体,1,名詞,3 6,2,hand,4,拍手,4,行為,1,名詞,4 これを正規化します （正規化後） 英単語テーブル 英単語ID,英単語 1,eye 2,hand 意味テーブル 意味ID,意味 1,目玉 2,視力 3,手 4,拍手 英単語_意味テーブル 英単語ID,意味ID 1,1 1,2 2,3 2,4 分類テーブル 分類ID,分類,品詞ID 1,物体,1 2,体,1 3,能力,1 4,行為,1 意味-分類テーブル 意味ID,分類ID 1,1 1,2 2,3 3,1 3,2 4,4 品詞テーブル 品詞ID,品詞 1,名詞 これをSQLで書くと CREATE TABLE `英単語テーブル`(`英単語ID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,`英単語` VARCHAR(50),UNIQUE KEY(`英単語`)); CREATE TABLE `意味テーブル`(`意味ID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,`意味` VARCHAR(200),`分類ID` INT,`難易度` INT,UNIQUE KEY(`意味`)); CREATE TABLE `英単語_意味テーブル`(`英単語_意味ID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,`英単語ID` INT,`意味ID` INT,UNIQUE KEY(`英単語ID`,`意味ID`)); CREATE TABLE `分類テーブル`(`分類ID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,`分類` VARCHAR(200),`品詞ID` INT,UNIQUE KEY(`分類`)); CREATE TABLE `意味_分類テーブル`(`意味_分類ID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,`意味ID` INT,`分類ID` INT,UNIQUE KEY(`意味ID`,`分類ID`)); CREATE TABLE `品詞テーブル`(`品詞ID` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,`品詞` VARCHAR(20),UNIQUE KEY(`品詞`)); //データの追加 SET @a='eye',@b='目玉',@c='物体',@d='名詞',@e=2; INSERT IGNORE INTO `品詞テーブル`(`品詞`) VALUES(@d); INSERT IGNORE INTO `分類テーブル`(`分類`,`品詞ID`) SELECT @c,`品詞ID` FROM `品詞テーブル` WHERE `品詞`=@d; INSERT IGNORE INTO `意味テーブル`(`意味`,`分類ID`,`難易度`) SELECT @b,`分類ID`,@e FROM `分類テーブル` WHERE `分類`=@c; INSERT IGNORE INTO `意味_分類テーブル`(`意味ID`,`分類ID`) VALUES((SELECT `意味ID` FROM `意味テーブル` WHERE `意味`=@b),(SELECT `分類ID` FROM `分類テーブル` WHERE `分類`=@c)); INSERT IGNORE INTO `英単語テーブル`(`英単語`) VALUES(@a); INSERT IGNORE INTO `英単語_意味テーブル`(`英単語ID`,`意味ID`) VALUES((SELECT `英単語ID` FROM `英単語テーブル` WHERE `英単語`=@a),(SELECT `意味ID` FROM `意味テーブル` WHERE `意味`=@b)); 最初のset行を SET @a='eye',@b='目玉',@c='体',@d='名詞',@e=2; SET @a='eye',@b='視力',@c='能力',@d='名詞',@e=2; SET @a='hand',@b='手',@c='物体',@d='名詞',@e=3; SET @a='hand',@b='手',@c='体',@d='名詞',@e=3; SET @a='hand',@b='拍手',@c='行為',@d='名詞',@e=4; SET @a='cat',@b='猫',@c='動物',@d='名詞',@e=1; SET @a='cat',@b='連結する',@c='動作',@d='動詞',@e=5; のようにして順次INSERT を繰り返します。 場合によってはプロシージャやファンクションにしてもいいでしょう。 結果表示はこんなかんじ SELECT T1.`英単語ID`,T1.`英単語`,T2.`意味ID`,T3.`意味`,T4.`分類ID`,T5.`分類`,T5.`品詞ID`,T6.`品詞`,T3.`難易度` FROM `英単語テーブル` AS T1 INNER JOIN `英単語_意味テーブル` AS T2 ON T1.`英単語ID`=T2.`英単語ID` INNER JOIN `意味テーブル` AS T3 ON T2.`意味ID`=T3.`意味ID` INNER JOIN `意味_分類テーブル` AS T4 ON T3.`意味ID`=T4.`意味ID` INNER JOIN `分類テーブル` AS T5 ON T4.`分類ID`=T5.`分類ID` INNER JOIN `品詞テーブル` AS T6 ON T5.`品詞ID`=T6.`品詞ID` ORDER BY `英単語ID`,`意味ID`,`分類ID`,`品詞ID`;
詳しく検証していませんが、単にダブりを表示しないだけなら SELECT DISTINCT カラム FROM テーブル で十分かと
単にphpMyAdmin上の文字化けだけなら $cfg['DefaultLang'] $cfg['DefaultConnectionCollation'] $cfg['DefaultCharset'] あたりの設定を調整してみてはいかがですか？
prepare も成功してるなら、あとは warning でも発生してるのかな？ SQL文エラーじゃなくてwarning のほうは、mysqlでは、"show warnings" っていうSQL文を直後に発行しないと捉えられないので、$flagがfalse だったとき以下実行。 <?php $w = $dbh->query("show warnings"); var_dump($w->fetchAll(PDO::FETCH_ASSOC)); ?> ※ mysql は5.1 以降でないと show warnings は無効です。 一応、SQL文のエラーは、errorInfo() でチェックして下さい。execute()の返値を見ても、エラー時は false かnull なだけですので。 <?php var_dump($stmt->errorInfo()); ?>
古い人間なので現状にあっていなかも知れませんが経験より。 このシステムはオンラインで、月次にバッチでメンテが出来るような環境であると想定しました。また、DBMSの物理的なキャッシュなどは考慮していません。 (1)削除フラグを使う この目的は「消しちゃったけど戻したい」が主たる目的です。この条件でなければ、また、大量の削除でなければ、オンラインでのdeleteでも良いと思います。レコードが減る分、バックアップが楽になります。 (2)カラムに入っている内容を削除する nullか空白でupdateするということですよね。インデックスにレコードが残るという観点ではメリットはないでしょう。検索において、削除されたレコードは取得されないので関係ないと思います。 (3)オンラインでの削除 deleteすることによってレコードが減ればそれだけインデックスが軽くなり(なれば)検索は早くなる可能性があります。ただし、これは非常に稀です。 (4)性能 「削除フラグを使う」でdeleteで良いと書きましたが実は「削除フラグ」という考え方は正しいかも知れません。 インデックスが張られているでしょうからこれらも更新の対象になります。 昔(10年前)では、I/Oは大体10ms/1件といった感じです。これは、update、delete、insert、インデックス更新が該当します。 例えば、3個のインデックスがあるテーブルで考えてみます。「削除フラグ」を使う場合、削除されたレコードを読み込まないために、すべてのインデックスに削除フラグが関連するはずです。 削除フラグを立てて他の列を空白等でupdateする場合、 [1]select　for　update　;1行確定 [2]update　;1行更新 [3]インデックス更新　;インデックス1 [4]インデックス更新　;インデックス2 [5]インデックス更新　;インデックス3 の5回のI/Oが発生します。約50msかかる計算です。 また、deleteでは、 [1]select　for　update　;1行確定 [2]delete　;1行削除 [3]インデックス更新　;インデックス1 [4]インデックス更新　;インデックス2 [5]インデックス更新　;インデックス3 の5回のI/Oが発生します。約50msかかる計算です。 オンラインでの性能面から見るとどちらも同じようになります。 結局はインデックス更新にも引っ張られますので、オンラインでの処理ではどちらでも良いということになります。 オンライン以外の性能ではdeleteした方がレコード少なくなるだけメリットが有るように感じます(レコードは少ないに越したことな無いです)。 長々と書きましたが、私はユーザ要件によって削除フラグを使うか否かを決めていました。 間違えた削除を戻す必要がないならdeleteで良いと思います。 メンテについてですが、容量に応じて色々な方法が考えられます。 件数が多くなるようでしたらファイルに吐き出して、削除レコードを削除し、LOADERで入れ込むことも考えられます。 MySQLはロックリソースが必要でしょうから(詳しく知りません)、想定件数で仕組みを考えるべきと考えます。
質問1： 　BOOLEAN型(TRUE/FLASE型)があるDBの場合はこれを 　使ったほうが良いですが、mysql には無いので数値で代替 　するしかありません。 　0 の意味を忘れないように (0 は削除・未削除のどっちだっ 　け？とならないように) 注意してください。 質問2： 　検索は速くなりません。しかも登録 (INSERT/UPDATE) が 　遅くなるので付けないほうがマシです。 　 　何故 検索が速くならないのか、何故 登録が遅くなるのかに 　ついては、きちんとインデックスの仕組みを学習してください。 　良いシステムを作るには、きちんと仕組みを知ることが必須 　です。 質問3： 　たいていの場合は SQL のほうが速いでしょう。 　DB関連の処理は『なるべくまとめて処理する』『不要なデータ 　は取得しない』ことが処理速度アップの基本です。
　・where句をつけると、当然、where内の条件を解決しないといけませんので、統計情報のみで答えを返すことが出来ません。基本的には、テーブルを見に行くことになります。ただし、where sure_id=5において、該当のテーブルのsure_id列にインデックスがついていれば、インデックススキャンのみで終わる可能性が高いです。 　・count(*)とcount(name)の間で、早い遅いはありません。が、この二つ、ｎｕｌｌの扱いにおいて関数の意味が違うので注意してください。普通は、この意味で使い分けをします。 　count関数は、基本的に、nullを数えません。 　count(*)だと、全列nullの行のみが数えない対象となります。 　しかし、count(name)とすると、name列がnullのデータは数えてもらえなくなります。 　name列にnullが入らなければ、count(*)とcount(name)は等価ですが、nullが許されると意味が違うというです。
1レコードにどのくらいの容量があるかにもよりますが csvを一度テンポラリに保存して 重複チェックなどはテーブル同士のリレーションでおこない エラーのものはエラーテーブルに吐きだして削除し 残ったテンポラリのテーブルを結合しながら他のユーザーテーブルなどに 吐きだしていくとそれなりに速くなると思います
単にためておいて要求に応じて表示だけすればいいのであれば TEXTやBLOBあたりになるでしょう 容量が多いのであればLONG系の拡張が必要です。 また保管された内容から文字列の検索が必要な場合は char、varcharなど検索性の高い型が必要ですが、容量には制限があります 全文検索を想定する場合はデータ型だけでなくエンジンの選定に注意が必要です
何度もスミマセン。 //以下の呼び出しを変更 createMarkerButton(marker); 　↓ createMarkerButton(marker,title); //createMarkerButtonの関数を以下の通り変更。引数titleを追加 function createMarkerButton(marker,title) { //サイドバーにマーカ一覧を作る var ul = document.getElementById("marker_list"); var li = document.createElement("li"); //var title = marker.getTitle();　　　　←削除 li.innerHTML = title; ul.appendChild(li); //サイドバーがクリックされたら、マーカーを擬似クリック google.maps.event.addDomListener(li, "click", function(){ google.maps.event.trigger(marker, "click"); }); } シンプルに直してみました。
こんなかんじ //元データ create table tbl (日付 date,入出金 int); insert into tbl values('2014-02-04',1000000),('2014-02-10',-100000),('2014-02-25',+200000),('2014-02-27',-10000); //集計 select t1.日付,sum(t2.入出金) as 残高 from tbl as t1 inner join tbl as t2 on t1.日付>=t2.日付 group by 日付;
ざっと調べてみました どうやらphpMyAdminのバージョンによる仕様のようですね 一度idカラムを削除し、phpMyAdminの構造タブから 1個のカラムを追加する（追加位置は先頭？適当に）として実行し 名前をid、データ型をintとし、nullにチェックをせず、 A_I（オートインクリメント）にチェックをいれた上で保存してください （たぶんその時点で主キー属性がついていると思います）
user_custom_tableに対して (relational_id,custom_name)にユニークにするか (relational_id,custom_name,custom_value)にユニークにするかで若干書き方が違います 仮に、データ管理がしやすい前者だとすると （所定のユーザーが一つの同名のカスタム名を複数もてないとする） 先にカスタムテーブルで条件を抽出した上でユーザーテーブルの 抽出条件とすればいいでしょう SELECT user_table.* FROM user_table where user_table in (select relational_id from user_custom_table WHERE 0 or (custom_name = 'CompanyAddress' and custom_value LIKE '東京都%') or (custom_name = 'Birthday' and custom_value < '2001/1/1') or (custom_name = 'CompanyName' and custom_value LIKE '%○○%') group by relational_id having count(*)=3 //custom_nameを連結した数 )
select 姓,名,年齢 from テーブル名 INTO OUTFILE "ファイル名.csv" fields terminated by ','; のようにselect文の列名指定を使えばいいのでは？ 詳細は参考URLを
本質的にidというのはレコードを特定するためのものなので インデックスが利いていれば基本的にスピードの差はほぼでないでしょう ＞apple → 0 ＞orange → 1 ＞banana → 2 実務上idに意味のある単語などを用いることは危険です。 appleとしたものの実はgreen appleだったりする場合もあるでしょう idを意味のない数字でもっておけばあとからいくらでも修正が利きます ＞phpMyAdminなどでレコード表を確認した場合、何のidかわかりにくいです リレーションの設定で外部キー制約をつけておけば、所定のコードをクリックして リンク先へ飛ぶことができますよ （仮に上記の例であれば0をクリックしたときappleのデータを表示させられる） ちなみにidに0を利用するのはお勧めできません 1以上の整数を利用してください （他のプログラムとの組み合わせの際,0は特別な意味を持つケースが多いため、 たとえばfalseだったりnullだったり,空文字だったりする）
テーブルをまたがったインデックスは貼れないのでその辺の問題でしょうか 本質的には同じテーブルで管理するしか解決方法はないかもしれません 地道にexplainでチェックしながらindexの利き具合をテストしてみてください
> PHPで文字数制限しなくてもmysql側のカラムの文字数設定だけでいいのではないかと思ってしまいましたがこれだと不具合とかでてきますか？ たとえ255文字までしか保存できないのが仕様通りであっても、 ユーザから「せっかく入力したのに途中までしか保存されてないんだけど？ バグ？」と思われてしまいます。 なので、PHP側で255文字までしか入力できないようにしておくほうが親切でしょう。 > データ型のtextも文字数指定できるのでしょうか？ 文字数指定はできませんが、最大長は決まっています。 http://dev.mysql.com/doc/refman/5.1-olh/ja/blob.html http://dev.mysql.com/doc/refman/5.1-olh/ja/storage-requirements.html
＞プライマリーキーはつけといたほうがいいでしょうか？ 普通付けますが、必須ではないです。 ＞プライマリーキーがないとプライマリーキー以外のカラムをselectするとき遅くなるのでしょうか？ それは関係ありません。 ＞プライマリーキーのカラム名はid以外でもいいですか？ もちろんOKです。 ＞phpmyadminからindexを他のカラムにつけた場合はそのカラムにindexつけた後に追加された行も自動的にindexがついていますか？ indexは、カラムや複数カラムに付く物です。行の挿入削除変更でindexは自動的に更新されます。
はて？おかしいですね サブクエリの部分 select sure_id,max(dt) from bbs group by sure_id だけ実行すると 1 2014-01-04 19:19:45 2 2014-01-12 01:37:03 5 2014-01-04 18:30:47 6 2014-01-03 19:02:26 が返ってきますよね？ であればそれで絞り込んでいるので重複がでるはずがないのですが・・・ （完全にスレッド番号と日時が同じであればダブるのでその場合は distinctするなりする必要はあるかも） なにか特殊な処理を別途施していたりしませんか？
select hr,avg(val) from ( select 0 as hr,val from tbl where endtime >= 0 and starttime < 60 union all select 1 as hr,val from tbl where endtime >= 60 and starttime < 120 union all select 2 as hr,val from tbl where endtime >= 120 and starttime < 180 ・・・ select 23 as hr,val from tbl where endtime >= 1380 and starttime < 1440 ) group by hr order by hr 環境ないので検証はしていませんが。 (大抵のデータベースで使える機能しか使っていないのですが、 asの要否などが多少違っているかも。 ・・・Select x.hr,avg(x.val) from (・・・) x group by x.hr order by x.hr かも。 また、MySQLのバージョンがあまり古すぎると使えないかも) 補足： where endtime >= 60 and starttime < 120 終了時刻が60分以降、開始時刻が120分より前。 つまり、開始が0分であろうが、119分であろうが、(2時より前に始まるのは)対象だが、 終了が、60分よりまえ（0時59分までに終わる）のは対象外。 ※副問い合わせを使うこのやり方はDBの資源を使うので件数が増えるとあまりよくないのですが 　（普通のＤＢ環境の設計をしていたら、この例なら数百万件くらいなら問題ないはずですが。） >SQL文で１度に取得するやり方と、 >いったん全行取得してPHPなどでループして平均を計算するやり方とでは DBからPHP等にデータを受け渡すのに時間とメモリーを食うので 通常は「いったん全行取得する」方がはるかに時間を必要とするでしょう。 ＤＢサーバのメモリが非常に貧弱で、ネットワーク回線が非常に太くて、 PHPのサーバにメモリがありあまっていて、バランスが悪すぎるくらい高性能なＣＰＵを つんでいたらこの限りではありません。 （こんなケースは、一般的には、システム構成の設計ミスと思いますが）
＞MyISAMの違うテーブルに同時アクセスできるのでしょうか？ テーブルが異なればどのエンジンでも同時アクセスは問題ないとおもいます ＞2chのようにスレッド掲示板にしたいのですが、テーブルは2つで作れると考えました（スレッドとレス）スレッド番号でレスをまとめるやり方です ＞このような1つのテーブルでレスをまとめた場合、複数のカラムにindexをつけると将来100万行とかになっても軽快に動きますか? テーブルは1個で管理してもいいかもしれません。 親文書がなければスレッドだと判断できるので ただ古いログはパフォーマンスを下げるだけなので 古いデータや所定の上限数までいったデータをdat落ちさせる仕組みを作った方が よいかもしれませんね
こんな感じです select clm2 from test where clm1 in(2,4,6) group by clm2 having count(distinct clm1)=3
いくつか見えていない要件がありますので以下にサンプル的に書いてみます。 ＜業務の手順＞ (1)お問い合わせフォームまたは電話にてお申込み連絡を承ります。サービスの利用が可能かを確認致します。 ここで基本的な会社の情報をいただきます。メールにて送信。 ↓ (2)メール確認後、ご訪問、電話にてご説明。 弊社担当よりサービスのご案内・利用方法についてご説明させて頂きます。 ↓ (3)クライアントがサービス利用と判断された場合は利用に必要な項目を確認、取得します。 ↓ (4)サービス利用時に登録テーブルを参照（他）を行う。 ＜方法１＞　仮登録も本登録も同一テーブルで管理 登録テーブル　登録区分　0:仮登録/1:本登録/9:本登録しない(退会とかも必要なはずですが) (1)登録テーブルに登録区分0で基本的情報を登録 (2)登録テーブルの情報更新：登録区分0のまま、更新処理。または、登録区分9に変更。 (3)登録テーブルの情報更新：登録区分1に変更。 　このとき未入力データがあってはいけない項目の未入力チェックを行う。 　（プログラムでチェックしないとやりにくい） (4)登録テーブルを参照（登録区分1のみ） ☆仮登録や本登録した件数が増えると、(4)のときの処理が遅くなる。また、管理しにくい。 ⇒本登録したデータだけ別にすると（方法２） ＜方法２＞　本登録したデータは別テーブルで管理 仮登録テーブル　登録区分　0:仮登録/9:本登録しない 本登録テーブル　登録区分　1:本登録(退会とかも必要なはずですが) (1)仮登録テーブルに登録区分0で基本的情報を登録 (2)仮登録テーブルの情報更新：登録区分0のまま、更新処理。または、登録区分9に変更。 (3)仮登録テーブルの情報削除 　　本登録テーブルの情報登録 　このとき未入力データがあってはいけない項目の未入力チェックを行う。 　（本登録テーブルにNot Nullなどの制約を付けるだけでもチェック可能。） (4)本登録テーブルを参照 ☆仮登録件数が増えると、(2)のときの処理が遅くなる。また、管理しにくい。 ⇒本登録しないデータだけ別にすると（方法３） ＜方法３＞　本登録したデータも本登録しないとなったデータも別テーブルで管理 仮登録テーブル　登録区分　0:仮登録 本登録テーブル　登録区分　1:本登録(退会とかも必要なはずですが) 登録取止テーブル　登録区分　9:登録しない ※登録区分は、なくてもいいですが。 (1)仮登録テーブルに登録区分0で基本的情報を登録 (2)仮登録テーブルの情報更新：登録区分0のまま、更新処理。 　または、仮登録テーブルの情報削除＆登録取止テーブルの情報登録 (3)～(4)は同じ ☆過去に仮登録から本登録あるいは、登録しなかった履歴がほしい ⇒登録履歴テーブルを作って仮登録テーブル削除時にコピーを残す等。 ★ポイント 仮登録も登録の一つとして同一テーブルにもたすか、 仮登録はあくまで登録されていない状態として、別テーブルにおいておくか。 また、仮登録のまま放置されているデータをどうするのか？ （一定期間たったら消すとか考えておかないと無駄なデータが溜まります。） また、サーピス利用の終了（退会）や終了後の再加入はどうするのか？
>この商品の価格や在庫数の1年分（365日分）の履歴をデータベースに記録したいのですが、通常はどのような設計になるのでしょうか？ 例えば、 価格： 価格テーブル 商品コード、適用開始日、価格　 （適用終了日はあっても可：通常は次の適用開始日の前日なのであまり持たない） ※価格が取引先によってまちまちな場合は、価格テーブルに取引先コードがはいっていたり・・・。 在庫： あまり、日単位の在庫数を持っているのを見たことがない。 元帳テーブル 商品コード、（在庫場所）、年月、月初在庫数 入出庫テーブル 年月日、（入出庫場所）、商品コード、入出庫数 入庫と出庫別々で持つため最大で２レコード持つ。 ※毎日の在庫は、上記２テーブルより集計。 ★目的によってどういうテーブルを用意するかは変わってきておかしくないので、 例えば、在庫の適正水準算出のために必要な帳票専用のテーブルとして、 年月日、商品コード、在庫数のテーブルがあってもおかしいとは言いませんが、 このテーブルは更新するのが面倒なんです。 ⇒例えば、過去日付の入庫を訂正したら・・・その日以降の全データを修正しないといけません。 注：どこまで管理しているかにもよります。 質問文の内容では、入庫数や出庫数は管理していない、単に一日の終わりに在庫数を入力しているだけ とも考えられます。 これなら、年月日、商品コード、在庫数のテーブルでいいと思われます。 （というより他の持ち方ができない） データベースを分けるかどうかは、どちらでもいいでしょう。 商品属性なので、商品データベースに含めてもいいし、 在庫属性なので、在庫データベースを別に作ってもいいし、 データベースの容量との関係で問題がなければわかりやすいと思うほうでいいでしょう。
マイナスで処理したいなら、 INSERT INTO テーブルTOTAL SELECT 商品コード,数量*(-1) FROM テーブルSTOCK でいいのでは？ でも、在庫テーブルにないのはおかしいのですけどね。
改行コードは¥nで登録すれば良いです。
特に違いはありません。そのままで大丈夫です。
商品B－商店３の価格差は 2800 - 2500 なので300になる気がしますが・・・。 それで良いのなら、下記の様なSQLでよろしいかと。 ---------------------------------------- SELECT a.価格 - b.価格 AS 価格差, a.商品ID AS 商品名, a.商店ID AS 商店 FROM 対象テーブル a INNER JOIN 対象テーブル b ON (a.商品ID = b.商品ID AND b.商店ID = '商店１') WHERE a.商店ID <> '商店１' AND a.履歴 = (SELECT MAX(履歴) FROM 対象テーブル c WHERE a.商店ID = c.商店ID AND a.商品ID = c.商品ID) AND b.履歴 = (SELECT MAX(履歴) FROM 対象テーブル d WHERE b.商店ID = d.商店ID AND b.商品ID = d.商品ID) ORDER BY a.価格 - b.価格 DESC; ---------------------------------------- a, b, に対して、それぞれ、商店IDと商品IDが同じものの中で履歴が最大の行だけを抽出しています。 同じ事は EXISTS 句を使っても表現できます。 ---------------------------------------- SELECT a.価格 - b.価格 AS 価格差, a.商品ID AS 商品名, a.商店ID AS 商店 FROM 対象テーブル a INNER JOIN 対象テーブル b ON (a.商品ID = b.商品ID AND b.商店ID = '商店１') WHERE a.商店ID <> '商店１' AND NOT EXISTS (SELECT * FROM 対象テーブル c WHERE a.商店ID = c.商店ID AND a.商品ID = c.商品ID AND a.履歴 < c.履歴) AND NOT EXISTS (SELECT * FROM 対象テーブル d WHERE b.商店ID = d.商店ID AND b.商品ID = d.商品ID AND b.履歴 < d.履歴) ORDER BY a.価格 - b.価格 DESC; ---------------------------------------- こっちは a, b, に対して、それぞれ、商店IDと商品IDが同じでそれより履歴が大きな行が存在しないものだけを抽出しています。 結果として、商店IDと商品IDが同じものの中で履歴が最大の行を取出す事になり、前のSQLと同じ意味になります。 また、サブクエリーで絞り込んでしまい、それを INNER JOIN する方法も有りますね。 ---------------------------------------- SELECT a.価格 - b.価格 AS 価格差, a.商品ID AS 商品名, a.商店ID AS 商店 FROM ( SELECT * FROM 対象テーブル c WHERE 商店ID <> '商店１' AND NOT EXISTS (SELECT * FROM 対象テーブル d WHERE c.商店ID = d.商店ID AND c.商品ID = d.商品ID AND c.履歴 < d.履歴) ) a INNER JOIN ( SELECT * FROM 対象テーブル e WHERE 商店ID = '商店１' AND NOT EXISTS (SELECT * FROM 対象テーブル f WHERE e.商店ID = f.商店ID AND e.商品ID = f.商品ID AND e.履歴 < f.履歴) ) b USING (商品ID) ORDER BY a.価格 - b.価格 DESC; ---------------------------------------- http://gihyo.jp/dev/serial/01/sql_academy2/000901 http://gihyo.jp/dev/serial/01/sql_academy2/000902 http://codezine.jp/article/detail/907
「商品ID」カラムの値が「商品A」や「商品B」で、「商店ID」カラムの値が「商店１」や「商店２」なのでしょうか？ 少し違和感が有りますが、それは置いておいて・・・。 「商店１」以外の行を、同じ商品IDの「商店１」の行と結合して、価格の差を取れば良いかと。 例) ------------------------------------ SELECT a.価格 - b.価格 AS 価格差, a.商品ID AS 商品名, a.商店ID AS 商店 FROM 対象テーブル a INNER JOIN 対象テーブル b ON (a.商品ID = b.商品ID AND b.商店ID = '商店１') WHERE a.商店ID <> '商店１' ORDER BY a.価格 - b.価格 DESC; ----------------------------------------
＃１ですが間違いありました。セミコロンの前を訂正 select sum(t2.num) from t1, t2, (select t1_id, max(id) as max_id from t2 group by t1_id) t2w where t1.name = 'aaa' and t1.id = t2w.t1_id and t2w.max_id = t2.id ; でした
教科中の順位とその教科のレコード数を1回で取得するなら、下記の様にSELECT句内のサブクエリを一つ追加すれば良いだけです。 ---------------------------------------- SELECT Name, Kyouka, Score, (SELECT COUNT(*) + 1 FROM table1 b WHERE b.Score > a.Score AND a.Kyouka = b.Kyouka) AS rank, (SELECT COUNT(*) FROM table1 c WHERE a.Kyouka = c.Kyouka) AS count FROM table1 a WHERE ID = '10001' ORDER BY Kyouka, Score DESC; ---------------------------------------- また、上記の様に教科をサブクエリ内の結合条件で絞り込んでやると、WHERE句の条件を変えるだけで色々な絞込みが可能です。 例) [国語の全データを取得] ------------- SELECT Name, Kyouka, Score, (SELECT COUNT(*) + 1 FROM table1 b WHERE b.Score > a.Score AND a.Kyouka = b.Kyouka) AS rank, (SELECT COUNT(*) FROM table1 c WHERE a.Kyouka = c.Kyouka) AS count FROM table1 a WHERE Kyouka = '国語' ORDER BY Kyouka, Score DESC; ---------------------------------------- 性能が気になるようでしたら、下記の様にカウントはFROM句内のサブクエリで取得した方がよいかも知れません。 ---------------------------------------- SELECT Name, Kyouka, Score, (SELECT COUNT(*) + 1 FROM table1 b WHERE b.Score > a.Score AND a.Kyouka = b.Kyouka) AS rank, c.count FROM table1 a INNER JOIN (SELECT Kyouka, COUNT(*) AS count FROM table1 GROUP BY Kyouka) c USING(Kyouka) ORDER BY Kyouka, Score DESC; ---------------------------------------- なお、他の方も指摘されている通り、Kyoukaカラムにもインデックスを張ったほうが良いと思います。
Canvasの操作をJavaScriptで行うのであれば、受け渡しデータの形式はCSVかJSONで扱うのがよいと思います。 どちらを採用するかはいずれも長所短所ありますが、 ・CSV：データサイズが小さくなるが、スクリプト処理に手間がかかる。（行分割・項目分割） ・JSON：取得結果をそのままスクリプト上のオブジェクトとして使えるが、データサイズが大きい。 のイメージとなるので用途によりけりと思います。 ※XML形式の選択肢もありますが、JS上では両方の短所を兼ねていると思いますのであえて外しました（私見ですが） なお、 > 作りたいグラフのデータは項目が20あり、個数は1700以上あります。 が 20 * 1700 = 34000 のデータを用いるという意味であれば、 ・グラフ描写にどの程度時間がかかるのか。 ・メモリを大幅に消費しないか。 など、ブラウザ側のパフォーマンスを気にしたほうがよいような気がします。 （この辺りは想像でお話ししていますので、当てはまらない場合は読み流してください）
A5M2ことA5:SQL Mk-2作者の松原です。 A5:SQL Mk-2じゃだめですか…じゃなくて、気になったのでちょっと調べてみました。 多分、libmySQL.dllを入れ替えるというのはどこかのサイトから入手した情報と思いますが、多分「逆のことをやっている」と思います。 かねやんMySQLAdmin付属のlibmySQL.dllをMySQLのbinに入れるのではなく、MySQLのbinにあるlibmySQL.dllをかねやんMySQLAdmin.exeのフォルダに上書きコピーします。 おそらく、ベクター等からかねやんMySQLAdminをダウンロードされたのではないでしょうか？。このバージョン(1.42)は古いので、付属するlibmySQL.dllも古く、これが原因で接続できないのだと思います。（かねやんMySQLAdminはエラーメッセージが「コネクト失敗」だけで分かりにくいですね） あるいは、http://www.zzz.0t0.jp/?page_id=111から、最新のもの（2014/1/1時点で1.43A）をダウンロードすれば、libmySQL.dllも新しいものが同梱されているので接続できるはずです。 （分かりにくい気がしますが、[SJIS]または、[EUC]のリンクがダウンロードリンクです） あと、MySQLのbinにコピーした古い libmySQL.dll は新しいものに戻すようにしてください。でないと、A5:SQL Mk-2はともかく、他のソフトウエアからMySQLサーバーに接続できなくなります。 （A5:SQL Mk-2はlibmysql.dllを利用しないため、他のソフトウエアで接続できない状態でも、接続できてしまうはずです）
> 「LibreOffice Base」はAccessと同等のことができるのでしょうか。 そうです。無料で使用できる互換ソフトと思ってもらえたらと思います。 リンクをたどるのが嫌なら"LibreOffice Base マニュアル"で検索するとマニュアルらしいものがすぐ見つかると思いますので、パラパラと見てみたらいかがでしょうか。 ただ、LibreOfficeは有志が無償で作っているものなので、Microsoftがお金をかけて作ったものに比べて不足していることが多々あると思います。そこを何とかごまかして使うか、(プログラミングを勉強して、)その機能を自分で作るかする事ができないなら、おとなしくAccessを買ったほうがよいかもしれません。
SELECT artist, COUNT( distinct event ) as c FROM tb GROUP BY artist ORDER BY c DESC
> ・エラーの意味を教えてください あなたが理解したとおり、'2147483647'というエントリーが重複した値を許さないカラムであるhogeに既にあって、それを更に登録しようとしているということだと思います。 > ・「'2147483647'」には何か特別な意味があるのでしょうか？ 32bit 符号付き整数型の最大値ですよね。 hogeに入力される値の初期値や異常値としてINT_MAXを使っていたりしませんか？ その問題が出るテーブルで次を実行したら、なにか表示されませんか？ SELECT * FROM テーブル名 WHERE hoge='2147483647'; とりあえず、修正方法としてはINT_MAXが入った値がなぜRDBに登録されたかを調べ、それが入らないようにエラー表示をするようにコードを変えることでしょうね。
select count(distinct date,station) from table_name where date between '2013-11-01' and '2013-11-30' みたいな感じじゃない？ dateをlikeで絞り込むのはちょっとねぇ・・・
> 都道府県47つの場合、各都道府県ごとにcountする形になりますでしょうか？ GROUP BY 句を使えば一度の実行で、データが存在する全ての都道府県のカウントが取得できますよ。 例) SELECT no, COUNT(*) FROM Table GROUP BY no ORDER BY no; http://www.atmarkit.co.jp/ait/articles/0012/22/news002.html http://dev.mysql.com/doc/refman/5.1/ja/group-by-functions.html なお、パフォーマンスの問題は本番もしくはそれに順ずる環境で実際に測定してみないとハッキリしたことは分からないかと。
ぷららですか。 それでは、↓これかもね。 http://web1.plala.or.jp/support/faq/faq_docs/ID0004.html ↓下記の手順で解除できるらしいです。 http://www.akakagemaru.info/port/plala.html ご確認を。
自分のところでは問題なく認識できていると不思議に思って確認したら、！でした。 Visual Web Developerって、無償の「Express」バージョンですよね。 申し訳ありません。 通常版のVisual Studioならば、「サーバエクスプローラ」「データベースエクスプローラ」とも問題なく表示できます。 Connector/Netのバージョン問題は同様じですが。 「データベースエクスプローラ」のようなウィザード系を使用せず（となるとLINQやEntityFramneworkはおろか、「強く型付けされた」DataTable等も使えませんが）、SqlCommandやSqlDataReaderでゴリゴリやるしかないようですね。 http://social.msdn.microsoft.com/Forums/ja-JP/452d8f88-a1f1-4eeb-847b-19e6406175c0/cmysql?forum=csharpexpressja Express系はアドオンが使えないので、Connector/Netよりはるかに強力なDotConnectのようなサードパーティ製品もNG。IDEの恩恵を得るにはProfessionalを導入するのが一番かもしれません。 Devarts Dotconnect for MySQL http://www.devart.com/dotconnect/mysql/
＞タイトル通りですが、windowsで特にい その、タイトル通りがわからない。個人でやっているのか、小さなIT関連企業の２０歳代の若手社員に多い方言をつかっているのでしょう。１、２社しか働いた事がないから、方言であることに気が付かない。 ＞Linuxの.sql て、何ですか？ プレーンテキストファイルでSQL文が書かれている、SQLファイルですか？ ＞mysql:mysql2 mysql2 ?????　 もしかしたら、この投稿はスパイかテロリストの暗号文かもしれない。誰かスパコンで解読してくれ。 とりあえず検索して見た https://www.google.co.jp/search?hl=ja&q=%22mysql2%22&lr=lang_ja ここでよやくDB（ソフトごと）ごとバックアップをしたいようだ。それとも違うのか？　SQLテキストファイルをバックアップしたいのかな？ 不明と言う事で、一般的な話を。 ファイルだろうと、ソフトだろうとDBだろうと、問題はパーミッション等、ファイルシステムに依存するような物は、そのままコピーすると、そのOSのしきたりに従うので変わってしまう。つまり、そのまま戻しても、戻らない事を意味する。 通常、アーカイブやDUMPファイルとして保存する事になる。 コマンドでは、tar , dd , xxxdump 等、アーカイブコマンド　とバックアップコマンドですね。お勧めは　tar　ですね。どのOSにもあるし、互換性も、ほとんど問題にならない。もちろんWindowsにはdefaultでは無いが、フリーのアーカイブソフトではほぼ、１００％といっていいほど対応している（簡易解凍ソフトは対応していない＜＝当然でしょうねWindowsにないから）。 tar でアーカイブしたものは、好きなようにパーミッション等変更できるので、元のままでも、リストアー実行ユーザーに依存する形でもできる。Windowsのコピー、移動、バックアップソフトも、そのようにできているし、Windowsのコマンドの xcopy, robocopy にも同じように属性の可否が設定できるようになっている。 そう、つまり、バックアップコマンドでアーカイブして保存すれば、どこに保存しようが、かまわないことになる。 ただ、通常DBの場合、コールドバックアップが基本。その事をお忘れないように。後は、高機能のバックアップソフトに任せれば、安全に元に戻せる形で、アーカイブしてくれる。
いっそ、ファイルシステムのディレクトリの様なツリー構造と考えてしまって上位のIDを保持するようにしてはどうですか？ 例) テーブル「area」 +----+----------+---------+ |　id　|　name　　　 |　upper_id　| +----+----------+---------+ |　1　|　関東　　　　|　(null)　　| +----+----------+---------+ |　2　|　東京都　　　|　1　　　　 | +----+----------+---------+ |　3　|　渋谷１丁目　|　2　　　　 | +----+----------+---------+ |　4　|　渋谷２丁目　|　2　　　　 | +----+----------+---------+ 構造的には、県の上位に市を設定したり、自分自身のIDを上位IDに設定する事も出来てしまいますから、そこら辺はアプリケーション側で管理する必要が有りますが。 さらに地域の種別を表すコードのカラムを設けて、どの階層かを管理しても良いかも知れません。
で、httpd.confの120行目はチェックしたのでしょうか？
たとえば、 ID　　　　名前 1　　　　田中AAA 2　　　　佐藤BBB 3　　　　徳川CCC 4　　　　田中BBB というテーブルがあって、これを基に クエリを作って、名前の抽出条件に、 Like "*" & [Forms]![フォーム名]![テキスト1] & "*" And Not Like "*" & [Forms]![フォーム名]![テキスト2] & "*" として、フォームのテキスト1に「田中」、テキスト2に「AAA」 といれて、「田中BBB」を表示する、ということでしょうか。 質問の方法で、表示されますが、一度上記のように オブジェクトを[]で囲んでみたらどうでしょうか。 >フォームのテキストボックスに何も記述されていない時は全部表示する この場合は、 >Like "*" & [Forms]![フォーム名]![テキスト1] & "*" And Not Like "*" & [Forms]![フォーム名]![テキスト2] & "*" を書いた下の欄の、「または」というところに、 [Forms]![フォーム名]![テキスト1] Is Null AND [Forms]![フォーム名]![テキスト2] Is Null とします。Accessでは一旦クエリを閉じて、もう一度クエリを デザインビューで表示すると、表示内容が変わっているかもしれませんが、 これはAccessの独自の表現に変更されただけです。 なお、これでも、たとえば、「テキスト1」だけに「田中」 と入れて「テキスト2」には何もいれなければ、何も 表示されない、ということにはなります。 以上です。わからないところがあれば補足してください。
作り直す気があるならこんな感じ //元データ create table shohin(sid int,sname varchar(30)); insert into shohin values(1,'パソコン'),(2,'洗濯機'),(3,'車'); create table category (cid int,cname varchar(30)); insert into category values('1','OA機器'),('2','家電'),('3','大型'); create table category_shohin (cid int,sid int); insert into category_shohin values(1,1),(2,1),(2,2),(3,2),(3,3); //商品ごとにカテゴリー名を羅列 select s.sid,s.sname,sub.cnames from shohin as s inner join ( select sid,group_concat(cname) as cnames from category as c inner join category_shohin as cs on cs.cid =c.cid group by sid ) as sub on s.sid=sub.sid あとは最終形をどう見せたいかによります
前回COUNT(*)回答の者です。 あれはDBから取得時の件数カウント方法でした。わかりずらくて申し訳ありませんでした。。どっちでも一応可能ですがphp側でもっと楽に件数カウントができます。 　　$stmt = $pdo->query("SELECT * FROM bbb");　　←ここではカウントしない 　　$stmt->execute(); 　　$count = $stmt->rowCount();　　←ここでカウント 　　echo $count; /* 参考： これはSELECT　COUNT(*)した場合の 　　　　　　　　FETCHして１件のみ表示　※非推奨 　　$count = $stmt->fetch(PDO::FETCH_ASSOC); 　　echo implode($count); */ ※質問ソースの場合、件数(例えば10)とDB結果が１行出たものをさらにその件数(いわゆる１行)をPHP側で数えています。（なので何件でも１と出ます）
>MyISAM で使っていたsqlをそのまま使ってもトランザクションは利用できないとゆうことでしょうか？ MyISAM自体がトランザクションを利用できないので そのままInnoDBにエンジンを変更してもトランザクションは利用されません。 MyISAM→InnoDB変換後に適切なプロセスを追加してください。
単純にCOUNT関数ではダメなのでしょうか？ SELECT COUNT(*) FROM udon WHERE not abc = '111' limit 5, 10 もしくは質問がそのlimit取得後の後ろの残りレコード数が知りたいというのであれば、一般的には総数を最初にカウントしlimitの開始位置/取得数を考慮差し引きし残りを求めます。
＞valueが「1」かつ「2」のデータを検索する この命題では日本語としてなりたたない なんとなく言いたいことはわかるのだけど条件提示が杜撰すぎ 以下のどれかだと推測します (1)valueが1および2を含むデータをすべて抽出 →仮に別途value=3のデータがあたったらそれも抽出 (2)valueが1および2を含むデータの内、1,2に該当するデータのみ抽出 →仮に別途value=3のデータがあってもむし (3)valueが1および2しかないデータを抽出 →仮に別途value=3のデータがあったら1,2に合致しても抽出しない たぶん(2)なんだろうなぁということで以下 //元データ create table table_a (id int,data varchar(20)); insert into table_a values(1,'a1'),(2,'a2'),(3,'a3'); create table table_b (id int,aid int,value int); insert into table_b values(1,1,1),(2,1,2),(3,1,3),(4,2,1),(5,2,2),(6,3,1),(6,3,3); //単純な表示 SELECT * FROM table_a WHERE table_a.id in (SELECT aid FROM table_b where value in (1,2) group by aid having count(distinct value)=2 ) //table_bの情報も含めた表示 SELECT * FROM table_a INNER JOIN table_b ON table_a.id = table_b.aid and value in (1,2) WHERE table_a.id in (SELECT aid FROM table_b where value in (1,2) group by aid having count(distinct value)=2 )
並び順が替わるというのは、別のtableなどからのデータで、変更するのですよね？、１行２行の入れ替えという物ではなさそうなので、構成を練り直した方が良いようにも見受けるけど、毎回集計しないで、一回集計した順で通常のアクセス時の表示を速くしようとしてるのかな。 であれば、order順定義用カラムは、別table に分けた方がいいのでは？ id と orderだけのtableにしてorder をauto_incrementとしておけば、truncate したあとに、一気に、並べ替えたい順でidだけ流し込めば、orderは、自動的に1から振り直される。 この方がorderとid 以外のデータにはさわらないので、大事なデータが失われる可能性もなくなり、作業時間も短縮するのでは？ 通常表示の部分は、元table と id でjoin して表示順をコントロールすることにはなるけど。
□数字の入力 phpmyadmin の insertやupdateのフォームでは、カンマ「,」が入ってると文字列として解釈されて、数値カラムにおいてはそのようなデータ入力できません。 直接SQL文でinsert文を発行するときは、２個の数値として解釈されてしまいます。ので、結果としてデータ入力時は、カンマ表記は使えません。 出力表示に関しては、format関数を使えば、いかようにもなります。 http://dev.mysql.com/doc/refman/5.1/ja/string-functions.html#function_format select FORMAT('#,###,###.##' ,`column_name`) from `table_name` □名前の入力 姓と名の間にブランクが入っているときは、全角なら全角ブランクを入れて同じように指定しないと = 比較ではマッチしません。 個別カラムにすれば、それぞれのカラムで = 比較して、andで繋げば、完全一致名を取り出すことが出来ます。 □改行 改行コードを文字として入れることは出来るけど、phpmyadminでは、html表示なので、改行されたようには見えないでしょう。 通常、phpなどなんらかのアプリケーションから、その改行コードに対して、改行表示されるような操作をするので、問題なく改行コードを入れたり取り出したりは出来ます。
仮にこうします monthは月の整数でもつと、年をまたいだ時に大変なので、日付型のデータの方がよいです //元データ create table score (id int not null primary key auto_increment, name varchar(20), score int, month date, increment int not null,unique(name,month)); insert into score(name,score,month) values ('taro',100,'2013-11-01') ,('jiro',200,'2013-11-01') ,('saburo',150,'2013-11-01') ,('hanako',200,'2013-11-01') ,('yosiko',160,'2013-11-01') ,('taro',50,'2013-10-01') ,('jiro',200,'2013-10-01') ,('saburo',250,'2013-10-01') ,('hanako',300,'2013-10-01') ,('yosiko',100,'2013-10-01'); //incrementを求める update score as s1 inner join score as s2 on s1.month + interval 1 month =s2.month and s1.name=s2.name set s2.increment=s2.score-s1.score; where s2.month='2013-11-01' //雑なランク付け select name,increment from score where month='2013-11-01' order by increment desc limit 3; ランク付けは同順位の処理をどうするか考えるとすこし複雑になってきますが 今回はとりあえず表示するだけの簡単な文法を提示しておきます
なるほど・・・ foodを管理するテーブルのidとなるキーであればfood_idで良いと思いますよ もしくは端的にidとするかです。 joinする際に別名を付けて管理すれば混乱は少ないと思います
select 映画館 , 映画名 , case when min(日付) = max(日付) then min(日付) when min(日付) <> max(日付) then min(日付) + ' - ' + max(日付) end ,max(メモ) from 映画データ group by 映画館,映画名 order by 映画館,映画名 ご参照ください。
できないとは言わないけど、普通SQLでそんなデータの持ち方はしません こんな風にしてみて //元データ create table tb(id int,place varchar(20)); insert into tb values(5,'上野'),(6,'銀座'),(6,'東京'),(7,'銀座'),(7,'上野'),(8,'銀座'); //カンマ区切りの表示 select id,group_concat(place) as place from tb group by id; //集計 select place,count(*) as count from tb group by place;
実際に動かして確認したわけではありませんが、 WHERE ( table1.title REGEXP "りんご" || table1.title REGEXP "みかん" || table1.title REGEXP "ばなな" || ......... 　　↓ WHERE table1.title REGEXP "りんご|みかん|ばなな|........." これはどうでしょう？
一旦サブクエリで月集計した結果をグループ化して使えば可能です。 月集計では日の9以下は-1ヶ月としています。 SELECT x.tmp,SUM(x.金額) 　FROM 　　(SELECT 　　　日付, 　　　CASE WHEN DATE_FORMAT(日付,'%e') < 10 THEN DATE_FORMAT(日付 - interval 1 month, '%Y/%m') ELSE DATE_FORMAT(日付, '%Y/%m') END tmp, 　　　金額 　　　FROM mysql.uriage) x WHERE x.日付 BETWEEN '2011-01-10' AND '2011-12-31' GROUP BY x.tmp; ※サブクエリ部分だけ結果を見ればどの日付がどの月に集計されたかがわかりやすいです。
セキュリティ上、ある会員が他の会員の扱っている商品を簡単に見ることができていいのでしょうか？ また、会員というのが商店で、複数の商店の情報を比較しながら買い物する顧客が別にいる、 という話では、 ある会員が他の会員の扱っている商品を簡単に見ることができてはいけないが、 ある顧客は、複数の会員の扱っている商品を簡単に見ることができないとまずいです。 というのも要件の１つにはいるのですが。 A. 1.のDBの中に作る 方法が２通りあって A-1.同一ＤＢで複数テーブルにする。 　複数の会員が扱っている商品をみるのにはいささか不便。 A-2.同一ＤＢの同一テーブルにする。 　この件数から見ると、会員の数×数万～数十万件の商品というレコード数になり、 　ちょっとレスポンスが心配。 　会員の数が少なければレスポンス対策としてあえて、横持ちする手はありますけどね。 　（拡張性や正規化という点から言うと好ましくないですが。） 　例）商品コード,会員1,会員2,会員3,・・・ 　　　会員1が1なら会員1が扱っており、0なら会員1は扱っていない。 B. 各会員のDBを作ってその中に扱いたい商品のテーブルを作る C. 会員DBを作って会員ごとのテーブルを作る BとCの差があまりなくて、 Bのメリットは、サーバを分割しやすいという点と、会員間でデータを見れなくしやすいという点で、 デメリットは、商品を減らしたいときに、全会員のＤＢに接続して、１件ずつ消さなくてはいけない （CならＤＢ接続は１回ですむ。）、サーバを分割しにくい、複数の会員のデータを見るのが面倒 等ですね。 Aは、BやCと違って、サーバを分割なんて難しいし、 会員間でデータを見れなくしにくい（作りこみがいるというだけ）、 一方で、商品を減らすのはすごく簡単。複数の会員のデータを見るのも簡単。 といったところが長短として挙げられます。 どれを重視するかによって答えは変わってくると思います。 （あと用意できるＤＢサーバの性能と。）
正直これだけの情報ではなんとも・・・・。可能性としてはラインターミネーターが\r\nじゃなくて\nなので全部が1行と解釈されて最初の2列だけに反応しているとかかね。 ↓の2つを試してみてその結果を教えてもらえますか。\r\nを\nと\rにそれぞれしたものです。 １． LOAD DATA INFILE "Prefecture.csv" -> INTO TABLE Prefecture FIELDS TERMINATED BY "," -> LINES TERMINATED BY "\n"; ２． LOAD DATA INFILE "Prefecture.csv" -> INTO TABLE Prefecture FIELDS TERMINATED BY "," -> LINES TERMINATED BY "\r";
　そこそこの普通のシステムなら、普通に出来る規模かと思います。総枚数２０００枚程度であれば、「普通に考えれば処理できる」規模です。 　MySQLは、普通のパソコンクラスでも、数万～数十万レコード程度なら、充分に扱える程度のシステムです。 　フィールド数の方も、心配する領域としては、やっぱり桁が違います。 　画像を扱うための保存領域の容量だって、２０００枚程度なら、１枚２Ｍバイトとしても、４Ｇバイトほど。今時のハードディスクの保存容量からすればやっぱり桁が違いますね。 　ただし、普通に出来るとは書いたものの、あくまで、私的な領域で使うレベルでの話です。観客数が増えて、１秒あたりのアクセス数が・・・なんてレベルになるなら、やっぱりそれなりの構成と検討が必要です。が、これは、静的な普通のホームページでも同じ事です。
　データベースをリモートでメンテナンスできるようにしようとすると、何らかの方法でMySQLにダイレクトにアクセスできる道を作ることになりますよね。その道を知っている人にとっては、残る関門は、ＩＤとパスワードだけです。別に、人のドメインに直接プログラムをアップロードするまでも無いので、IDとパスワードが漏れちゃったら、大変です。（MySQLでは、ID毎にクライアントのＩＰを制限するのが普通なので、そこまでは普通至らない物ですが。それでも、最大の関門を破ったことに変わりはありません。） 　さて、ルートディレクトリー配下で、スクリプトファイルに対して、クライアントからアクセスした場合は、普通は、スクリプト（例えばＰＨＰ）が実行されるのが普通です。これが正しい姿ですが・・・ 　webサーバーを一から構築した人は、クライアントからアクセスするとブラウザーにスクリプトのソースが表示されて、悲鳴を上げるという体験を、必ず一度はするものです。 　そう。webサーバーのちょっとした設定間違いで、簡単にこんな事故はおこるものなんです。 　さて、このスクリプトのソースにＩＤとパスワードが堂々と書いてあったら？はい。事故＝ＩＤ・パスワードの漏洩発生です。 　というわけで、クライアントからアクセスできる領域のファイルにはＩＤやパスワードは書きたくないものです。 　ですから、まず、ＩＤとパスワードを別のファイルに分けます。 　このファイルを同じ場所においたら、結果は一緒です。このファイル名はちゃんとスクリプトに書いてありますから、そのファイル名をurlにしてもう一度アクセスするだけになってしまいます。 　 　ですから、ルートディレクトリー配下には、このようなファイルは置かないようにするのです。さすがに、相当の間違いをやらかしても、ルートディレクトリー配下意外の場所をweb経由でアクセスできるようになんてことにはなりませんから、大分、安心度が大きくなります。（まぁ、ルートディレクトリーの設定そのものを間違えれば・・・でも、その場合は、別の心配をした方が良いです。被害はデータベースのデータを抜く程度では収まりません。でもサーバーのＯＳレベルで、webサーバーシステムのアクセス権限はルートディレクリー配下に制限することが普通ですから、その意味でも、ルートディレクトリの外は、結構厳重に守られている物です。） 　設定を間違えなくても、webサーバーのシステムにセキュリティーホールがあれば、同じ結果になることはあり得ます。でも、ルートディレクリー以外の所まで平気で見に行けるなんて巨大なホールはそうそう出ませんし、ちゃんと設定していれば、ＯＳの保護も期待できます。 　まぁ、セキュリティーに完璧はありません。少しでも、心配事をひとつずつつぶしていくのが基本です。心配事をひとつつぶす毎にセキュリティーは一段階上がります。
なんとも言えませんが普通にこんな感じでやってみては？ set @str1='01234561',@str2='1'; select (char_length(@str1) - char_length(replace(@str1,@str2,'')))/char_length(@str2) as count;
my.ini の中に [mysqld] という行があると思います。 その下に default-character-set = utf8 と記述すれば、utf8に変わると思います。 文字コードで苦労することは多いので、詳しく勉強することをおすすめします。
>□現在、会社が違うレンタルサーバーを一つずつ借りています。・・・ 直接データベースを参照することはできないと思います。Web経由であれば可能です。例えばXMLで受け渡しする方法があります。 まずA社のサイトでデータベースからテーブル一覧を取得し、そのデータをXMLで出力するページを作成します。 B社のサイトはそのページにアクセスし、XMLを解析して一覧を表示します。 >□初心者がデータベースを作成するにはphpMyAdminを使用するのが一番良いでしょうか？・・・ phpMyAdminが一番いいと思います。MySQLのGUIツールでは一番利用者多いと思います。 phpMyAdminもテーブルにデータを入力していくのは簡単ですよ。 >□現在使用しているサーバーはMySQLが5つ使えると書いています。・・・ 可能です。データベースの中に複数テーブルを作るということになります。それが普通です。 野球の情報を管理するデータベースを作り、その中に試合の記録のテーブル、選手のデータのテーブルを作ることになると思います。他にも容量が許すかぎりいくらでもテーブルは作れますよ。 □スマホのサイトも作成しているんですが、PCサイトと同様にデータベースに接続し、一覧表示できるのでしょうか？・・・ できます。phpが動いているのはサーバ側なので関係ないです。
$result = mysql_query(レス一覧取得SQL文); //最後のNo取得 $lastNo = mysql_num_rows($result); while($row = mysql_fetch_assoc($result)){ 表示処理(レスNoを出力場所で$lastNoを出力すればいい) $lastNo--; } ようは最初に最後のNoを取得し、１行表示ごとにマイナスしていけばいいということです。 mysql_queryなどと書いていますが、これは非推奨になっているのであまり使わない方がよいです。 mysqliなどを使いましょう。
null を取り得る項目は、 COALESCE を被せて null の場合はその型の最小値を取るようにするとか。 例) ------------------------------------ SELECT * FROM hoge ORDER BY GREATEST(a, COALESCE(b, -2147483648)) DESC; もしくは、CASE式を使ってnull判定をするとか。 例) ------------------------------------ SELECT * FROM hoge ORDER BY CASE WHEN b IS NOT NULL THEN GREATEST(a, b) ELSE a END DESC; SELECT * FROM hoge ORDER BY CASE WHEN b IS NULL THEN a WHEN b > a THEN b ELSE a END DESC; > 後、MAXとは何が違うのでしょうか？ MAXは集約関数ですから、複数のレコード(タプル)の指定されたカラム(属性)の最大値を求める関数ですね。一方、GREATEST は与えられた引数の中から最大のものを取り出す関数です。 感覚的には、MAXは縦の中の最大値を求め、GREATESTは横の中の最大値を求めるという感じですね。 http://dev.mysql.com/doc/refman/5.1/ja/comparison-operators.html#function_greatest http://dev.mysql.com/doc/refman/5.1/ja/group-by-functions.html#function_min
素直にその条件／動作のSQLを書けば良いかと。 例) UPDATE table_hoge SET b = a WHERE b IS NULL;
無理、無駄 というか、顧客ごとにテーブルを作っているなら横断的に検索させたら わける意味がなくない？ そんなことするならtableid的なカラムつくるだけで全て解決するし （プログラムの修正が行えないという時点でそういう選択肢はないのでしょうけど）
> XAMPPは、「Webサーバ ⇔ PHP ⇔ MySQL」を一台の > パソコンで構築できるとの認識で間違いないでしょうか！？ はい，間違いないです。 > 「各端末 ⇒ Webサーバ ⇔ PHP ⇔ MySQL」 > その図を、客観的に見た場合、 > ３台のパソコンで構築されているように見れます。 いいえ，次のような表現が一般的に用いられているように， 「１台のサーバ機で，WebサーバとDBサーバとメールサーバが稼働している」 サーバという用語は， ハードウェアを指す場合もありますし（例：サーバ機） ソフトウェアを指す場合もあります（例：Webサーバ）。 Webサーバというソフト単位，PHPというソフト単位，MySQLというソフト単位， が連携しているということを客観的に示しているのであり， それが３台のハードウェアに分かれているかどうかは示していません。 各端末，というのも，正しくはハードウェアではなく， Webブラウザというソフト単位を指しているはずです。 「Webブラウザ，Webサーバ，PHP，MySQL」すべてのソフト単位が１台のPC内にあり， その１台のPCがWebクライアントでもあり，かつ，Webサーバでもある。 というのは，小規模な実習環境においてよく用いられている形態です。
> <meta http-equiv="Content-Type" content="text/html; charset=euc-jp"> > mysql_query("SET NAMES 'utf8'"); そもそも、プログラムは何の文字コードで書かれていて、データベースの文字コードは何になっているんでしょう？ 上記の記述だと、既に文字コードで相違がおこっていますので、うまく日本語が扱えていないのではと思います。 それと、データベース側のフィールドはちゃんと日本語がはいる型（varcharやtext）になっているのでしょうか？ テストされたURLとサンプルコードなど、何か提示があれば回答しやすいかと思います。
and (concat(MyCol1,' ',MyCol2) like '%いちご%' and concat(MyCol1,' ',MyCol2) like '%ソーダ%') とでもすれば手っ取り早いと思いますが。 concat()・・・文字列をつなげます。 http://dev.mysql.com/doc/refman/5.1-olh/ja/string-functions.html#function_concat 具体的には、 ID　Concat(MyCol1,' ',MyCol2) -------------------------- 1　いちご みかんジュース 2　ぶどう いちごみるく 3　みかん すいかジュース 4　すいか めろんソーダ 5　めろん ぶどうガム となり、「いちご」と「ソーダ」をorでつなげば、1,2,4がでてきます。 （なお、andでつなぐと、質問にかかれた1,2,4でなく、1件もでてこないですが。） なんで、,' ',をいれているかというと、 6 といち ごりら とあると Concat(MyCol1,MyCol2) では、 6 といちごりら となり、「いちご」が見つかってしまうためです。
うーん、いまいち意図がよくわかりませんが こういうことでしょうか？ //元データ create table mytable(year int not null,number int not null); insert into mytable(year,number) values(2005,1),(2005,2),(2005,3),(2008,4),(2008,5),(2008,6),(2008,7),(2008,8),(2010,9),(2011,10),(2011,11),(2011,112); //検索 select year,number,(select if(max(number)=t1.number,1,null) from mytable where year=t1.year) as myflg from mytable as t1
cast( FROM_UNIXTIME(unix_timestamp) as int ) unix_timestamp のところに、utc秒数が入ってるカラム名をいれてやれば、 YYYYMMDDhhmmss の数値で出力される。castしないで出力すると、通常 'YYYY-MM-DD hh:mm:ss' の文字列。 適宜フォーマットの指定もできるので、マニュアル参照してください。 http://dev.mysql.com/doc/refman/5.1/ja/date-and-time-functions.html#function_from-unixtime
質問としては、新規の書込みがあったスレッドの上位20件を取り出すSQLが知りたい、という事で良いでしょうか？ そうであれば、 bbs_id 毎の最新の time を比較して、その新しい順に並べ、上位20件分の bbs_id を取得すれば良いかと。 SELECT bbs_id, MAX(time) FROM bbs GROUP BY bbs_id ORDER BY MAX(time) DESC LIMIT 20; ※ bbs_id はタイトルごとのIDとなっていますが、タイトル＝スレッドの様なので、スレッドを表す番号と仮定しています。
基本はmysqldumpでしょうけど、毎回100万件全てが更新されているとは思えないので ほとんどのデータが前回のままであるなら、差分バックアップでもある程度は 精度は保てるでしょう ただし、レンタルサーバーのmysqlだとCUIでコマンドを実行できないかもしれないので 用意されたツールの範囲でやるしかありません
表記上の問題で1列に見えるが、NoとNameの２列があると思って良いなら。 select max(no) from seito; Name も欲しいなら select t1.no, t1.name from seito t1 where t1= ( select max (t2.no) from seito t2 ) ;
私が思いついたのは、結合して GROUP BY を使う方法とSELECT句内のサブクエリを使う方法でした。 version 5.5.8 で確認しました。 ■ 結合して GROUP BY を使う方法 SELECT a.id, COUNT(b.A_id) AS count FROM table_a a LEFT OUTER JOIN table_b b ON(a.id = b.A_id) GROUP BY a.id; ■ SELECT句内のスカラサブクエリを使う方法 SELECT id, (SELECT COUNT(*) FROM table_b b WHERE a.id = b.A_id) AS count FROM table_a a;
仕様が微妙ですが、単純に考えればこんな感じ？ select * from tblA left join tblB on tblA.id = tblB.id and tblB.del_flg=0 left join tblC on tblA.id = tblC.id and tblC.del_flg=0 where tblA.del_flg=0 ただし、tblBは複数ある可能性があるため分けるのは妥当かもしれませんが tblCはtblAの機能の一部の方がよいのでは？ すなわち未婚、既婚、以前既婚の状態は排他関係にあるので、複数にならず 既婚カラムで管理すればすっきりするので・・・
> それで、できれば、エクスポートされたデータをそのままエクセル表示させ > エクセル側で修正したいのでお聞きしています ん？　テキストエディターだけでなくエクセルで開いても改行部分がおかしいって事？　詳しい状況求む。 ・テキストエディターで開いたら問題がある。→エクセルで開いた時に問題なければ問題ないでしょう？ ・エクセルで開いたら問題がある。→どういう問題があるか教えてください。 前回の回答でも触れているけど、エクセルはダブルコーテーションでくくられたセルデータ中に改行が含まれていた場合、正しくセル内改行として取り込んでくれる。 数字が入った文字列とかは前ゼロが消えるという問題はあるけど、今回の件には関係ない話だ。
#1 です。 「一意に特定できる条件を指定せずに SELECT FOR UPDATE した場合はすべての行をロックする」という挙動は、ブログを書いた方の見解に過ぎませんよね？ そのブログの中で参照している下記のページを見ると、微妙に違う気がします。 http://dev.mysql.com/doc/refman/4.1/ja/innodb-next-key-locking.html http://dev.mysql.com/doc/refman/5.1/ja/innodb-next-key-locking.html そのページから読み取れることと、実際に動作を試したことから、下記の様なことが言えます。 > InnoDB が行レベルロックを行うのは、テーブルのインデックスを検索またはスキャンする際に、検出したインデックスレコードに共有ロックまたは排他ロックを設定するためです。 【A】 InnoDB の行ロックで実際にロックが掛かるのはインデックスのレコードである。 したがって、インデックスの無いカラムを SELECT FOR UPDATE の条件に含めた場合は、全ての行がロックされてしまうと思われます。主キーやユニークキーである必要は無く、インデックスが張ってあるか否かが問題の様です。 また、条件にインデックスが有るカラムだけしか出現していなくても、下記の様な値を直接比較しないような条件では全ての行をロックする様です。 UPDATE user SET ・・・ WHERE LENGTH(name) = 4; > あるユーザがインデックスのレコード R に共有ロックまたは排他ロックを設定すると、他のユーザはインデックス順で R の直前に新しいインデックスレコードを挿入できなくなります。 【B】 指定された条件より少し広い範囲がロックされる。 ネクストキーロックといって、条件に合致するが現存するインデックスに含まれない値のインサートをロックするために、条件に合致する範囲のすぐ外側のインデックスまでロックする様です。 例えば、下記の様なデータが存在していた場合を考えます。 10, 20, 30 これを hoge > 15 AND hoge < 25 という条件によって FOR UPDATE でロックしたとします。 実際にロックされるのはインデックスですが、20 のインデックスだけをロックしても 18 や 23 のINSERTは出来てしまいますので、少し広い 10, 20, 30 のインデックスの範囲をロックする様です。 したがって、他のトランザクションから 9 や 31 のデータはロックされずにINSERTできますが、12 や 27 のデータはロックされる事になります。 なお、動作を確認したのは ver 5.5.8 です。
場合によってはjikan_tblに存在しない日時区分でも選択する必要があるわけですから、 1）1年間の全日時区分を持ったテーブル（all_datetime_tbl）を用意する 2）プログラムのループ構文を使って、必要な日時区分をクエリに作らせる のどちらかが必要だと思います。 1） 次のようなテーブル（all_datetime_tbl）があれば、答えは簡単に求められます。 each_datetime ------------------------- 2013-01-01 00:00 2013-01-01 00:15 2013-01-01 00:30 （中略） 2013-12-31 23:30 2013-12-31 23:45 ------------------------- select each_datetime as start_dt, substring(date_add(concat(each_datetime, ':00'), interval 15 minute), 12, 5) as end_t from all_datetime_tbl left join jikan_tbl on each_datetime = start_datetime where concat(each_datetime, ':00') > now() and start_datetime is null order by start_dt asc limit 1（空き候補を直近から5つ表示させるために、5などという設定も私は好きですが） ただし、all_datetime_tblは随時データを追加していく必要があり、データの追加状況によっては、答えはあるのに結果が表示されないという問題も発生します。 また、1年分を追加すると約35000件（96区分×365（366）日）増加するので、パフォーマンス次第ですが、不要になったレコードは削除していく等のメンテナンスも必要になるかもしれません。 2） 常にテーブルを気にかけるなんて真っ平ゴメンだとおっしゃるなら、必要な日時区分をその都度クエリに作らせましょうか。 プログラムのループ構文を使って、“日時区分を一つ作ってはjikan_tbl内のデータと照合”を繰り返す流れになります。 申し訳ないのですが、私はPerlしか書けないので、後はバイリンガルな方にPHPに翻訳してもらって下さい。 ###----------------------ここから------------------------->>> #---空き候補を直近からいくつ表示させるか my $cand = 1; my ($n, $result) = (0, 0); while ($result < $cand){ $n++; my $sth = $dbh -> prepare (" select substring(each_dt, 1, 16) as start_dt, substring(date_add(each_dt, interval 15 minute), 12, 5) as end_t from ( select date_add(concat(date(now()), \' \', hour(now()), \':00:00\'), interval (truncate(minute(now()) / 15 + $n, 0) * 15) minute) as each_dt ) as T1 left join ( select concat(start_datetime, \':00\') as ref_dt from jikan_tbl ) as T2 on each_dt = ref_dt where ref_dt is null "); $sth -> execute(); my $count = $sth -> rows();#---該当件数の取得（0件か1件のどちらか） if ($count == 1){ my @array = $sth -> fetchrow_array(); print $array[0].' ～ '.$array[1]."\n"; $result++; } $sth -> finish(); } ###----------------------ここまで-------------------------/// 私の環境（MySQL＋Perl）では動作確認済みです。 こちらの方法に難点があるとすれば、jikan_tbl内のデータが増えれば増えるほど、パフォーマンスもどんどん低下していく可能性があるという点でしょうか。 プログラムのループ処理速度に大きく左右されるため、SQLの速度的恩恵は少ないかもしれません。 最後に、余計なお世話かもしれませんが、素朴な疑問です。 現時刻がたとえ10:44:59でも、これを使えば、直近の候補が10:45と出る可能性は充分あります。 本当にそれで現実的な対応ができるのでしょうか？
datetimeバージョンをざっと //元データ create table t_jikan(start datetime,end datetime); insert into t_jikan values('2013-09-27 10:00','2013-09-27 10:15'),('2013-09-27 10:15','2013-09-27 10:30'),('2013-09-27 10:30','2013-09-27 10:45'),('2013-09-27 11:00','2013-09-27 11:15'),('2013-09-27 11:30','2013-09-27 11:40'); //後ろ時間が空いているviewをつくっておく create view v_jikan as select j1.start,j1.end from t_jikan as j1 left join t_jikan as j2 on j1.end=j2.start where j2.start is null; //空き時間一覧 select v1.end as start,min(v2.start) as end from v_jikan as v1 inner join v_jikan as v2 on v1.end < v2.start group by start; //特定時間の直近の空き時間 select v1.end as start,min(v2.start) as end from v_jikan as v1 inner join v_jikan as v2 on v1.end < v2.start where v1.end>='2013-09-27 10:00' group by start order by start limit 1; ここで'2013-09-27 10:00'を '2013-09-27 10:45'や'2013-09-27 10:50'や'2013-09-27 11:50'に 変えると状況がヒットするレコードが変わることがわかる
一例。
WHERE id in(1,3,8) です。
#1さんの回答の考え方で良いと思いますが、HAVING句の位置と綴りに間違いが有るようです。HAVING句は GROUP BY句の後に書きます。 SELECT id, SUM(num) FROM teble GROUP BY id HAVING SUM(num) >= 20; また、サブクエリを使っても同様のことは実現できます。 SELECT * FROM (SELECT id, SUM(num) AS sum_num FROM teble GROUP BY id) a WHERE sum_num >= 20; HAVING句を使った方がスマートだとは思いますが。
http://dev.mysql.com/doc/refman/4.1/ja/string-functions.html http://dev.mysql.com/doc/refman/5.1/ja/string-functions.html http://stackoverflow.com/questions/3157643/how-to-select-one-text-column-which-string-length-0 select * from some_table where length(some_string) > 0; 参考になるSELECT文です。
聞きたい事は SELECT @num := "abcdef" FROM @num WHERE @num LIKE '%a%'; これを実行すると ERROR 1064 (42000) ～省略～ at line 2 と、なりますが、(1)なぜエラーになるのか、(2)ここからどう直せば通るのか、の2点が分からない。 でいいのかな。 まず、これの2行目でエラーが起きるのは「@num」なるテーブルが無いのもさる事ながら、アットマークで始まるテーブル名が識別子として不正だからだ。で、次に SELECT @num := "abcdef" FROM (SELECT @num := "abcdef") WHERE @num LIKE '%a%'; これのエラーは2行目のインラインビューに名前がついていないのが原因。 SELECT @num := "abcdef" FROM (SELECT @num := "abcdef") as numtable WHERE @num LIKE '%a%'; これでOK。さて、この時に3行目の@num LIKE '%a%'がどういう意味になるかだけど、2行目の(SELECT @num := "abcdef")によってabcdefという文字列リテラルが設定された変数@numにaという文字が含まれるかという判定を行う。 @numがSQLの構文うんぬんとは少し離れた場所に居る「MYSQLの変数という概念」である事が分かれば、SQLとどう組み合わせれば良いかというのが分かるかと思う。 で、実行される順番というか@numに出し入れする順番は2行目、3行目、1行目になる。このSQLを見て欲しい。 SELECT @num := "hoge" from (select @num := "fuga") as numtable WHERE @num LIKE '%a%'; まず2行目のインラインビューが実行されて@numにfugaが設定される。次にそのインラインビューのうちどの行を出力するかの判定が3行目で行われ、その時の@numの値はfuga。するとインラインビューの1つ目が出力される事になったので出力しようとするとこのタイミングで1行目の@num := "hoge"が実行され、@numの値がhogeになった後で結果セットを返す事になる。なので、このSQLはhogeが返される。
> この1件のデータをインポートをさせた時、サーバ側にある1000件のデータにプラスされて1001件になるでしょうか いえ～すざっつらいと。 > それとも、1000件の上にインポートされたデータがかぶせられて、1000件のデータがなくなり1件になってしまうのでしょうか の～！ ただ、CSVでデータをやりとりするのはお勧めしない。Excelが悪さをする事もあるし。SQLでエクスポートした方が安全かも。 それに、phpMyAdminを使ってるんだったら適当な行を表示してコピーすればいいんじゃない？　行を表示した時にチェックボックス、編集、コピー、削除って出てるでしょ（phpMyAdmin 3.5.7で確認）。そこでコピーを選ぶと、元のデータが全列に入った状態でinsert画面になる。そこでちょこちょこっと値を書き換えて登録した方が楽チンだと思うけどな。
＞NULLは使わない設定にしています 思い込みで否定せずに試してみようよ・・・ NOT NULLの設定した項目にNULLをセットしてやるとクリアになります。 文字列型なら''、数値型なら0 また、デフォルト値にしたいならdefaultを指定してやるのでもかまいません SET gif=default
すでに対策済みかもしれませんが以下チャレンジしてみては？ ・テーブルやカラムの照合順序 ・my.cnfでのinit-connectの誤設定 ・phpでPDOを利用しているのであればnew PDO()する際にcharsetを指定していない ・単に出力されたデータがブラウザで正当に評価されていないだけならheader()やmetaなどで補足する
こんな感じ //元データ create table tbl(no int,suuti int,wasan int null); insert into tbl(no,suuti) values(1,1),(2,2),(3,5),(4,2),(5,2); //更新 update tbl as t1 inner join tbl as t2 on t1.no=t2.no+1 set t1.wasan=t1.suuti+t2.suuti;
ああ、なんとなくわかりました ＞ＮＵＬＬの場所に、aaaaa、bbbbb、cccccを挿入する方法も分からないため、 ということはnullを置き換えてよろしいのでしょうか？ であれば、以下のようなupdateをしてみるとよいかもしれません //元データ create table tbl1(no int,kubun varchar(20) null,flg tinyint null); insert into tbl1 (no,kubun) values(1,'aaaaa'),(2,null),(3,null),(4,null),(5,'bbbbb'),(6,null),(7,'*nozoku'),(8,'ccccc'),(9,null); create table tbl2(no int,komoku varchar(20)); insert into tbl2 values(1,'bbbbb'),(2,'eeeee'); //nullや*で始まる区分を置き換える update tbl1 set kubun=if(kubun is null or kubun like '*%',@a,@a:=kubun) order by no; //tbl2の項目と合致するtbl1のフラグをたてる update tbl1 inner join tbl2 on tbl1.kubun=tbl2.komoku set tbl1.flg=1;
＞xmasデータベースにxmastranテーブルは確かに存在しています。 　えっと・・・入力されたプログラムでやりたいことは、xmasデータベースを作り、その中にxmastranテーブルを作成したいんだと思うんですが、xmastranテーブルが確かに存在していて、何か他に不満な点があるんでしょうか？ 　これで完成のように思うのですが・・・・
nameのケツが「課」か「部」を調べるなら正規表現でしょうね where name regexp '(部|課)$' これを利用してupdateすればよいです //データ作成 create table bumon (name varchar(30)); insert into bumon values('経理課'),('営業部'),('開発部'),('部門開発部'),('RアンドD'); //更新 update bumon set name=left(name,char_length(name)-1) where name regexp '(部|課)$'
自分の場合は、tinyintにtrue(1),false(0)を直接格納しています。 そうすることで、取り出すときもカラムの値をboolvalで解釈すればスムーズに受け取れます。 charですと、誤った文字列を格納してしまうバグの温床になるのでやめたほうが良いと考えます。
　サーバーの種類により、ログイン画面を経由させる時に、クッキー認証を必要としているからではないでしょうか。 　あなたのご覧になられたＵＲＬhttp://php1st.com/435/＜ＰＨＰプログラミングの教科書＞の中に、赤字で説明してありますよ。
いまのままのテーブル構成だと集計にあまり向いていないと思いますが とりあえず動けばいいというならこんな感じでサブクエリにして joinすればいいのでは？ select 年,月,最大値,`datetime` from 米ドルtbl inner join ( select year(`datetime`) as 年, month(`datetime`) as 月, max(usd) as 最大値 from 米ドルtbl group by 年, 月 ) as sub on year(`datetime`)=年 and month(`datetime`)=月 and usd=最大値
SET句で number に既存の値の前に'東京/'を付けたものを設定すれば良いかと。 http://dev.mysql.com/doc/refman/5.1/ja/update.html 文字列連結には CONCAT 関数を使います。 http://dev.mysql.com/doc/refman/5.1/ja/string-functions.html#function_concat 例) ------------------------------------ UPDATE テーブル名 SET number = CONCAT('東京/', number) WHERE area LIKE '%tokyo%';
create table もそうですが、生成したＳＥＬＥＣＴ文を張ってください よっぽどファンタスティックなテーブル設計をしない限り。ＳＥＬＥＣＴ文のほうに 間違いがあるのだと思います。たとえば、JOINする対象を間違えているとか。 取あえず、この文章だけだとo2shgi3eatgeさんがやりたいことはRDB（SQL）が得意とすることなので SQL入門を読んでその通りに作れば、できますよとしか言えません。
my.cnf, my.ini などで、 log_warnings を 0 に設定してはどうでしょうか？ (警告レベルのログが一切出力されなくなりますが・・・) http://dev.mysql.com/doc/refman/5.1/ja/error-log.html http://dev.mysql.com/doc/refman/5.1/ja/option-files.html
そのログに書いてある通りなのでは? 設定とか見直してください
なんらかの削除フラグを立てて、更新後削除フラグのたっているデータを削除するのが妥当 そもそもデータを削除しないで削除フラグがないデータだけ集計対象にするだけでよい気がします
＞5:17:14 [Apache] Found Path: "c:\Apache24\bin\httpd.exe" -k runservice ＞5:17:14 [Apache] Expected Path: "c:\xampp\apache\bin\httpd.exe" -k runservice Apacheのプログラムがc:\Apache24\bin\httpd.exeにあると指定されていますが、 c:\xampp\apache\bin\httpd.exeにインストールされていますという意味です。 Apache24が残っていますので、とりあえずアンインストールしましょう。
MySQL の仕様では、GROUP BY した際に一意にならないカラムをSELECT句に指定した場合は、そのグループに属する値のどれかを返します。その中のどれを返すかについては特に基準は有りませんので、不確定です。 詳しくは下記のページを参照して下さい。 http://dev.mysql.com/doc/refman/5.1/ja/group-by-hidden-fields.html なお、 null 以外は同じ値になるのでしたら、MAX 関数などを使えばその値が取得できるかと。 例) SELECT address, MAX(title), SUM(count) as SUM FROM ・・・
>　As nameを使う以外に ないのでasを利用してください
Where じゃなくて、group byじやないですか？ まずはInsertせず、Selectで試験して下さい。 SELECT 'staff',product,SUM(user_volume) FROM user_table Group by 'staff', product ;
Apache単体でインストールしたんですか？ 「XAMPPとしてインストールした」とかではありませんか？ もしそうなら、インストール先フォルダにあるUNINSTALL.EXEを実行。 （XAMPPが一式アンインストールされます）
こんにちは。 >データベースのデータに更新があったときにリアルタイムなマッピングを行うにはどうすればよいでしょうか？ データベースの更新実行と同時にpushすれば、クライアント上で更新したのがわかるのでそれでマーカーのデータを取り直せば良いのではないでしょうか。 .1.mySQLのデータが更新されたをチェックするサーバ側の処理に接続 2.待ち状態になる 3.1の処理でmySQLのデータが更新されたら待ち状態を終了 4.クライアントはその待ち状態が終了したのを検知し、サーバ上に最新xmlを取得しに行く 1に戻る データが更新されたかは SHOW TABLE STATUS LIKE 'テーブル名' とかでテーブルの情報が取れますので前回の更新日と比較すれば良いと思います。 http://ja.wikipedia.org/wiki/Comet#.E5.AE.9F.E7.8F.BE.E6.89.8B.E6.B3.95 #1で回答したリンク先のページで私が説明するより詳しく載っています。 それを見てみてわからないのであれば、一定間隔でのポーリングでの実装をオススメします。 それ以上を求めるとそれなりの知識とスキルが必要になります。
・それしか手立てがない場合には別に構わないでしょう。 ・やりたいことによります。 　また、MySQLのバージョンによってはPHPなどの外部言語ではなく 　MySQL内のストアドプロシージャ、ファンクションでの実装も可能でしょう。 ・適切にインデックスキーなどが設定されている前提で考えると、 　ループ回数が少ない方がスピードが出るのがほとんどです。
エラーメッセージをちゃんと読みましたか？ xmasというデータベースとxmastranというテーブルを作るSQLになっていますが、 xmasデータベースがすでに存在しているというエラーです。 xmasデータベースを消した上でSQLを流すか、 　CREATE DATABASE xmas; の一文を消したSQLを流してください。
シングルクォーテーション2つです。 　default '' と書くことで、列の初期値は空文字列にするという意味になります。 ぱっと見では確かに紛らわしいですが、 ダブルクォーテーションだとおかしいという判断力を身につけましょう。
私も cron やタスクスケジューラを使えば良いかと思います。 http://itpro.nikkeibp.co.jp/article/COLUMN/20060227/230737/?ST=oss http://www.atmarkit.co.jp/ait/articles/1305/31/news049.html http://www.atmarkit.co.jp/fwin2k/win2ktips/335tasksched/tasksched.html なお、PHPにはコマンドラインで動かす為のCLI(Command Line Interface)という機能が有りますので、それを使って目的のプログラムを起動するコマンドを cron やタスクスケジューラに設定すれば良いでしょう。 http://www.php.net/manual/ja/features.commandline.php
＞ max の分だけ集計したい 一度最大値を変数にとっておくのが楽かも （テンポラリテーブルは微妙な制限があるので） create temporary table fuga(`int` int); insert into fuga values(0),(1),(2),(3),(4),(5); select @max:=max(`int`) from fuga; //ここで@maxに最大値をとっておく select fuga.int,ifnull(count,0) as count from fuga left join (select `int`,count(*) as count from hoge where `date`='2013-08-13' group by `int`) as sub on sub.int=fuga.int where fuga.int =@max //絞り込み
177行目のmb_detect_encodingはどこで定義されているのですか？ これが定義されていないような気がします。
セミコロンのありなしはともかくとして、ダブルクォーテーションで開始しているわけですから、 最後もダブルクォーテーションで終わらせて、ちゃんと囲まないとダメですよ。 ; UNIX: "/path1:/path2" ; Windows: "\path1;\path2" この行が、UNIX系の場合と、Windows系の場合の記述例です。
こういうこと？ //元データ create table hoge(address int,nyukai date,id int); insert into hoge values(1,'2013-01-01',201),(1,'2013-01-02',204),(1,'2013-01-03',202),(1,'2011-01-04',203), (2,'2013-02-04',101),(2,'2013-02-02',102),(2,'2013-02-01',103),(2,'2011-02-03',104), (3,'2013-03-01',301),(3,'2013-03-02',302); //表示 SELECT address,nyukai,id FROM hoge WHERE address in(1,2) ORDER BY case address when 1 then 1 when 2 then 2 else 3 end ASC, case address when 1 then nyukai when 2 then id end ASC もとの処理だとnagoyaだろうがnyukaiで一度ソートがかかるためidでソートされません。
手元のパソコンはマックでもウインドウズでもいいのですが、サーバ側でphpmyadminが呼び出せる環境なのでしょうか。だとしたら、そのサーバのＵＲＬのphpmyadminページのログイン画面でユーザー名とパスワードを入力すれば、データベースを作成できる画面になるはずです。 そのあと作成したデータベース名とパスワードをWordPress用のwp-config.phpファイルの所定箇所にあてはめて、サーバへFTPでアップロードします。そして、ＩＥなどのブラウザからそのサーバのＵＲＬのwp-admin/install.php を呼び出せば、サーバー上でインストール動作し、wordpressが呼び出せるようになります。 もし、会社のサーバにapacheもmysqlもphpもまだ設定していないのだったら、以下のサイトを参照し、まずご自身のMacにXAMPPをインストールしてパソコン上のローカルサーバーでのWordpressのインストールと設定の実験をすることをおすすめします。 http://www.apachefriends.org/jp/xampp-macosx.html その上で会社のサーバーを設定し、XAMPPとWordpressを動作できるようにしましょう。当然、外部から無断操作されないようにセキュリティ設定する必要があります。
#2です >そのパターンは無理でした。 なにか読み間違えていると思いますが・・・ もしかしたら5.5でできないのでしょうか？ 以下ためしてみてください。 create table hoge (id int not null,data int null); insert into hoge values(1,100),(2,null),(3,200); alter table hoge modify data int not null; nullだったid=2のdataは0になるはずです
いやだから「タイプミスが3件ありました」と書いたでしょ？ >tel verchar(20 default '', vercharじゃなくvarchar、かっこが閉じてない >PRIMARY KEP (book_id) KEPじゃなくKEY 文法（シンタックス）エラーの原因は大半がタイプミスです
仕様の詰め次第ですね tagとu_idの組み合わせがユニークかどうかでやり方が異なります たとえばu_id=5の人が一度「そば」を登録した後にダブって「そば」を 登録できるかどうかということ 仮にuniqueを前提にすればこんな感じ //元データ create table tags(id int not null primary key auto_increment,tag varchar(30),u_id int,unique (tag,u_id)); insert into tags values(1,'うどん',5),(2,'そば',5),(3,'うどん',2),(4,'ラーメン',2),(5,'そうめん',1),(6,'そば',3); //ユーザーごとにうどんorそばに合致する件数 SELECT u_id, sum(tag in('うどん','そば')) as agr FROM tags GROUP BY u_id ORDER BY agr DESC //うどんかつそばに合致するユーザー SELECT u_id FROM tags GROUP BY u_id having sum(tag in('うどん','そば'))=2
ん～・・・ 複数の店舗と、複数の書籍があって、各お店が最大6点までお勧めの書籍を 指定できるみたいイメージでしょうか？ //元データ create table book(bid int not null primary key,bname varchar(100)); insert book values(1,'A'),(2,'B'),(3,'C'),(4,'D'),(5,'E'),(6,'F'),(7,'G'),(8,'H'); create table shop(sid int not null primary key,sname varchar(100)); insert shop values(1,'X'),(2,'Y'),(3,'Z'); create table osusume(bid int,sid int,unique key(bid,sid)); insert osusume values(1,1),(2,1),(3,1),(4,1),(5,1),(7,1),(1,2),(2,2),(3,2),(5,2),(6,2),(2,3); //各お店のお勧めする書籍数 select o.sid,s.sname,count(*) as count from osusume as o inner join shop as s on s.sid=o.sid group by sid; //'X'(sid=1)がお勧めする書籍ランダムで3点 select o.bid,b.bname from osusume as o inner join book as b on o.bid=b.bid where o.sid=1 order by rand() limit 3 こうするとランダムに３点選ばれます。 もし同じ日に検索した場合同じデータを表示するためには rand()のシード値に日付を指定すればよいでしょう select o.bid,b.bname from osusume as o inner join book as b on o.bid=b.bid where o.sid=1 order by rand(curdate()) limit 3
"database exists" というメッセージが出ているということは、 最初にデータベースxmasをクリエイトした時点でもうこのxmasは発生していますから、 DROP DATABASE xmas を実行した後で、再度 CREATE DATABASE を実行すると動くでしょう。 またxmasの削除は、メニュー上からでもできます。phpMyAdminの左側の枠のオブジェクトリストを探してみて下さい。
＞MySQLの特定のカラムの全データを削除 「削除」とはどういう状態を想定しているのでしょうか？ レコードの削除と違いカラムのデータは削除はできません。 特定のデータで埋めるか、デフォルト値に戻すか、nullにするかでしょう。 以下サンプルです create table hoge (id int not null primary key auto_increment ,a1 int null default null ,a2 int null default 0 ,a3 int not null default 0 ,a4 int not null default 100 ,b1 varchar(30) null default null ,b2 varchar(30) null default '' ,b3 varchar(30) not null default '' ,b4 varchar(30) not null default 'xxx' ); 数値型のa1～a4と文字列型のb1～b4にそれぞれnull設定とデフォルト値設定をしたとします。 //テストデータ投入 truncate hoge; insert into hoge(a1,a2,a3,a4,b1,b2,b3,b4) values(1,1,1,1,'a','a','a','a'),(2,2,2,2,'b','b','b','b'),(3,3,3,3,'c','c','c','c'); ここで、「削除」的な処理をするには各カラムにNULLを与えます update hoge set a1=null,a2=null,a3=null,a4=null,b1=null,b2=null,b3=null,b4=null; こうすると、null設定した数値型はnull、null設定していない数値型は0、 null設定した文字列型はnull,null設定していない文字列型は''になっているのが みてとれます。 これではわざわざデフォルト設定しているのが意味がありません デフォルト値に戻したい場合はdefault()関数で処理します。 //データを再設定 truncate hoge; insert into hoge(a1,a2,a3,a4,b1,b2,b3,b4) values(1,1,1,1,'a','a','a','a'),(2,2,2,2,'b','b','b','b'),(3,3,3,3,'c','c','c','c'); //デフォルトとに戻す update hoge set a1=DEFAULT(a1),a2=DEFAULT(a2),a3=DEFAULT(a3),a4=DEFAULT(a4),b1=DEFAULT(b1),b2=DEFAULT(b2),b3=DEFAULT(b3),b4=DEFAULT(b4); こうすればnull設定してあってもデフォルト値が優先になりますし、 0以外の数値デフォルトや''以外の文字列デフォルトへ戻すことも可能です
update テーブル set 危険フラグ=1 where 賞味期限 < now() + interval 24 hour; みたいな感じで
こんなデータの持ち方をすると集計しやすいかと 仮に長野、亀井、坂本、阿部、村田の5人がいて、 長野は亀井と友達、阿部は長野、亀井、坂本と友達、村田はぼっちだとすると //元データ create table user(uid int not null unique ,name varchar(20)); insert into user values(1,'長野'),(2,'亀井'),(3,'坂本'),(4,'阿部'),(5,'村田'); create table friend(id int primary key auto_increment,fid int,uid int,unique(fid,uid)); insert into friend(fid,uid) values(1,1),(1,2),(2,1),(2,4),(3,2),(3,4),(4,3),(4,4); ※friendテーブルのfidは友達二人をつなぐためのリンク用id (1)各自友達が何人いるか集計する select user.uid,name,coalesce(count,0) as count from user left join( select uid,count(*) as count from friend group by uid ) as sub on sub.uid=user.uid order by uid; (2)各自の友達の名前を羅列する select u1.uid,u1.name,friends from user as u1 left join( select f1.uid,group_concat(u2.name) as friends from friend as f1 inner join friend as f2 on f1.fid=f2.fid and not f1.uid=f2.uid inner join user as u2 on f2.uid=u2.uid group by uid ) as sub on u1.uid=sub.uid
バルク処理でupdateまでやってしまうとなると一度テンポラリテーブルを 作った方がよいかも //元データ create table TBL1(id int not null unique key,string varchar(10),count int); insert into TBL1 values(1,'aaa',0),(2,'bbb',3),(3,'ccc',1); create table TBL2(id2 int not null unique key,string2 varchar(10),count2 int); insert into TBL2 values(1,'aaa',0),(2,'bbb',2),(3,'ccc',1); //処理 create temporary table tmp(id3 int,string3 varchar(10),count3 int); insert into tmp values (1,'aaa',3),(2,'bbb',3),(3,'ccc',3),(4,'ddd',3); insert into TBL1 select id3,string3,count3 from tmp left join TBL2 on id3=id2 where count2 is null or count2<1 on duplicate key update count=count3; //テンポラリを使わない場合はunionでデータを羅列？ insert into TBL1 select id3,string3,count3 from (select 1 as id3,'aaa' as string3,3 as count3 union select 2,'bbb',3 union select 3,'ccc',3 union select 4,'ddd',3) as list left join TBL2 on id3=id2 where count2 is null or count2<1 on duplicate key update count=count3;
＞別に勝手に連番 注意する必要があるのはauto_incrementは必ずしも連番を保証する機能ではないこと あくまでも他のレコードと異なることを保証するためだけのものなので 抜け番や飛び番が発生することを理解する必要があります 抜け番が発生しないようにするためにはかなり負荷の高い無駄な処理が必要です どのような運用方法を想定しているかによります。
命題の通りだと ＞C社：1件　重複1件 ではなく、こうじゃない？ C社：1件　重複0件 また、3月のB社への問合せはどうするのでしょうか？ B社：0件　重複1件 とするには「重複」ではないですから、非表示でよいのでしょうか？ 総じてこんなかんじ //元データ create table client(cid int,name varchar(20)); insert into client values(1,'A'),(2,'B'),(3,'C'),(4,'D'); create table ask(mail varchar(50),cid int ,dt datetime); insert into ask values('aaa@aaa.com',1,'2013-02-01-10:00:00'),('aaa@aaa.com',2,'2013-03-01-10:00:00'),('bbb@bbb.com',3,'2013-04-01-10:00:00'),('ccc@ccc.com',4,'2013-04-02-10:00:00'),('aaa@aaa.com',1,'2013-04-03-10:00:00'); //表示 select t1.cid,c.name,count(*) as kensu,( select count(*) from ask as t2 where and t1.cid=t2.cid and dt between '2013-02-01 00:00:00' and '2013-03-31 23:59:59' ) as chohuku from ask as t1 inner join client as c on c.cid=t1.cid where dt between '2013-04-01 00:00:00' and '2013-04-30 23:59:59' group by cid
追伸： システム立ち上げ時に元に戻りますが、戻すデータが見当たらないなどの場合は、 システムが壊れていますということで立ち上がらなくなってしまいます。
PDOで接続するときにcharsetを指定するとよいらしい $pdo = new PDO( 'mysql:host=myhost;dbname=mydb;charset=utf8', 'myname', 'mypass' );.
あくまで私見ですが参考までに →一般的には(1)が好まれるのではないでしょうか 往々にして選択肢というのはシステムの運用が始まると拡張することがないため １レコードに個別に埋め込むのが感覚的にももっとも適しているため メリット： 特定のレコードに対する有無だけをチェックする場合はもっとも効率的 データ構造が単純なためイメージしやすい （ようはエクセルちっくなデータだと思えばよいので） デメリット： 項目が増えるといちいちカラムを増やさないといけず、多くの選択肢がある 場合は物理的に対応できないなど、スケーラビリティが低い 冗長なもち方のため集計や抽出の際にあまり効率的なSQLをかけない →次に(2)と(3)はほぼ同様のケースであまりSQLライクではありません とくに(3)のような持ち方だとおおよそSQLとしての集計には向きません （例示の(2)はビット処理じゃないですね？1と2がチェックなら3？） メリット： カラム数がへらせる データの拡張が容易 デメリット： とくにインデックスがききにくいため大量のデータ処理にはむかない データに制限をつけにくい →個人的には(4)を使うケースが多いです メリット： 集計が簡単で簡便なSQL文で表現できる 拡張性はたかい デメリット： かならず集計のSQLが必要になるためなれないとSQL文が書きにくい ただし最初に書いた通り、拡張する必要があるかどうかで(1)の方を選ぶことも 多々ありそれはケースバイケースで設計時点で調整します
列Ａの値をインクリメントするようなＵＰＤＡＴＥ文を書いたことはありませんか？ update tbl set a = a + 1; などと同じように、シンプルに考えれば良いですよ。 update tbl set name_en = concat(substr(name_en,comma+1) ,' ',substr(name_en,1,comma-1)) ;
$result = mysql_query("select id from table where id = 1"); のあとに、print_r($result);なりvar_dump($result); を書いて、データがなかったときに$resultがどうなっているか確かめれば、 いちいち人に聞かなくても自己解決できるはずですけど・・・。
今回の件は完全外部結合と呼ばれるタイプの処理です MySQLの場合、ネイティブな機能の搭載が遅れているため とりあえずは結合のキーになる項目をunionで総ざらいし、そこに 各テーブルをjoinしていきます 具体的にはこんな感じ //元データ create table lastyear (name varchar(30),age int); insert into lastyear values('taro',21),('jiro',24); create table thisyear (name varchar(30),age int); insert into thisyear values('taro',22),('saburo',20); //表示 select t1.name ,t2.age as lastage ,t3.age as thisage from (select name from lastyear union select name from thisyear ) as t1 left join lastyear as t2 on t1.name=t2.name left join thisyear as t3 on t1.name=t3.name;
>【select distinct カラム名 from テーブル1 union select distinct カラム名 from テーブル2;】 >としても重複を取り除いた後にテーブルを結合してるので結果的に両テーブルの重複した値を取り除くことができず。 いや、できますね むしろunionするならdistinctもいらないです。 //データ作成 create table t1(data int); create table t2(data int); insert into t1 values(1),(2),(2),(3),(3),(4); insert into t2 values(1),(3),(3),(5); //表示 select data from t1 union select data from t2; //重複も表示するならunion all select data from t1 union all select data from t2;
＃１です。補足しておきます。 ＯＤＢＣ経由です。 accdb（リンクテーブル） <--ODBC--> MySQL accdb上で、自ファイル内のテーブルとリンクテーブルのクエリを作成する。
＃１、＃２、＃５です。 ＃３さんへの回答の補足を見落としてました。 原因は From にあります。 > left JOIN kashu ON song.kashu_1_ID = kashu.kashu_ID) > left JOIN kashu_yomi ON song.kashu_1_ID = kashu.kashu_ID) ←追加 > left JOIN kashu_yomi ky2 ON song.kashu_2_ID = ky2.kashu_ID) ←追加 ＜結合の方法＞ JOIN ＜テーブル名＞ ON ＜結合列の条件＞ であるべきが ＜結合の方法＞ JOIN ＜列名＞ ON ＜結合列の条件＞ になってる。 これ、kashu_yomi　は１行目の left JOIN kashu ON song.kashu_1_ID = kashu.kashu_ID) で拾えるので２行目は不要。 ３行目はテーブル名を記述するのが正しいので left JOIN kashu ky2 ON song.kashu_2_ID = ky2.kashu_ID) ←追加 です。 ただし、selectを ti2.tie_up as tie_up2 kashu.kashu_yomi, ←追加 ky2.kashu_yomi as kashu_yomi2 ←追加 と変更することも必要。
あ、１です。 新しくレコードを追加するんでしたね＾＾； 先ほどの例だと「今日のメモ」を上書きしてしまっていました。 （名字、名前が既に登録されていたら今日のメモを上書き、 名字、名前が一致しなければレコードを追加するというＳＱＬ文でした） あたらしくレコードを追加するのはINSERT INTOです。 主キーの設定をしなければどんどん追加できますけど、名前と名字がかぶってしまって無駄になってしまいますね。 私ならテーブルの構成はこうします 名簿テーブル ・ＩＤ （主キー） ・名字 ・名前 メモテーブル（主キーなし） ・ＩＤ ・日付 ・メモ メモがあればメモテーブルにどんどんINSERTしていけばいいと思います。 メモの内容の変更はをUPDATEでWHERE句でIDと日付を指定すればいいと思いますー＾＾ｖ
MySQLのLOAD DATA INFILEにおいては、 character_set_databaseシステム変数の文字コードが使用されます。 おそらくですがxamppでインストールしたMySQLでは、 character_set_database = latin1 が設定されているので、これを変えてあげればいけると思います。 方法としては2つ。 【前提】 ・csvファイルの文字コードは「UTF-8」とする。 【方法１】PHPのスクリプト内で設定する。 ご提示いただいたソースで、 ------------------------------------------------------------- $query = mysql_query('set character_set_database=utf8;'); // ←追加 $file = '"c:/tablea.csv"'; $sql = "LOAD DATA LOCAL INFILE $file INTO TABLE tablea FIELDS TERMINATED BY ',';"; $query = mysql_query($sql); mysql_close($cn); ------------------------------------------------------------- の「set character_set_database=utf8;」を実行する1行を、 「LOAD DATA LOCAL INFILE」でデータを取り込む前に実行してあげる。 【方法２】MySQLの設定を変更する。 MySQLの設定ファイル c:\xampp\mysql\bin\my.ini （適宜ご自分の環境に置き換えてください。） に、 ------------------------------------------------------------- # [client]ブロックに下記の行を追加する default-character-set=utf8 # [mysqld]ブロックに下記の行を追加する character-set-server=utf8 skip-character-set-client-handshake ------------------------------------------------------------- を追記して、MｙSQLを再起動して、PHPを実行する。 （こちらの場合はソースの変更はいらないかと思います。） 【参考サイト】 http://1000g.5qk.jp/2010/11/04/xampp%E3%81%AEmysql%E3%81%A7%E6%AD%A3%E3%81%97%E3%81%8Futf-8%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/ のどちらかの方法で、いけるかと思いますので、 ご確認いただけますでしょうか？ よろしくお願いします！
　単一のテーブルの単一のデータは、どんなパターンでinsert・updateなどをしても「壊れる」ことはありません。このための保護は、全て、MySQLが自動でやってくれます。 　ただし、システムとしてデータが壊れないのと、論理的な意味でデータが壊れないのは話が別です。 　よく、例に挙げられるのが、銀行口座の残高。 　Ａさんの口座から、千円引き出すとします。 　　ａ１．Ａさんの口座の残高を確認し 　　ａ２．その残高から千円を引いて 　　ａ３．Ａさんの口座残高を新しい値にupdateします。 　さて、ここで、Ａさんの口座に、千円振り込むとします。やっぱり、 　　ｂ１．Ａさんの口座の残高を確認し、 　　ｂ２．その残高に千円を足して、 　　ｂ３．Ａさんの口座残高を新しい値にｕｐｄａｔｅします。 　ここで、この二つの処理が同時に発生したとします。 　処理の順番は、その時の運によってどうにでもなります。a1,b1,b2,a2,a3,b3かもしれないし、他の順番かもしれません。 　考えられる順番で、最後の残高がどうなるか考えてみてください。 　 　なんのロック処理もしなくても、データベースファイルが壊れることはありません。でも、正しいロック処理をしなければ、多分、この銀行は壊れます（笑）
SELECT song.song_ID, song_name, song_name_yomi, kashu, ←これ これがkashuテーブルから参照するのかka2エイリアスから参照するのか判断できないから ちなみにmysql_query("・・・") or die(mysql_error())で デバッグするとよいでしょう。 なおmysql_query関数は非推奨なので、そのままの運用だと早晩いきづまりますので 移行を考えてください
カラムの型がVARCHERだからです。 VARCHERは文字列型なので、データを数値ではなく文字列として検索しMAXを探しています。 文字列比較は左側の文字から順番に1文字ずつ比較しますので、1と9では9の方が大きいと判断されます。 従って、9999 と 10001 では 9999 の方が大きいと判断されます。
## 私はANo1の方の回答のようにスカラー副問い合わせ使ったほうがいい ##（適切なインデックスをつけると確実に処理が早いため）と思っていますけど ## 質問文の以下を素直に反映したSQL文を参考までに記載しておきます。 >やり方としては下記の(1)と(2)の結合ができれば良いと考えております。 select A.商品コード,A.販売個数,A.販売店コード,B.商品コード毎販売個数合計 from (　SELECT　商品コード,　SUM(販売個数) as 販売個数,　販売店コード　FROM　販売テーブル　 　　　　　　　　　　　　　　　　　　　　　GROUP　BY　CONCAT(商品コード,'and',販売店コード) ) as A, ( 　SELECT　商品コード,SUM(販売個数) as 商品コード毎販売個数合計　FROM　販売テーブル　group　by　販売テーブル.商品コード ) as B where A.商品コード = B.商品コード なお、 GROUP　BY　CONCAT(商品コード,'and',販売店コード) は GROUP　BY　商品コード,販売店コード で問題ない というより、商品コード,販売店コードのインデックス作っても早くならないので 後者のほうがいいのでは？ （ファンクションインデックス作るのならいいですが、ファンクションインデックスばかり作ると、 　システム全体としてインデックスの数が増える傾向になり効率悪い。） あ、ひょっとして、 販売店コード　A1　と販売店コード　andA1　を一つにまとめて集計したいということ？ （違うと思うけど）なら、そのままでないとだめです。
アクションが作成されたが挑戦者がまだ０名の状態，では， actionテーブルには行はあるが， resultテーブルにはそれと結合できる行が存在しないのではないか， という印象があるので， 質問者がなぜ result LEFT JOIN action としたのか， 与えられた説明文からは納得できなかった。 SELECT a.id AS "アクション", a.user_id AS "作成者", r.user_id AS "挑戦者" FROM action a LEFT JOIN result r ON a.id = r.action_id JOIN user u1 ON a.user_id = u1.id JOIN user u2 ON r.user_id = u2.id
月の末日やうるう年の処理を行ってくれるのは十分なメリットかとおもいます。 SELECT '2013-06-30' + INTERVAL 1 DAY; 結果は「 2013-07-01 」 SELECT 20130630 + 1; 結果は「 20130631 」 なお1番目が上手く表示されないときはCAST関数でDATE型に変換してみてください SELECT CAST( '2013-06-30' + INTERVAL 1 DAY AS DATE );
dradra33さんはじめまして 結論から言いますと ストアドプロシージャは作成されていますし 実行されているはずです。 ただ内容がSELECT文なので ストアドプロシージャはデータベースから SELECT文の結果を取得して、パソコンメモリ上のどこかに 格納したはずです。でも、それだけです。 その結果をdradra33さんの目で確認するには別の命令が必要になります。 なぜそうなるか、説明しますと、プログラムは最終的な結果だけが重要で その途中経過をいちいち表示するとうざいからです。 (SELECT文をGUIで実行すると表示されるのはそれが最終目的だからです。) ストアドプロシージャの実行を確認するだけなら　INSERTかDELETE文なんかをお勧めします。 途中で消えるのはよくわかりませんね キー操作ミスじゃないんですかね。 別のGUIをつかってみては MySQLWorkbenchとか
>最終更新日 SHOW TABLE STATUSすればUpdate_timeで更新日時を得ることができます ただしエンジンによるのでMyISAMはけますがInnoDBは無理みたいです また、遅延書き込みなどあるので厳密な更新時間は得られないと思います
パッと思いつくのは下記の2つほどですね。 a. 相関サブクエリを使う方法 SELECT * FROM master m WHERE ( SELECT COUNT(DISTINCT hakko) FROM data d WHERE m.kata = d.kata AND m.kyaku = d.kyaku AND hakko IN (201303, 201305) ) >= 2 WHERE句では、一つ一つの master レコードについて、 kata と kyaku が同じで hakko が 201303 か 201305 の data レコードを取り出し、その hakko の値が2種類以上有るかどうか調べています。DISTINCT が付いているのは hakko に同じ値が複数有っても1つと数えるためです。 b. 結合してHAVING句で判定する方法 SELECT m.kata, m.kyaku, m.code FROM master m join data d on m.kata = d.kata and m.kyaku = d.kyaku GROUP BY m.kata, m.kyaku, m.code HAVING SUM(CASE hakko WHEN 201303 THEN 1 ELSE 0 END) >= 1 AND SUM(CASE hakko WHEN 201305 THEN 1 ELSE 0 END) >= 1 master と data を結合したものを master の項目でグループ化し、HAVING句で hakko が 201303 のものと 201305 のものが存在するか判定しています。 性能的には、どちらも今一つかも知れません・・・。 MySQL version 5.5.8 で確認しました。 http://codezine.jp/article/detail/907 http://codezine.jp/article/detail/405?p=2
MySQL以外のメジャーなRDBMSの場合、RANK() OVER()関数が使えます。 なので、テーブル側に持たず、PHP側で処理を行うのでなく、サーバー側のSQL処理に任せるのがほとんどだと思います。 MySQLの場合はRANK関数を実装していないので、ちょっと面倒ですが、NULLがない項目であればユーザー変数を使ってRANK関数を模倣することは可能です。 少し分かりにくいかもしれませんが参考にしてください。 http://note.chiebukuro.yahoo.co.jp/detail/n181988
結論から申し上げると、 ＞「wordpressの構成ファイル（index.htmlやwordpressテンプレートなど）を社内のwebサーバーにインストールし、MySQLデータベースは外部のサーバー（もしくは社内の別サーバー）を利用する」 のajisaitovi様が想定する利用方法は可能かと思います。 WordPressの初期設定画面におきまして、 ・DB名 ・DBのユーザ名 ・DBのパスワード ・DBのホスト名 の入力が求められるところがあると思いますので、 その情報を外部のMySQLサーバーの情報で設定すればOKではないかと。 1点、MySQLはデフォルトでは外部からの接続を許可しない設定になっておりますので、 ○他社様のサービスを利用する場合 外部からの接続が許可される設定が可能か？（もしくはそういった設定が可能か？） をご確認いただく ○社内で設定変更が可能なMySQLを利用する場合 新たに外部からの接続を許可するユーザーを追加する といった対応が必要になるかと思います！
テーブルa内にid=1の行は5行存在。うち4行はnameがnullで，1行はname登録済。 テーブルb内にid=1の行は7行存在。うち1行はnameがnullで，6行はname登録済。 テーブルc内にid=1の行は1行存在。その1行はname登録済で，nameがnullは無し。 これを次のSQL文で結合すれば， 出力される行数は 5×7×1＝35行分。 SELECT * FROM d INNER JOIN a ON a.id = d.id INNER JOIN b ON b.id = d.id INNER JOIN c ON c.id = d.id WHERE d.id = 1 そのうち， a.nameがnullなのは(4)×7×1＝28行分， b.nameがnullなのは5×(1)×1＝ 5行分， c.nameがnullなのは5×7×(0)＝ 0行分。 > どのように書けば正しい4,1,0を得られるのでしょうか？ 無意味にテーブルa,b,cを結合していること自体が正しくないわけですから， テーブルa,b,cひとつひとつに対して結果を求めるのが自然だと思います。
クエリを投げる前にとまっているなら コネクトかセレクトDBをうたがってみては？ $cn = mysql_connect("192.168.*.***", "user", "password") or die(mysql_error()); mysql_select_db("mydatabase",$cn) or die(mysql_error());
and birthday<>'1900-01-01' を追加します。
なりません。 ＩＤで検索する場合のみ高速になります。プライマリーキーの他にセカンダリキーもあります。つまりこれらはＩＮＤＥＸにキーを登録するためのもになります。逆にＩＮＤＥＸに登録されていない物はＩＮＤＥＸでは探せないので直接データファイルを検索することになるので時間がかかると言う事です。 昔直接に２分割方で３万件近くのデータのＩＮＤＥＸを作成し、検索をかけた場合で４回前後のデータアクセスで目的のレコードを取得することが出来ました。２分割法ではＩＮＤＥＸ部が順番通りに整理されていないとだめなのでＩＮＤＥＸの作り直しの際にとんでもない時間がかかりますのでお勧めはできません。 ＭｙＳＱＬだと別の仕組みでＩＮＤＥＸを作っています。ですが考え方は同じです。ＩＮＤＥＸに登録されていなければ検索には時間がかかると言う事です。
　auto_incremnt属性の付いたカラムの基本的な性質のため、普通は０を使えません。 　というのも、auto_increment属性のカラムは、そのカラムに、０かnullをインサートしようとした時に、自動採番した数値をカラムに代入するからです。 　カラムの値に０を許すと、自動採番の引き金になる０なのか、数値としての０なのかをMySQLが判断することが出来なくなります。 　ＳＱＬモード変数で、NO_AUTO_VALUE_ON_ZEROモードを有効にすると、この挙動が少しだけ変わり、nullをインサートしようとした時のみ自動採番するようになります。この場合は、０もデータとして利用できるようになります。 　が・・・・ 　そもそも、この質問が出る時点で、auto_incrementの使い方が間違った方向に行ってる気配を感じます。 　auto_incrementは、値の数字そのものには全く興味が無いがとりあえず、重複しない値が欲しいという時に使います。自動採番された数字は、連続しているとは「限らない」し、採番する時まで、どんな値になるかも不明です。 　例えば、ある決まった値から、連続したシーケンス番号を発行したい・・・と言う時には、使ってはいけません。欠番が発生する可能性があるからです。例えば、トランザクションＡとＢが同時に実行され、Ａがインサートした後で、Ｂがインサートを行い、その後、Ａがロールバックされたら、Ａの為に発行された数字は、欠番となります。 　この連続が不可欠の例としては、伝票番号があげられます。もし欠番が見つかったら、それは、伝票が行方不明になったという意味であり、監査の時に大騒ぎになります。 　このように、値そのもの（または、値と値の関係）に興味がある場合には、そもそもauto_incrementは使うべきではないとされています。ちゃんと自分で決められた条件を満たすロジックを作成して発行するべきです。 　０がないのが不満だと思った時点で、値の絶対値そのものに興味があると言うことですよね。大概これは、危険な兆候です。
もし本当に >SELECT * としているのであれば、必要カラムを明示的に列記すべき 今回の件であればtie_upテーブルを二重にjoinしていますので名称が競合していませんか？
> #1066 - Not unique table/alias: 'tie_up'と > エラーメッセージが表示されました。 uniqueという英単語の意味が分からなければ英和辞書を参照。 http://eow.alc.co.jp/search?q=unique 今回，tie_upというのは別名(alias)ではなく実表名(table)だったわけですが， > left JOIN tie_up ON song.tie_up_1_ID = tie_up.tie_up_ID) > left JOIN tie_up ON song.tie_up_2_ID = tie_up.tie_up_ID; と同一表を２度 用いたいのであれば，tie_up.tie_up_ID と言われてもそのtie_up表というのは not unique table だから，１度目に登場するtie_up表なのか，２度目に登場するtie_up表なのか，列別名を与えて区別してくれ，と言っているわけです。
>String sql = "select sum(oni) from テーブル名 where ken = '" + ken + "'"; これはoniというカラムを別途参照しているときにエラーがでているのでしょうか？ もしそうであれば String sql = "select sum(oni) as oni from テーブル名 where ken = '" + ken + "'"; などのクエリを投げてみてはどうでしょうか？ そうではなくSQL文をなげた時点でエラーがでているなら、やはりoniというカラムが ないと判断せざるを得ないですが・・・
外部キーが指定してあっても、 実際、SQLで取得する際には、2つのテーブルを結合する必要がありますので、 SELECT `song`.`song_ID`, `song`.`song_name`, `kashu`.`kashu` FROM `song` JOIN `kashu` ON `song`.`kashu_id` = `kashu`.`kashu_id` WHERE `song`.`song_name` LIKE '%%' こちらのような、SQLになるかと思います。
String sql = "select sum(kane) from employee where colom = '" + kotoba + "'"; じゃないでしょうか。
> (1)二つのテーブルの両方に存在するカラムの比較が全くなくても、式自体が > 成り立っていたらOKという事ですか？ > > それとも、 > > (2)最低１つは、（２つのテーブルに存在するカラムの比較）が必要で、 > それ以外はand等で、条件式として成り立つものならなんでもOKという意味ですか？ 実際に実行してみましたか？ 　SELECT * 　FROM Table_A LEFT JOIN Table_B ON 1 = 1 といった書き方も可能ですから、(1)が正解です。
順位を取得するには自己結合して『自分より順位が上の行数＋1』を求めればよいです。 例) ---------------------------------- SELECT *, (SELECT COUNT(*) FROM t_vote b WHERE a.vote < b.vote) + 1 AS rank FROM t_vote a ORDER BY vote DESC ------------------------------------- ちなみに、MySQLにも分析関数が導入されればもっと簡単に求められるようになると思われます。
厳密に測定すれば、2つしかカラムのないテーブルの方が、10カラムのテーブルよりも高速です。 たとえ、残り8カラムのデータすべてがNULLでもRDBMSでのテーブルスキーマの管理コストが余計にかかるためです。 しかし、ほとんどの場合、その他の要因のほうがパフォーマンスに影響を与えると考えられます。無用にテーブルを分割しても結合コストのほうが大きい場面のほうが多いと思います。 ちなみに、RDBではなければよく使うカラムが限られるような局面が多い事に注目して実装化されたのが「カラムベース・データベース」です。 この考え方は最近のMS SQL Serverなどでも取り入れられており、注目する必要があるかもしれません。
＞XAMPPでｍｙｓｑｌ これはphpMyAdminでデータ確認をしたときの文字化けでしょうか？ テーブルやカラムの照合順序は「utf8_unicode_ci」など 適切なものが設定されていますか？
MySQLでDB EngineがINNODBの場合基本として主キーでクラスタ化されて配置されます。主キーを宣言しない場合はMySQLが暗黙の主キーを人工的に設定し、データ配置を行います。 そのため、更新削除がなければ、概ね挿入順にデータを取得することになります。 ですので現在の実装であれば SELECT * FROM ．．． LIMIT 1; で最初に挿入した行を取得できる可能性があります。 しかし、これは実装依存ですし、MySQLの仕様として保証されるものではありません。 将来的に1クエリを並行に実行するようなものになった場合、異なる結果が返されるかもしれません。 「いつも同じ並び順で表示される」ことを基準にするなら、今のうちに「AUTO_INCREMNT」属性の主キーを持ったテーブルを作りINSERTすべきと考えます。 これなら ORDER BY 主キー LIMIT 1; で一番古いレコードを取得出来ます。
SQLの仕様上抜き出される順番はOrder　Byのみにより決定されます。５と１と３のみでその順番に抜き出したいのであれば「order by case id when 5 then 1 when 1 then 2 when 3 then 3 else 4 end」等で対応する以外無いです。
SQLで取り出せるデータはエクセルの表のような2次元でしかありませんので、selectした結果から直に多次元配列を作ることはできません。 ＰＨＰで地道に配列に入れていくしかないでしょう。 groupテーブルのselect結果をループ処理で順番に取り出し、そのループの中でgr_idをキーにproductテーブルをselectした結果をループ処理で順番に取り出し、さらにそのループの中でpr_idをキーにpictureテーブルをselectした結果をループ処理で順番に配列に入れるといった感じでしょう。
java.sql.SQLException: ResultSet is from UPDATE. No Data. java.sql.SQLException： 構造化問合せ言語例外 ResultSet is from UPDATE. No Data. アップデートするデータが、見つかりません。 SQL例外ですので受け付けられませんという意味です。 何らかのエラーが発生しているようです。 エラーの例 例えばテーブル名がない。 大文字小文字の区別が間違ている 列名か型が違う 主キーが重複している プログラム言語が違う など プログラミング内容を見てみないと 皆目見当つかないです。
かなり強引ですがこんな感じ？ //元データ create table hoge (id int,name varchar(20)); insert hoge values(1,'apple'),(1,'banana'),(2,'onion'),(2,'potato'),(2,'carrot'),(2,'radish'),(3,'beef'),(3,'chicken'),(3,'pork'); //集計 select id ,concat(group_concat(name) ,repeat(',NULL',(select max(c) from (select id,count(name) as c from hoge group by id) as sub)-count(name))) as name from hoge group by id; そもそも「NULL」を文字列として使用していいのか怪しいところ また例題のNULLの後ろにカンマがあったりなかったりブレがあるのが気になる ロジック的には、nameの最大件数を拾って、自分の件数との差だけ「,NULL」という 文字をつなげる・・・みたいなかんじ、 ただし思いつきを冗長にかいただけなのでもっと有効な方法があると思います
よくある話ですがまずはexplainでインデックスがうまく利いているか みながら調整していくことです。 この辺の情報を一つ一つ検証してみてください
＞値を1レコードに詰め込む必要があり30個近く １レコードについて多少カラムが多くてもさほど問題はないでしょう ただ、データの蓄積がすすみテーブルが肥大化したときには シークに時間がかかったりするかも 集計やデータ抽出がメインであればインデックスをきちんと貼っておけば スピードは確保できると思います。
#3です たとえばこんな感じで検討してみてはどうでしょうか？ テーブル、member=販売先管理テーブル,slip=伝票管理テーブル,sales=売上集計テーブル create table member(member_no int,name varchar(20),index(member_no,name)); insert into member values(1,'佐藤'),(2,'小島'),(3,'石田'),(4,'鈴木'); create table slip (slip_no int,member_no int,sales_date date,index(slip_no,member_no,sales_date)); insert into slip values(1,2,'2013-06-06'),(2,1,'2013-06-07'),(3,4,'2013-06-08'),(4,3,'2013-06-08'); create table sales(sales_no int,sale_slip_no int,goods_name varchar(30) null,request_money int null,receipt_money int null,index(sale_slip_no,request_money,receipt_money)); insert into sales values(1,1,'キュウリ',5250,null),(2,1,'イチゴ',3150,null),(3,1,'バナナ',8400,null),(4,2,'りんご',5250,null),(5,2,null,null,3000),(6,3,'ほうれん草',9450,null),(7,3,'しいたけ',2100,null),(8,4,'マンゴー',6300,null); //販売一覧を表示 select sales_no,sale_slip_no,sales_date,member_no,goods_name,request_money,receipt_money from sales as t1 left join slip as t2 on t1.sale_slip_no=t2.slip_no //集計 select t1.sale_slip_no,t2.sales_date,t3.name,ifnull(sum(request_money),0)-ifnull(sum(receipt_money),0) as request_mony from sales as t1 left join slip as t2 on t1.sale_slip_no = t2.slip_no left join member as t3 on t2.member_no = t3.member_no group by sale_slip_no
freの受け渡しを配列処理でできれば構文は簡素化できます <input type="text" name="fre[]"> <input type="text" name="fre[]"> <input type="text" name="fre[]"> <?PHP $sql = "SELECT id FROM friend WHERE 1"; $str=""; $fre=isset($_POST["fre"])?$_POST["fre"]:false; foreach((array) $fre as $val){ if(!empty($val)){ //空データの場合処理しない $str.=$str===""?"AND name IN (":","; $str.=$val; } } if($str!="") $str.=")"; $sql.=$str; print_r($sql); ?> nameが完全一致ならlikeで検索する必要はありません
>like '%4%' のような前方後方一致はSQLの不得意分野で基本的にインデックスはきかないため、 なにをやっても高速化は期待できません 遅くても気にしないなら適当なセパレータを使って連結してからlikeを使えば 書式はすっきりします（さらにスピードはおちると思いますが・・・） select * from tb where concat_ws(char(0),bang,name,tuki) like '%4%; ただし、この場合もbang,name,tukiは文字列型のカラムでnullがないことが前提になります そうでない場合は例外処理をいくつかかます必要があるでしょう
パイプ(||)で文字連結をするには事前の設定が必要です。 http://db.just4fun.biz/MySQL/MySQL%E3%81%A7%E3%83%80%E3%83%96%E3%83%AB%E3%83%91%E3%82%A4%E3%83%97%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E6%96%87%E5%AD%97%E9%80%A3%E7%B5%90%E3%82%92%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95.html 事前の設定なしで文字連結を実現できるという理由でconcat関数を使ったのではないでしょうか。
エラーメッセージの通り、MySQL用のJDBCドライバーだと思われます。 ダウンロードは下記のページから出来るかと。 http://dev.mysql.com/downloads/connector/j/ こういった際には、エラーメッセージに出ている文言(「com.mysql.jdbc.Driver」など)で検索するだけでも、いろいろと情報が得られると思いますよ。
　ＭｙＳＱＬは、さまざまなＯＳにインストールできます。 　ついでに、ＭｙＳＱＬに接続する方法も、実に様々な方法があります。 　というわけで、情報があまりにも不足していて、回答のしようが無いのが本音なんですが・・・ 　まぁ、とりあえず、windowsの何かにインストールして、PHPMyAdminで接続しようとしていると仮定して。 　最初は、つながっていたというのなら、サービスが起動しているかどうか確認してください。 　コントロールパネルの管理ツールの中にあるサービスで（windows　ＸＰ以降ならここにあるはず。これ以前なら、忘れました=^・・;=）、インストールされているサービスが全て列挙されますから、まず、MySQLが登録されているか、起動しているかどうか確認してください。 　もし、ステータスが、停止（起動の字がない。）なら、起動してあげてください。ツールバーからでも、右クリック→プロパティーで出てくるダイアログからでもかまいません。 　ついでに、自動起動をセットしておくとなお良いですね。同じダイアログから設定できます。 　さて、仮定が間違っているなら、質問事項がいくつか。 　１．インストールしたＯＳとバージョン 　２．ＭｙＳＱＬのディストリビューションの種類（どこから、何をダウンロードしましたか？） 　３．インストールの方法。 　４．ＭｙＳＱＬにはどうやって接続しようとしていますか？ 　（５．エラーメッセージは、何に出てきたのですか？まさか、何もないところにいきなりダイアログがでたわけじゃないですよね？） 　以上が補足されれば、きっと回答が出ると思います。
ｍａｘがいいでしょう。 処理時間に問題があればINDEXをつければ瞬時に出てきます。
いや ＞どーやって接続したの を教えてくれないことにはわからんけど・・・ XAMPPぽいからPhpMyAdminでログインしてSQL実行してみたほういいんでないかな 多分rootログインできるんじゃないかね PhpMyAdminがわからんとかなると、そもそもMySQL以前の話になるからApacheとかXAMPPとかの基礎をまずしてくれってことになります。
select ID_B,point from tableB where exists(select ' ' from tableA where ID_A='yokota' and ID_B in(ID_A,f1,f2,f3,f4,f5)) order by 1 です。
#1です。少し訂正が有ります。 複数の user の最新の日付が同じ場合に、それらのuserのデータが混ざって出力される可能性が有るので、ORDER BY句に user も含めるべきでした。 SELECT * FROM tbl_hoge a WHERE (SELECT COUNT(*) FROM tbl_hoge b WHERE a.user = b.user AND a.date < b.date) < 3 ORDER BY (SELECT MAX(date) FROM tbl_hoge c WHERE a.user = c.user) DESC, user, date DESC ;
　まぁ、使ってしまった予約語ならしかたがありません。そのカラム名を使う時は、'sikibetusi'のように、''で囲んであげてください。 　 ＞・予約語を回避するには、ここをチェックするしかないのでしょうか？ 　その通りです。ないしは、全部覚えるかですが・・・普通は、怪しげだなと思ったらチェックします。 　バージョンによっても違いますから、ちゃんと新しいマニュアルでチェックします。 ＞予約語による影響を受けるのはどんな時？(CREATEは関係ない？)　予約語によって異なる？ 　パーサーの構文解析規則はちゃんと決まっているのですが・・・・あんな複雑な規則を全部評価して、影響があるかどうか判断するのは、お勧めしません。しかも、変わる可能性は極めて大だし。 　全て影響があるものとして、予約語を識別子として使用した時は、必ず''で囲うというのが正解です。 　本来は、テーブルを設計した時に、必ず予約語表で確認すべきです。特に、簡単な英単語は非常に危険です。予約語が全部英語であることを逆手に取ることも出来ます。そう。カラム名などの識別子は、全部日本語のローマ字表記にしてしまうんです。まぁ予約語とバッティングすることはありません。日本人ならちゃんと意味も通りますしね。
ごめんなさい、単純にこれでいいかと・・・ UPDATE KOKYAKU_TABLE SET id = 9 WHERE id =0; UPDATE TYUMON_TABLE SET id = 9 WHERE id =0; UPDATE GAZOU_TABLE SET id = 9 WHERE id =0; JOINしてやりたいならまた書きますが、 無難にこれでいいと思います。 質問を読み間違えてたらすいません。
　厳密には、プログラムの構成がどうなっているかで、分かれるように思えます。 　プログラムの一部が、「リンク」されている場合、非常にグレーな部分があることをＧＮＵ自身がＦＡＱで明言しているので、話がやっかいです。 　今回の場合は、MySQLのクライアントモジュールがそれにあたります。 　MySQLのクライアントモジュールを静的にリンクしている場合は、おそらく商用ライセンスが必要です。（ネイティブAPIを素直に利用すれば、LIBがリンクされてしまうはずです。） （これに関しても、GNUのＦＡＱでは、最終的には、裁判による判断が必要と述べています。V3だとGCC例外が適用できる余地があるのですが・・・残念ながらMySQLのライセンス適用は、V2のようです。） 　動的リンクだと、どうも、微妙な話が残りそうな気配があります。グレーゾーンとしか読めない。 　 　MySQLのクライアントモジュールを利用する場合でも、ODBC経由だと、アプリをGPLから切り離せそうな気配です。例えば、ODBCの設定で別のDBMSに差し替えてもアプリは利用可能となれば、GPLからは切り離せます。その場合、MySQLをクライアントのマシンにインストールする為の手間賃以外の物を請求しなければＯＫだと思われます。ちゃんとGPLライセンス条項もインストールしておきましょうね。完成文書にMySQLの公式ダウンロード先の明示があれば、紛れがなくて、おな良いかも。 　この場合でも、MySQLの独自拡張の関数やSQL構文を利用しているとなると、若干の紛れが出そうな気配があります。多分大丈夫と思われますが。 　MySQLのクライアントモジュールを一切使用せず、独自コードでMySQLサーバーにアクセスをかけているなら、別の単体プログラムとして、アプリをGPLから切り離せそうです。 　ただし、これに関しては、プログラムとMySQLの関係の深さを問われると、微妙なところが残りますが。
こんにちは。 普通にできますよ？ CREATE PROCEDURE プロシージャ名(IN 変数名１ 型, IN　変数名２ 型, ・・・)
PHPはHTMLの中に埋め込んで使えるタイプの言語ではありますが、 DB処理の部分と出力部を完全に分けて書くようにすると、処理の流れが掴みやすく、 後からの修正も容易になりますよ。 > PDOの接続とクエリの記述位置やその他のルールを詳しく教えて下さい。 ルールとして覚えるのではなく、各行の意味（なぜその場所でそう書くのか？）を 理解する事が大切です。PDOを使った処理の流れは↓のようになります。 //-- DB処理 $link = new PDO(略);// [1] PDOのオブジェクトを生成（＝DBへの接続） $stmt = $link->query('SELECT...');// [2] 接続したDBに対してクエリ（SELECT文）を発行 $rows = $stmt->fetchAll(略);// [3] 発行したクエリの結果を受け取る //-- 出力 print_r($rows); SELECT文の発行～出力までの基本は、これだけです。 > 先に記述しておき（接続しておいて）、その後htmlやphpの記述をはさみ、 > 必要な部分で以下のように（クエリ）の記述をした場合、動きません。 まずは、上記が動く状態で、var_dump($link, $stmt, $rows); としてみて、 それぞれの変数の中身を確認してみてください。 その後、自分なりに色々アレンジしてみて、動かなくなってしまったら、 同様に var_dump($link, $stmt, $rows); としてみると良いでしょう。
パスワードを暗号化する場合は、hash　関数を使うのが一般的でしょうかね。 ハッシュアルゴリズムは　sha256　あたりが最近は多いでしょうか。 http://www.php.net/manual/ja/function.hash.php DBに登録する際に hash("sha256", $password); で暗号化したデータをDB入れておきます。 照合する際には mysql_real_escape_string(hash("sha256", $_POST['pass'])) として、検索をかければ照合できます。
$name3 = mysql_query("SELECT name FROM hoge2 WHERE id != '".$id."' AND name = '".$name."'"); じゃないでしょうか。
select * from Bテーブル join (SELECT SUBSTRING_INDEX(aカラム, '#', 1 ) as bカラム from Aテーブル) as sub on Bテーブル.id = sub.bカラム; って感じでしょうか。
適切なインデックスが設定されていないんだと思います。 explain構文というものがありますので、MySQLのオプティマイザがどのように解釈しているかを確認しましょう。 explain select(以下略 でどのように実行されているかが分かるので、結果を見ながらインデックスを付けるなどをすればパフォーマンスは変わってきます。 explainの結果のみかたはこちらあたりが参考になるでしょう。 http://dev.mysql.com/doc/refman/5.1/ja/explain.html http://nippondanji.blogspot.jp/2009/03/mysqlexplain.html
たとえばこんな感じ create table hoge (id int,url varchar(200)); insert into hoge values (1,'http://www.AAA.com/中略/0109.html'), (2,'http://www.AAA.com/中略/acb.html'), (3,'http://www.AAA.com/中略/0110-1.html'), (4,'http://www.AAA.com/中略/acb1.html'), (5,'http://www.AAA.com/中略/2acb.html'), (6,'http://www.AAA.com/中略/a3cb.html'), (7,'http://www.AAA.com/中略/123/abc.html'), (8,'http://www.AAA.com/中略/123.htm'); select * from hoge where url regexp '/.*[0-9][^/]*\.html$'
select id,case hoge_id when 0 then redult else (select redult from tbl t2 where t2.id=t1.hoge_id) end from tbl t1 order by 1 です。
＞mysql_select_db("db1".$s); mysql_select_db("db1",$s); じゃないの？
SELECT title, code, name FROM address_book NATURAL JOIN customers; じゃだめなの？
MEMORYエンジンは通常のストレージに保存するよりかなり容量をくいますので ギリギリの容量だと難しいかもしれませんね ssdなどではダメなんでしょうか？
＞mysql_query('SELECT name FROM hoge2 WHERE name=$name'); シングルクォーテーションで囲んでいるので$nameは展開されません また、プリペアド処理ではないので$nameにクォーテーションがないと かりに展開されても文字列はマッチしません せめてこんな感じに mysql_query("SELECT name FROM hoge2 WHERE name='".$name."'");
>>どのようなやり方をするのが主流なのでしょうか？ 主流。。。であるのかどうか不明ですが >>A101.A102のようなコード番号を自動でつけることができません。 確かに、自動連番は出来ないので、しゃーないので自分で連番になるようにするしか無いかな。と。 データが増える。って事は、どっかのタイミングで必ずデータのInsertをかけるって事になります。 Insertの際に、「A101」「A102」を取得してきて、突っ込む。 Insert直前に、今入ってるデータの最終番号取得してきて、それを「A」と「数字」にバラして、カウントアップしてから、またくっつけてInsertしてやる でもいいし あらかじめ専用テーブルもっといて、データ作成時にはそこ参照させてデータ作ってInsertして、Insert後には専用テーブルのカウントアップしてやる でもいいし まぁ、その辺は、システム側の要件に合うように、よさそうな方法を考える。ぐらいです。 「オートでインクリメント出来ない物に関しては、自分で何とかしてインクリメントしてやる」しかない。という考えでやってます。おいらは。
create unique index code_index on テーブル名(code) です。
timediff関数？ Ver4.1で使えるから、それ以降も大丈夫。 t.bookTime < b.rsvTime and timediff( t.bookTime, b.rsvTime ) = '01:00:00' ※厳密にはTIME_FORMATで整形しないと端数誤差が生じます。 ＃蛇足ですが、SQL文書くときは等号・不等号・カンマの後に ＃半角スペース１個入れると可読性が良くなると思います。
select * from 表A, 表B where 表A.列1 = 表B.列2 and 表A.列3 = 値 と select * from 表A inner join 表B on 表A.列1 = 表B.列2 where 表A.列3 = 値 は同じ結果となります。前者の方が古くからある構文，後者が新しい構文になります。新しいといっても20年は経っていますけれど。 > 普通は、どちらの書き方で書くとか、 > そういうお作法的な暗黙の了解はあるでしょうか？ 旧構文は，結合を指定する要素がfrom句とwhere句に分かれてしまっているのに対して， 新構文では次のように各句の機能が明確ですから，join句の使用をお薦めします。 射影…select * 結合…from 表A inner join 表B on 表A.列1 = 表B.列2 選択…where 表A.列3 = 値 > 書き方によっては「LEFT OUTER JOIN」みたいにも書けるのでしょうか？ 旧構文で外部結合を記述することもできますが，各データベース製品の独自構文になります。標準SQLの規格ではありません。 > 「WHERE」だと3つ以上繋げられない(？)から、奨励されていない、とか そういう制限はありません。
datetime型かdateとtimeを組み合わせないと予約が１回しかできませんね 今回の例だとこんな感じ？ select t.`time` from time1 as t left join booked as b on t.time>=b.time and t.time<b.finish where b.time is null finishの時間が次の予約とかぶるので冗長な書き方になります
>もっと効率の良いテーブル設計 絶対的なデータ量がおおいなら、効率もなにもないのでは？ 5000件のデータというのは5000項目別々でそれらが相関関係をもつのか たんに冗長なデータが5000個登録されるのかによって設計は異なります ご提示の例では何がしたいのかわからないので もう少し具体性をもった質問が良いと思いますよ
select key1, field1 from tableA where field1 = 'AAAAAA' union select key1, field1 from tableB where field1 = 'AAAAAA' order by key1 desc;
> ・エントリーに属するすべてのカテゴリーデータを取得するにはどうすれば良いでしょうか？ 構造的にはエントリーテーブルとカテゴリーマスターテーブルは対称になるので、#1で例示したSQLのテーブル名やカラム名をカテゴリー関係に入れ替えるだけで出来ますよ。 SELECT DISTINCT cm.* FROM カテゴリーマスターテーブル cm LEFT OUTER JOIN エントリー所属カテゴリーテーブル ec ON (cm.カテゴリーID = ec.カテゴリーID) WHERE ec.エントリーID = 101 テーブル間の構造が把握できない場合はER図などを書いてみると良いでしょう。 > ・例えば、一旦複数レコードとして取得後、スクリプト側で文字列連結とかして、1カラムのようにして、1レコード表示するのでしょうか？ > ・希望としては、エントリー毎に、属しているすべてのカテゴリー名とかを表示させたいです ？？？ エントリー毎に1行出力して、ひも付く全カテゴリーをその行に含めたいという事でしょうか？ そうだとしたら、GROUP_CONCAT を使えば良いでしょう。 SELECT cm.*, GROUP_CONCAT(et.件名) FROM カテゴリーマスターテーブル cm LEFT OUTER JOIN エントリー所属カテゴリーテーブル ec ON (cm.カテゴリーID = ec.カテゴリーID) RIGHT OUTER JOIN エントリーテーブル et ON (ec.エントリーID = et.エントリーID) GROUP BY cm.カテゴリーID ORDER BY cm.カテゴリーID 複数行が良いのなら、結合してカテゴリーID順にソートすれば良いでしょう。 SELECT cm.*, et.* FROM カテゴリーマスターテーブル cm LEFT OUTER JOIN エントリー所属カテゴリーテーブル ec ON (cm.カテゴリーID = ec.カテゴリーID) RIGHT OUTER JOIN エントリーテーブル et ON (ec.エントリーID = et.エントリーID) ORDER BY cm.カテゴリーID
名前が決まるまで事前に用意しておく必要はありませんので、最初はidとnameだけで十分です。
手元に環境がないので試していませんが、 MySQLは正規表現が使えるようなので、それを使うと楽です。 これを試してみてください。 SELECT * FROM テーブル名 WHERE フィールド名 REGEXP '/[0-9]+\\.html$' （「/[1桁以上の数字].html」で終わるものを検索）
いまいち状況がわからないのですが 不通にjoinしたり SELECT TEXT1,TEXT2 FROM hoge2 inner join hoge1 on hoge1.ID=hoge2.ID and (`INT1`=10 or `INT2`=10); サブクエリ使ったりしてみては？ SELECT TEXT1,TEXT2 FROM hoge2 WHERE ID in (SELECT ID FROM hoge1 WHERE `INT1`=10 or `INT2`=10)
'2240'については'は付けないでください。 皆さん間違えるところですが、'を付けるのは文字項目だけです。 DESCは大きい方から取ってきています。
MySQLじゃなくてphpの問題でしょう。 (3)は、phpの short_open_tag がoff なのでしょう。 php4 時代は、default on だったけど、php5 になってからは、default off です。 <?php で開始するように書き換えた方が今後も無難だと思います。 (5) は、まだ、$_GET[] を受け取ってないから、変数（または連想配列キー）が存在しないというwarning でしょう。 isset() で存在確認してから使って下さい。 上記は、php version upによるセキュリティ設定改善の結果です。 ネットショップ構築するなら、なおさらセキュリティに気を使って下さい。
複雑なクエリを書けばなんとかなりはしますが、内部で色々やろうとすると混乱するだけになるかと思います。 ストアドプロシージャという機能がありますので、PHPでやるのがいやであれば、そちらで行うことをおすすめします。
MyISAM エンジンで作成するなら、連動primary key で指定した２番目カラムを int NOT NULL AUTO_INCREMENT　とすれば、１番目のカラム値ごとに、１から順に番号を振ってくれます。 innodb エンジンでは出来ません。 create例 CREATE TABLE `auto_rendo` ( `column1` int(11) NOT NULL DEFAULT '0', `column2` int(11) NOT NULL AUTO_INCREMENT, `memo` varchar(255) DEFAULT NULL, PRIMARY KEY (`column1`,`column2`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8
簡単な方法として、INFORMATION_SCHEMAのTABLESテーブルを利用して、 SELECT CONCAT('DROP TABLE ', TABLE_NAME, ';') FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'hoge\_%'; という感じのSQLでテーブル削除用のSQLを作成してはいかがでしょうか。 もしくはストアドプロシージャを作成して動的SQLを実行するか。
なんかidの使い方に強い違和感がありますが、 > IDにPRIMARY KEYが付いているのですが2つ同じPRIMARY KEYはINSERTでききませんよね？どうすればいいでしょうか？ primary keyにしなければよいのでは？ CREATE TABLE hoge( id INT, item VARCHAR(255), value INT ); > IDごとにまとめて取得して配列に入れる方法はありますか？ whereつきでselect文を発行すれば特定のidのものだけを取得出来ます。 select * from hoge where id = '1'; 例えば、こんな感じ？ my $id = 1; my $rows = $dbh->selectall_arrayref('select * from hoge where id = ?', {Columns=>{id=>undef, item=>undef, value=>undef}}, $id); prepare、executeのスタイルを取りたいならこういう書き方もありですが。 sub GetRows { my ($dbh, $id) = @_; my $sth = $dbh->prepare('select * from hoge where id = ?'); $sth->execute($id); my @rows = (); while (my $row = $sth->fetchrow_hashref()) { push(@rows, $row); } $sth->finish; return \@rows; } 余談ですが、idというのは普通identityやidentificationの略で、固有の番号を示すのに使われると思うので、それで2つ以上のものが取得できるというのはちょっと違和感があります。idというよりむしろgroup_idなのでは。 groupで共通する内容はgroupのテーブルを作ってそこに入れ、group_idはgroupのテーブルのidを指す外部キーにしそうなものですが。
MySQLの文字コードと、コマンドプロンプトの表示できる文字コードが異なるからでしょうね そもそもxamppを導入してphpMyAdminが使える環境なのに どうしてもコマンドプロンプトで入力する必要があるのでしょうか？ とりあえず「コマンドプロンプト utf-8」あたりでググればいろいろヒットすると思いますが
`a-test` で試してみてください
マニュアルを読めば、最大何バイトまで入るかがわかります。 http://www.dbonline.jp/mysql/type/index6.html あとは、「あ」 1文字が何バイトかがわかれば計算できますね。 これは使用する文字コードによって子tkなりますが、UTF-8を 使うなら、「あ」1文字は3バイトです。 あとは技術者たるもの、自分で計算してください。
> SELECTの処理が何秒かかったとしても終わってから次のphpの処理にいっているんですか？ はい。待ってくれます。 ただ、所定の時間返ってこないとタイムアウトになり、失敗を返してから次の処理に行きます。 もっと具体的に言うと、同期APIだと待ちます。非同期APIだと待ちません。 いずれの場合でも、意図に反してMySQLが結果を返さないのを無視して実行を進めることはありません。 非同期APIの場合は例えばこんなコードになるみたいです。 http://www.php.net/manual/ja/mysqli.poll.php PDOからは非同期APIは使えないようですが。 http://php.net/manual/ja/mysqlinfo.api.choosing.php
>シェル状態ではどのようなコマンドになるのでしょうか？ sshで接続してから、そのまま mysqldump -u サーバー名 -p データベース名 > testdump.sql で、カレントディレクトリにtestdump.sqlが出力されるんじゃないですかね？
goup byが無いから。 SELECT 仕入テーブル.date_y, 仕入テーブル.date_m, 仕入テーブル.id_direct_cost, 勘定項目テーブル.name_cost, SUM(仕入テーブル.price) AS sumcost FROM 仕入テーブル NATURAL JOIN 勘定項目テーブル WHERE 仕入テーブル.date_y="'.$y.'" AND 仕入テーブル.date_m="'.$m.'" AND 仕入テーブル.typecost="direct" AND 仕入テーブル.id_direct_cost=勘定項目テーブル.id_cost group by 仕入テーブル.date_y, 仕入テーブル.date_m, 仕入テーブル.id_direct_cost, 勘定項目テーブル.name_cost では？
＞の構文は、mydb.sql（インポートのためのsqlファイル）内に そうですね、sqlファイルをテキストエディタで開いて データベース名の前に「IF NOT EXISTS」を書きこむことになります なおこのエラーが回避されても ・同じデータベース内に同じテーブル名がある ・同じテーブル内で同じユニークデータがある 場合もどうようのエラーがでると思います。 そもそもバックアップしたデータをリストアするのに別のマシンでやっているのでは ないのですか？ 同じマシンでやる限りデータを戻すときに競合するのは避けられませんね 思い切ってデータベースごと削除してしまった方が分かりやすいかもしれません。
-> という表示は、SQL文の入力中だということです。 SQL文は最後に ; を入力してEnterを押すと実行されますので、 ; を入力してEnterを押してください。 一行で入力するなら mysql> show databaces; としますが、SQL文は複数行に渡って入力することも可能ですので mysql> show 　　 -> databaces 　　 -> ; といった入力方法もできます。
\Qじゃなかったかな
なんとなくですがBのコミット完了前にAが読みに行ってませんか？ stateにはロックをかけるのに対しanswerにはかけていませんがその辺も確認したほうが良いかと思います。 Mysqlのリファレンスです。　ロック関連の問題 http://dev.mysql.com/doc/refman/5.1/ja/locking-issues.html これは検索でヒットしたブログですが参考になるかもしれません http://ikm.hatenablog.jp/entry/2012/12/10/192346
＞ PARAMETERS [ParaヘッダーID] COUNTER; 下記サイトを見た感じ、「COUNTER」が意味不明のような。 パラメータの型を指定するので、「Long」では。 http://office.microsoft.com/ja-jp/access-help/HP001032260.aspx?CTT=5&origin=HP001032250 http://msdn.microsoft.com/ja-jp/library/office/ff193793.aspx あと、クエリもちょいとおかしい感じがするので、まずはAccessのクエリ作成画面を使ったほうが学習しやすいと思います。
最近のバージョンならコレでいけるかと select (select A from テーブル where ID = TBL.ID1) A1 , (select A from テーブル where ID = TBL.ID2) A2 , A1＝A2の比較式 from ( select T1.ID as ID1, MAX(T2.ID) as ID2 from テーブル T1 LEFT JOIN テーブル T2 ON T1.ID > T2.ID group by T1.ID ) TBL ;
mysql の ALTER DATABASE や CREATE DATABASEにおける文字コード設定というのは、これから新規にtableを創るときに、table に文字コードを指定しなかったら、そのdatabaseに設定してあるdefault値を使うと言う意味ですので、既に作成済みのtable に対しては、何も作用を及ぼしません。 作成済みtable内の多バイト文字は、作成時の文字コードのままですので、そのつもりで、取り出さないとかえってプログラム側で文字化けすることになるでしょう。 show create table でcreate 文を表示してみると、table作成時に CHARACTER SETを付けて無くても、作成時のdatabaseに設定されていたCHARACTER SET 指定が追加されているはずです。 それから、iniファイルで変更するのは、サーバー本体のsystem 設定なので、これまた、databaseに対する設定とは別物です。 サーバ、データベース、テーブル、カラムの 4 段階で設定があります、マニュアル参照してください http://dev.mysql.com/doc/refman/5.1/ja/charset-syntax.html
こんにちわ。 RPMで導入すれば、基本的にmysqlユーザで立ち上がるはずです。 なお、RPMパッケージを導入するユーザと導入したパッケージの起動ユーザとは基本的に関係はないので、安心してください。 ＃コマンドラインから起動した場合は、起動されたプロセスのオーナーは起動時のユーザになりますが、MySQLのようにデーモンとして利用するプログラムの場合は、起動ユーザに関わらずプロセスのオーナーを設定することができるのが普通です。 ちなみに、MySQLの起動ユーザを決めるのは、デフォルトの状態だと/etc/my.cnfというMySQLの設定ファイルの中にある"user"という行になります。ここにmysqlが設定されていれば、プロセスのオーナーがmysqlユーザで起動するはずです。
変換をどこでどのように行ったのか不明ですが、 変換先の文字コードの指定を、「Shift_JIS」や「SJIS」でなく、 「sjis-win」、「SJIS-WIN」、「CP932」などに変えてみてはいかがでしょう。
MySQL にも COALESCE 関数は存在するので、使えます。 ただし、先の回答にも書きましたが、この方法でいけるのは、 『title カラムの先頭1文字目が漢字ではない場合、 　yomi カラムは null である 』 という条件が満たされるデータの場合だけ、ということに注意 してください。 質問者さんの案1も案2も、『先頭１文字目が ”漢字ではない”』 場合のデータがどうなるかが明示されていませんので、実際に 使用できるかどうか、私には直接判断できません。
ちゃんとした商売をしているお店のホームページなら、お金を払って専門の業者に作成を依頼しましょう。 個人情報を扱う事になるのでセキュリティ等々考慮すべき事が沢山あり、万が一事故が発生した時の責任の問題もあるので、安易に手を出さない方がいいと思います。
EXISTS句を使っても書けますね。 http://dev.mysql.com/doc/refman/5.1/ja/exists-and-not-exists-subqueries.html DELETE FROM t2 WHERE NOT EXISTS(SELECT * FROM t1 WHERE t2.num = t1.num); 2行目は t2.num = t1.num となる t1 の行が存在しなかったら、という条件を表しています。
mysql の場合、auto_increment 属性を付けたら、何らかのindexも設定しないとエラーになるので、create table 出来てるのなら、primary key とか付けているのでは？phpmyadmin で作成したのなら自動付加してくれてるのでしょう。 index必要性について マニュアル参照 http://dev.mysql.com/doc/refman/5.1/ja/create-table.html コマンドラインクライアントでチェックするなら、show構文で show create table `tbl_name`;
>$sql = 'SELECT * FROM anketo WHERE code='.$code; ダイレクトに$codeをクエリに書きこんでしまってはプリペアド処理になってない 何を参考にしているかわからないけど、その参考文献をもう一度よく 読みなおした方がよいと思います
> >MySQLに直接接続すること > http://localhost/phpmyadmin/で > phpmyadminを呼び出すことでしょうか？ 違います。 まあ、phpMyAdminが正常に動作してれば問題はありません。 MySQLは別にPHPにもApacheにも依存しているわけではないので、 mysql -u root -p などというコマンドを実行することでコマンドライン上で直接 操作できます。 http://y-kit.jp/saba/xp/mysqltry2.htm そこでログインできないならば、MySQLが稼働していないorユーザー名、 パスワードに誤りがあるなどとなります。 > >初めてPHP(Wordpress)の設定を確認し > phpmyadminで確認が取れるものでしょうか？ phpMyAdminが正常に動作しているならばOKです。 当然、事前にWordpress用のデータベースも作成するでしょう。 >MySQLに接続できるか > phpmyadminから接続するための方法を記した > 参考サイトなどございますでしょうか？ そもそもお使いのOSが何だか分かりません。 調べればたくさん出てきますので、自分に近い環境のものを 参考にすれば良いと思います。 https://www.google.co.jp/search?num=20&hl=ja&safe=active&site=&source=hp&q=phpmyadmin+%E8%A8%AD%E5%AE%9A&oq=phpmyadmin+&gs_l=hp.3.0.0l10.113.1277.0.2119.11.7.0.4.4.0.143.674.5j2.7.0...0.0...1c.1.7.hp.zFdTjZ2Lq6M 順序としては以下のようになります。 １．MySQLは正しく稼働、およびログイン可能か。 ２．phpMyAdminで正しくログイン可能か。（本来不要ですが、phpMyAdminを動作させたいみたいなので） ３．Wordpress用のデータベース、ユーザーは存在するか、及び、そのアクセス権限は適切か。 ４．Wordpressのデータベース接続情報は適切か。（wp-config.php） この辺は、グラフィカルに説明していて分かりやすいかもしれません。 http://www.adminweb.jp/wordpress/install/
phpmyadminデータベースを削除したのであればシステムにかかわる部分が ダメになっている可能性が高いです。 修復の方法はないことはないですが、始めたばかりであればxammpの 再インストールした方がはやいかもしれません
やはり先の回答で書いておくべきだったかもしれませんが、 質問にある例では各ユーザーが別々のレコードに書き込みをしていますよね。 この場合だとお互いの書き込みが他のユーザーの書き込みに影響を及ぼさないのでロックを取る必要が無いと思います。あと、ちょっと気になったので調べた感じだと、UPDATEで更新する場合もロックは不要みたいですね。 > 何も指定しないで下記の方法でテーブルをつくりました > この場合は、MyISAMになるんですか？ そうです。 InnoDBを使うにはテーブル作成時に明示する必要があります。 http://dev.mysql.com/doc/refman/4.1/ja/using-innodb-tables.html > その場合、自動でテーブルロックしてくれるってことでしょうか？ してくれません。 自分で明示的にテーブルをロック / アンロックしてください。 http://dev.mysql.com/doc/refman/4.1/ja/lock-tables.html あと、MyISAMはトランザクションセーフテーブルではないので、いわゆるトランザクションには使えないと思います。トランザクションの場合はCOMMITをするまで値が反映されてはいけませんので。 http://dev.mysql.com/doc/refman/4.1/ja/commit.html http://dev.mysql.com/doc/refman/4.1/ja/table-types.html > みなさんはphpやperlからmysqlを使う場合は、どのテーブルを使っていますか？InnoDBを使うのが一般的なのでしょうか？ MyISAMが一般的だと思いますが、適材適所ではないでしょうか。 例えばwordpress (http://ja.wordpress.org/) ではデフォルトのMyISAMを使っているようです。 自分が見た範囲では特にLOCK TABLESも登場しないように思います。 UPDATEは時々出てきますが、UPDATEによる更新はアトミックな処理になるようなので行の更新をする程度ならロックを取る必要はないのかもしれません。 http://dev.mysql.com/doc/refman/5.1/ja/ansi-diff-transactions.html かつてMySQLを選ぶ理由はトランザクションがない代わりに速いということだったので、色々と工夫をしてMyISAMを使うというのが普通なのかもしれません。しかしながら、MyISAMにはトランザクションの機能がないので、InnoDBを普通は選ぶべきという意見もあります。 Top 10 MySQL Mistakes Made By PHP Developers http://www.sitepoint.com/mysql-mistakes-php-developers/ | 1. Using MyISAM rather than InnoDB ただ、この記事へのコメントでDavidさん他多数がMyISAMよりInnoDBは非常に遅くて使いものにならないし、DBの設計を適切にすればMyISAMでも問題なく使えると主張しているので、InnoDBを使えば万事解決というわけでもないようです。
php.iniの設定やhtml側での文字コードの設定にも依存するので、これだけの情報ではズバリ回答が難しいですが、 MySQLの文字コード設定がcp932とutf8が混在しているようですね。 文字化けを防ぐために、webシステムは「統一された文字コード」で開発される事が多く、 最近ではUTF-8が主流ですのですべてUTF-8で統一されることをおすすめします。 MySQL、php、HTMLがすべてUTF-8であれば、ほとんど文字化けに悩まされることはなくなると思います。
>■内容を再編集する時、htmlタグを無効化しつつ、再編集する方法 PHPで編集するというからにはhtml画面上で処理をすると考えてよいですね？ であればtextareaにhtmlspeacialcharsで処理した文字列を入れて 編集させるのが一般的でしょう。 >■データベース登録時、プリペアドステートメントで、\（円マーク）がついてしまう事の対処方法 SJISの5C問題あたりを気にしているのでしょうか？ もし万が一DBのキャラクターセットをSJIS系にしようと考えているなら やめた方がいいでしょう。 UTF8なり適切な文字コードを利用して、入出力の際に文字コードの コンバートをかけることで問題は最小化することができます。 また見た目上エスケープした文字が登録されても、PHPで抽出して出力するときには アンエスケープされた状態で取り出せるとおもいます
プログラムの書き方からすると言語はPHPでしょうか。 プリペアドステートメントを使っていれば、ドライバーの方でエスケープ処理やクォートで囲む処理を行ってくれるのでSQLインジェクション対策になります。
>INTで（６）としても >試しに１０桁を入れても（phpmyadminで直接） >入ってしまいます。 INTの桁数はUNSIGNED ZEROFILL属性をつけた際にゼロ埋めするための桁数です。 >試しにと思ってINTのところに >”あいうえお”を入れても入ってしまいます。 それはない、勘違いでしょう。 >桁数の設定は（10）までは意味があっても、(11)以上に >しても意味がないのでしょうか？ 前述の通り有効桁数ではなく表記上の桁数なので、 よほど特殊な使い方を想定していなければ気にする必要はありません。 >INT（１１）に上限数値の4294967295をいれると >何が起こるのですか？ 普通に入力される以外なにもおきません。 そういうのはご自身でためしてみるが一番です ◇最後にもうひとつ >Name` varchar(32) NOT NULL default '', >NOT　NULLとは、ヌル値は認めないというのに、 >defaultは””（ヌル）で設定ができてしまう。って >矛盾してませんか？それとも私の解釈が間違っていますか？ 基本を理解していないようで、完全に間違っていますね。 実際「」とNULLは排他的な関係ではなく必要に応じて共存できます。 具体的にはNULL指定すると「空ですよ」いう情報が入ります。「」は文字の長さが0の文字情報が入ります。 LENGTHで長さを拾う時LENGTH(NULL)はNULLを返しLENGHT('')は0を返します。 カウントを取る時に、「」はカウントの対象となりますがNULLはカウントの対象外です。 たとえばあるテーブルのXというカラムに10個のデータが保持されているとき NULLのレコードが3件あれば、SELECT COUTN(X) FROM テーブルすると 7件しかレコードが拾えません。 また、NULLへのアクセスはIS NULLなどで評価を行うなど NULLというのは特徴のある属性ですので、きちんと理解を深める 必要があります。
同じ表を2回結合する場合は、別名を付ければ良いです。 例) SELECT 表1.商品CD, 商品名, カラーCD, カラー.名称, サイズCD, サイズ.名称 FROM 表1 LEFT OUTER JOIN 表2 USING(商品CD) LEFT OUTER JOIN 表3 カラー ON(表1.カラーCD = カラー.CD) LEFT OUTER JOIN 表3 サイズ ON(表1.サイズCD = サイズ.CD) ORDER BY 商品CD DESC;
正規化は目的ではなく手段です。 何をしたいかビジョンがないなら、正規化しないで冗長なデータでも さほど問題はありません。 たとえば管理画面をつくったとして、セレクトボックスで選ばせたい項目が あるなら正規化するしたほうがよいです
＞(1)で動いていたものを(2)にしたら、動かなくなりました そういうのはprint $sqlしてみて見比べればわかりますよね？ '%s' のところにシングルクォーテーション付きの文字列を入れれば クォーテーションがダブってます。 あまりお勧めできませんが、あえてやるなら元文字列のシングルクォーテーションを はずしてみればよいのでは？ $sql = sprintf("SELECT id , password FROM `adminDatabase` where id = %s and password = %s order by id",$id , $password );
非数字の部分の文字数が決まっていれば可能です。 SELECT * FROM ～ WHERE SUBSTRING(書籍名,1,4), SUBSTRING(書籍名,5)*1 SUBSTRING(書籍名,5)*1 は書籍名の5文字目以降を 数値化する表現です。但し、非数字があると0になって しまいます。 書籍名の先頭の非数字部分の文字数が不定だと、 考えられる字数の範囲でUNIONクエリにするしか ないと思います。
まずmysql_real_escape_string自体がmysql系の古い関数なので非推奨です。 独学で学習されているのでしたら、参考にしている書籍やサイトを新しいものに変えてください。 最低でもmysqli系の処理に置き換えてください。 また$idや$passwordなど管理側が仕様を指定できるものは ・m文字以上でn文字以下であること ・構成文字が英数字のみに限られること などをチェックして、そうでない場合はエラーを返すような仕様にしておけば あえてエスケープする必要はありません 任意の文字列を利用して検索をかけたりするような場合はPDOを利用し、 プリペアドステートメントで処理するのが妥当だといわれています。
MySQLはデータベース機能を提供してくれるソフトウェアです。 データを追加・削除・検索する機能を提供してくれます。 SQLというデータベースを操作する共通の言語を使ってデータ操作をすることができます。 MySQLがインストールされていて、正常に動作している分には「通常はあまり意識する事がない存在」でもいいですが、PHPのプログラム内では意識してMySQLを利用するようなプログラムにしないと利用できません。 「mysqlが非推奨？？」については、MySQLというデータベースにアクセスしてデータの操作をするための方法が何通りか用意されている内MySQL関数と呼ばれているモノは将来PHPの機能から削除される予定なので、今後新たにプログラムを作る場合は mysqli や PDO_MySQL を使ってMySQLデータベースにアクセスしてデータの操作をするようにしてくださいという事です。 MySQLというデータベースソフトとPHPのMySQLという関数が同名のため分かりにくいのだと思います。 mysqli や PDO_MySQL を使用する場合はPHPのインストール時に設定が必要ですが、MySQLが使えるレンタルサーバなら予めインストールされている可能性が高いので、PHPにどのような拡張機能がインストールされているか確認するといいでしょう。（phpinfo() を使えば確認できます） 「これからどういう順序で何を勉強したら良い」については、PHPとDBと言う事であればどちらが先と言うよりセットで使うことになると思うので、両方合わせて勉強していくといいのではないでしょうか。 PHPの入門書だと両方合わせて解説しているモノが多いので、そういった本を読まれるといいでしょう。
> 日本語に訳したら、何て言うのでしょうか。 > （「ウィキシンタックス」でいいのでしょうか。） syntaxの日本語訳が次のとおりですから， http://eow.alc.co.jp/search?q=syntax Wikiの構文，もう少し具体的に言うならば，Wikiのマークアップ書式，と言えばよいでしょう。 > ウィキシンタックスとは、何ですか。 Wikiの構文例については次のリンク先の「3 ウィキの文書マークアップ構文」を参照。 http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A3%E3%82%AD Wikipediaの拡張構文例については次のリンクを参照。 http://ja.wikipedia.org/wiki/Help:%E6%97%A9%E8%A6%8B%E8%A1%A8
数百万個のファイルを同一階層にいれるとそのディレクトリに移動すると重くなりそうですね 分割するのが良いと思います 連番ならそんな感じのディレクトリつくればOK 0001_1000 (1番から１０００番まで格納） 1001_2000 (1001番から２０００番まで格納) といった具合に
SELECT Rows LIMIT 1001,2000; LIMIT [offset,] row_count;
取りだすDBと入れるDBのバージョンは完全に一致していますか？ 一致しているとしてexport_utf8.sqlをテキストエディタでみてみて クエリがおかしくないですか？
とりあえず、解決はしているようですので、補足で書かれていた疑問について ■疑問1 ・ダミーと言うのは一般的な(よく利用する)手法でしょうか？ →普通に使います。 　ただし、Nullなどダミーを使わないほうのSelectで取得できない値にするのが普通です。 ■疑問2 ・SELECTする際、存在しないカラム名を文字列で指定すると「Unknown column」エラーになるのに、数字だとなぜエラーにならないのでしょうか？ →固定の値と判断しているからです。 　他に、固定の値を返す関数（例えば現在日時とか）やNullでもエラーにはなりません。 ■疑問3 …ダミーでSELECTする際の「ダミー指定方法」 ・「影響が少ないだろうと思われる存在カラム」を指定した方が良い？ それとも、-1などの存在しないカラム(？)を指定した方が良い？ もしくは気にする必要はない？ →上記参照。 なお、以下のselectを実行してみるとより理解できるかも。 select 'A' as AText, 2 as BNumber from table1 table1の件数分、A 2 と出てきます。 select 'A' as AText, 2 as BNumber from table1 union select 'C' as AText, 4 as BNumber from table1 とするとtable1の件数分、A 2 とC 4が出てきます。（２倍の件数でるはずです。）
データベースはExcelの表などと違って「二つの同じ形式の表の同じ位置にある値同士を足す」ようなことはできません。 ですから、table1の各レコードとtable2の各レコードを紐付けるための列が必要になります。 例えば以下のように「no」という列を追加します。 table1 -------------------- col1|col2|col3|no 20 |30 |40 | 1 40 |40 |50 | 2 10 |20 |20 | 3 -------------------- table2 -------------------- col1|col2|col3|no 10 |10 |20 | 1 20 |20 |20 | 2 10 |20 |20 | 3 -------------------- として SELECT table1.col1 + table2.col1, table1.col2 + table2.col2, table1.col3 + table2.col3 FROM table1 INNER JOIN table2 ON table1.no = table2.no ORDER BY table1.no; とすれば一応は可能かと思いますが、これはtable1とtable2のレコード数が同じで、かつnoが必ず一対一で対応している場合でないと期待通りの結果を返してくれません。 実際には ・table1とtable2でレコード件数が違う ・noがtable1とtable2で一対一で対応していない などの場合はさらに工夫が要りますが、どういう結果を返したいかによってやり方は変わってくるので、とりあえずはここまでで。
taisenに対してteamを２回joinしてやればよいのでは？ select taisen.hometeam ,t1.team_name as hometeam_name ,taisen.homepoint ,taisen.awayteam ,t2.team_name as awayteam_name ,taisen.awaypoint ,t1.year ,t1.leagueid from taisen left join team as t1 on t1.team_id=taisen.hometeam left join team as t2 on t2.team_id=taisen.awayteam ちなみにyearとleagueidはホームチームもしくはアウェイチームのどちらかの ものを拾うしかありません。 若干正規化の仕方がおかしいですね。
DB名入れないとダメですよ。 select * from DB1.table1,DB2.table2 where DB1.table1.id = DB2.table2.id これだけでうまくいくかはわかりませんが。
<?php print date("Y-m-d"); ?> そもそもSQLでCURDATEを指定するならformからデータをおくる必要ないです
Aテーブルが更新された場合に実行されるTRIGGERを作れば可能です。
order by binary coalesce(yomi,title) です。
それほど詳しくない上にMyISAMのデータベースが無く実験も出来ませんが知ったかで回答します。 AND unixtime BETWEEN UNIX_TIMESTAMP(NOW()) AND 1360850220; で現在から1360850220の間のunixtimeにマッチすると思います。
スクリプトは不要でした。 mysqlimport単体で複数ファイルを一括インポートできるようです。 例えばtkhgshデータベースのtestテーブルにインサートするとします。 ファイル名を data1_1.csv、data1_2.csv、data1_3.csv、data2_1.csv から test.data1_1.csv、test.data1_2.csv、test.data1_3.csv、test.data2_1.csv などとインサートするテーブル名に変えてください。 mysqlimport -L tkhgsh /path/to/test.* これで一括インポートできます。スクリプトは不要でした。 mysqlの権限やcsvファイルのパーミッションに気を付けてください。 他、オプションやcsvファイルの仕様などはマニュアル見てください。 http://dev.mysql.com/doc/refman/5.1/ja/mysqlimport.html http://dev.mysql.com/doc/refman/5.1/ja/load-data.html ------------ 自分が言ったスクリプトというのは、 #!/bin/sh files="/path/to/csv/*" for file in ${files} do mysqlimport database ${file} done で、1ファイルずつmysqlimportすることを考えていました。 これとは別に、最初にファイルをまとめて巨大なファイルを作ってインポートでも可能ですね。 $ cat /path/to/csv/* >test.csv $ mysqlimport database test.csv また、回答2、3の人のはcsvをインポートではなく、 csvをinsert文に変えてmysqlに突っ込む方法ですね。 $ mysql database <test.sql でtest.sqlに書かれたsql文をdatabaseに対して発行できます。 csvの中が A 1 A 2 b 3 などとなっていれば、例えば insert into test values('A', 1); insert into test values('A', 2); insert into test values('B', 3); などと変えてやり、それで上記の$ mysql database <test.sql でインサートできます。 やり方様々、あります。 mysql、linux、シェルスクリプトの基本の基本から学びなおしてください。 windows環境ならばシェルスクリプトではなくコマンドプロンプトですね。がんばってください。
>まだ試合をおこなっていないチームもランク付けしたいのですが、 ではまず、teamテーブルの、2012年1リーグEチームを登録します insert into team values(13,'E',2012,1); //v1を作り直します。（すでにある場合は削除してください） create view v1 as select id,hometeam as team_id ,case when homepoint>awaypoint then 3 when homepoint = awaypoint then 1 else 0 end as wp ,if(homepoint>awaypoint,1,0) as w ,if(homepoint=awaypoint,1,0) as d ,if(homepoint<awaypoint,1,0) as l ,homepoint as tokuten ,awaypoint as sitten ,team_name,year ,leagueid from taisen inner join team on team.team_id=hometeam union all select id,awayteam as team_id ,case when homepoint<awaypoint then 3 when homepoint = awaypoint then 1 else 0 end ,if(homepoint<awaypoint,1,0) ,if(homepoint=awaypoint,1,0) ,if(homepoint>awaypoint,1,0) ,awaypoint ,homepoint ,team_name,year ,leagueid from taisen inner join team on team.team_id=awayteam union all select null,team_id,0,0,0,0,0,0,team_name,year,leagueid from team left join taisen on taisen.hometeam=team.team_id or taisen.awayteam=team.team_id where taisen.id is null //v2を少しいじります。（すでにあるものは削除） create view v2 as select team_id,year,leagueid,team_name ,sum(wp) as wp ,count(id) as count ,sum(w) as w ,sum(d) as d ,sum(l) as l ,sum(tokuten) as tokuten ,sum(sitten) as sitten ,sum(tokuten) - sum(sitten) as tokusitten from v1 group by team_id,year,leagueid; //この状態で、前回のSQLを走らせます select year,leagueid, (select count(*)+1 from v2 as v2b where 1 and v2a.year=v2b.year and v2a.leagueid=v2b.leagueid and (0 or v2a.wp<v2b.wp or v2a.wp=v2b.wp and v2a.w<v2b.w or v2a.wp=v2b.wp and v2a.w=v2b.w and v2a.tokuten<v2b.tokuten or v2a.wp=v2b.wp and v2a.w=v2b.w and v2a.tokuten=v2b.tokuten and v2a.tokusitten<v2b.tokusitten ) ) as rank,team_id,team_name ,wp,count,w,d,l,tokuten,sitten,tokusitten from v2 as v2a order by year,leagueid,rank; ※2012年1リーグの5位にチームEが表示されます
ルート権限があれば設定することで可能になりますが、レンタルサーバー（ロリポップ）では不可能です。 2つのドメインがたまたま物理的に同じサーバーであれば可能な場合もあるかもしれませんが、他人にデータベースを操作されてしまう危険があるので、それはそれで、大問題です。
group by 句に無いカラムがどう選択されるかは既にご回答の有るとおり。 要は見つけた順なのだが、indexのアルゴリズムや、挿入削除で物理配置が変わるので、不定となる。 あと、mysql には、集約関数にランダムに取り出す物はないので、サブクエリか、テンポラリーテーブルが必要。mysql 4.1 以降なら、サブクエリでいけそう。最適化も考慮すると以下かな？最後の order by null で既に並んでる物を再度並べ替え作業しないようにして、少々時間短縮。 select id,Type, age from (select id,Type, age from tb order by id,Type, rand() ) as rand_tbl group by id,Type order by null ;
これでいかがでしょうか。 SELECT id FROM ( SELECT min( id ) as id , field1 , field2 FROM tables GROUP BY field1 , field2 ORDER BY id ) AS result みればわかるかと思いますがminをmaxにすれば同一項目内の最大のIDで持ってきます。
WHERE `u_usr_id` IN('1001','1004','1005') です。
ANo.1です。 >基幹ＤＢに顧客などのマスタテーブルや売上などのトランテーブルの数が約800あり、これらのデータを>毎日ＤＷＨ用のＤＢへ差分更新します。 マスタは無視して、売上などのトランテーブルがいくつあるのでしょうか？ これが数百あるなら分けたほうがいいというのが、前の回答の趣旨。 「ｘｘ別売上テーブルみたいな中間ワークテーブル」といっていたのが、 「ＤＷＨ側のＤＢにビューを約500作成し」に相当します。 500も必要でしょうか？ （ついついいくつも作ってしまうのがビューだったりします。） 例えば、課別月別売上ビューと部別月別売上ビューを別々に作ってしまったりとか。 （課別月別売上ビューがあれば部別月別に売上リストを出すのは結構早い。） 昔やった仕事で、縦軸、横軸の組み合わせ１５０個程の検索を、１２個の中間ワークファイル （ビューと思ってください）で実現したことがあります。 ・・・ビューは、出力が遅ければ追加するという考え方で作っていくのも有りと思っています。 （もちろん、1伝票毎のトランザクションから出力させると遅いにきまっていますので、 　最も細かい単位でのビューは作る前提のほうがいいですが。） 「ドクタサム」がよくわからないのであまりアドバイスはできないのですが、 ビューといっているけど実データを別に格納していて毎日更新する必要があるという前提と 考えられますので、効率よく更新する方法はあると思われます。 例えば、日別取引先別売上ビューがあるなら、月別課別売上ビューは、元データから更新する のではなく、日別取引先別売上ビューから更新するとか（前提として１取引先１課とする）。 あと、差分更新は、ちょくちょく、値があわなくなることがあります。 （あってはいけないのですが、バグやsqlを直接実行して削除したため、マイナスデータが 作れなかったとかいったイリーガルなオペレーションからおきることがあるので。） 例えば当月分を月末に全件再計算するとかしたほうが安全です。 毎日当月分を再計算するってほうがベターとは思いますが、処理時間とのバーターです。 >本来、基幹で作成しなければならなかった帳票などもＤＷＨから出るようにしたいため プルーフリストとか入力内容を確認する帳票は、基幹で出すようにしてください。 基幹で正しいデータにしてからデータを受け取らないと、取り消しデータとか山のように データを受け渡ししなければいけないことになります。 ## ま、お分かりと思いますので余計なお世話なんですが。 ## とりあえず、こんなところで。 ## 後は個別にどんなデータとどんなビューがあって・・・ ## と１件ずつ掘り下げていく必要があるのですが、 ## ＱＡサイトではそれもなかなか難しそうですね。
＞DELETE FROM `__TABLE__` WHERE `user_id` = 1234 LIMIT 1 user_idがユニーク属性なカラムならLIMITはいりません 逆にユニークではないならLIMITによる抽出はレコードを特定できません。 LIMITは最初に出現する1つですが、ORDER BYしない場合は出現順は保証されないからです。 単体で運用しているならともかくレプリケーションを前提とするなら 更新や削除は厳密にデータを特定できる指定をしてください
DBサーバとWebサーバの性能次第と言うところでしょうか。 あとは、負荷が上がってきた時にDBサーバを負荷分散させた方が楽なのか、Webサーバを負荷分散させた方が楽なのかといった事も絡んできます。 全体の構成や負荷が上がってきた時の拡張計画（予算）等々を考えて、設計していくしかないでしょう。 一昔前ならPHP自体の処理が遅かったのでSQL重視と言ったかもしれませんね。 でも、最近のバージョンならアクセラレータを使えば遅いなんて事はないし、サーバ自体が安くなってきたのでちょっといいCPUにたくさんメモリを積んでおけば処理速度は気になりません。
SQLの結果が既に重複しているのか、その後の処理で重複させてしまったのか、 どこで重複したかを調べてみましょう。 「[(1)]物件を記載する処理」の前後と、「１ユーザー分のメールを送る処理」の前後、 var_dumpで該当の変数や配列がどういう値になっているか見てみましょう。
ぱっと思いつくのは where hurigana like "あ%" でも、性能を気にするならばあまりこれはよくないでしょう。 > 単純に「あ」、「か」、「さ」・・・と選択して蓄積しても良いのですが > これは、頭文字用のカラムを作るということでしょうか。 でしたら、それが良いと思いますよ。 プログラムでの登録時の処理や該当テーブルの構成を変えたくないのであれば、 頭文字用のテーブルを作るのはどうでしょう。 triggerと文字列関数のleftを使えば、フリガナから頭1文字をとって頭文字テーブルに データ登録することはmysqlだけでできます。 (マルチバイトのためleftよりsubstringの方が良いかもしれません)
あ、よくよく考えたらこの程度ならピボットしなくてもかけますね ピボットの場合もう少し複雑な集計をとるとき便利です。 もちろん今回のケースでも活用できます //例 select bang ,max(if(tuki=4,name,null)) as 4月 ,max(if(tuki=5,name,null)) as 5月 ,max(if(tuki=6,name,null)) as 6月 from tb as t group by bang order by bang; //ちなみに2名以上いるときの列記 select bang ,group_concat(if(tuki=4,name,null)) as 4月 ,group_concat(if(tuki=5,name,null)) as 5月 ,group_concat(if(tuki=6,name,null)) as 6月 from tb as t group by bang order by bang; //各bangに月ごと何人いるかカウントする select bang ,sum(tuki=4) as 4月 ,sum(tuki=5) as 5月 ,sum(tuki=6) as 6月 from tb as t group by bang order by bang;
likeの方は、それぞれにカラム名も必要ですよ。 (`urlpath` not like '%/officeedit/%') and (`urlpath` not like '%/houseedit/%') 括弧は省略出来るけど、between の and とは違うので。 regexp は正規表現なので、検索が遅くなることが多いようです。like も前方一致でないなら、indexは使われないので、やはり、速くはならない。よって、どっちがいいかはデータ量や複雑なパターンマッチが必要かどうか（likeは単純文字列マッチなので）によるのでは。
こんな感じですか？ select cast.name,cast.age,photo.url,schedule.starttime,schedule.finishtime from cast left join photo on cast.name=photo.name and photo.order=0 left join schedule on cast.name=schedule.name and schedule.workdate='2013-02-05' なお、カラムにcastやorderといった予約語をいれると思わぬ落とし穴があったりするので 気をつけてください
とりあえずマニュアルに固定長の制限があると書いていますね memoryエンジンを使う限り仕様なのでメモリを増やすか あきらめるしかなさそうです。 http://dev.mysql.com/doc/refman/5.1/ja/memory-storage-engine.html
＞$rst = mysql_query($sql, $con); おそらく参考にされている書籍やサイトが古いですね すでにmysql_query()は非推奨になっていますので いまはmysqli系の処理か、PDOを利用した処理が正しいです。 環境を見直したほうがよいかと思います。
これって合計じゃなくて単にcount処理をフラグやグレードを指定して取っているだけですね。 //準備 create table A (id int,flag tinyint); create table B (id int,grade tinyint); create table C (id int,val int); insert into A values(1,0),(2,1),(3,0),(4,1),(5,1),(6,0),(7,0); insert into B values(1,0),(2,0),(3,2),(4,2),(5,0),(6,0),(7,0); insert into C values(1,10),(2,20),(3,30),(4,40),(5,50),(6,60),(7,70); //非効率SQL SELECT num_a, num_b FROM (SELECT SUM(IF(flag=0, 1, 0)) AS num_a FROM A WHERE id=ANY(SELECT id FROM C WHERE val<=50)) AS sub_a, (SELECT SUM(IF(grade=2, 1, 0)) AS num_b FROM B WHERE id=ANY(SELECT id FROM C WHERE val<=50)) AS sub_b //調整後 SELECT count(flag) as num_a,count(grade) as num_b FROM C LEFT JOIN A on C.id=A.id and flag=0 LEFT JOIN B on C.id=B.id and grade=2 WHERE val<=50;
こんにちは。 テーブル名.カラム名です。 同じSQL内でテーブルが複数ある場合にどちらのCustomerIdか判断がつかないので Customers.CustomerIdとすればCustomersテーブルのCustomerIdとなります。 select a.*,b.* from Customers a,Reservations b; こうすると a.CustomerId = b.CustomerId と表現できます。 (Customers.CustomerId=Reservations.CustomerIdと同義) こちらはエイリアスなんて呼び方があります。
>たとえば、SELECT * from A WHERE B=変数 SELECT * from A WHERE B='/*[VARIABLE]*/' をブックマークしておいてください
＞CPU使用率は40%ほどしかなく、メモリも余裕があるのに、IOだけが完全に溢れております。 となるとたんにファイルI/Oのボトルネックでしょうか・・・ 遅延書き込みがうまく機能していないだけならバッファリングの調整で 少しは改善されるかもしれません。 ただ、結局書き込みがおいつかないなら、本質的にはハードウェアで処理するしかなく、 SSDやらでデータ管理しないと解決しないかもしれませんね。 検証については以下サイトなど参考になるとおもいますので、 諸々の変数を調整してみてはいかがでしょうか？ http://blog.layer8.sh/ja/2011/12/23/mysql%E3%82%92%E9%AB%98%E9%80%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84%E3%81%A8%E3%81%8D%E3%81%AE%E3%83%81%E3%83%A5%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0/ また、MySQLのレイヤーによる負荷を軽減するためにHandlerSocketというプラグインも あるようなので、場合によってはチャレンジしてみてもよいかもしれません。 （個人的には興味があるのですが未検証なので自己責任でお願いします） http://engineer.dena.jp/2010/08/handlersocket-plugin-for-mysql.html
DB＜A＞とDB＜B＞それぞれのコネクションを作ればいいだけです。 2つのDBに同時に接続させておく事は可能です。
4人以上を3人に絞り込むのは適当でいいとのことですので 投票数が同じ場合はユーザーのidが小さいものを上位とします 性質上一度集計をするためにviewをつくっておくとよいでしょう。 //テーブルをつくり create table vote (cID int,iID int,cTime datetime,unique(cID,iID,CTime)); //ビューをつくります create view v_vote as select cID,iID,count(*) as count from vote group by cID,iID; //ダミーデータをいれます insert ignore into vote values (1,1,'2013-01-01 00:00:00'),(1,1,'2013-01-01 00:00:01'),(1,1,'2013-01-01 00:00:02'),(1,1,'2013-01-01 00:00:03'),(1,1,'2013-01-01 00:00:04'),(1,1,'2013-01-01 00:00:05'),(1,2,'2013-01-01 00:00:06'),(1,2,'2013-01-01 00:00:07'),(1,2,'2013-01-01 00:00:08'),(1,3,'2013-01-01 00:00:09'),(1,3,'2013-01-01 00:00:10'),(1,4,'2013-01-01 00:00:11'),(1,4,'2013-01-01 00:00:12'),(1,4,'2013-01-01 00:00:13'),(2,1,'2013-01-01 00:00:14'),(2,2,'2013-01-01 00:00:15'),(2,3,'2013-01-01 00:00:16'),(2,4,'2013-01-01 00:00:17'),(2,5,'2013-01-01 00:00:18'),(2,1,'2013-01-01 00:00:19'),(3,2,'2013-01-01 00:00:20'); //まずビューを確認します select * from v_vote; //カテゴリごとにカウントの多い人順 select( select count(*) +1 from v_vote AS v2 where ( v1.count=v2.count and v1.iID>v2.iID or v1.count<v2.count ) and v1.cID=v2.cID ) AS rank ,cID,iID,count from v_vote AS v1 having rank<=3 order by cID asc,rank asc;
>Listenで設定とはどういうことですか？ Listen 80 なんて行はないですか？ apacheの2.x辺りではPortではなくListenで設定する。 というように変更されているっぽいですけど。 http://blog.sarabande.jp/post/32488898943 によると、/etc/httpd/conf.d/以下ではないようですがSSL設定用のファイルは別にある…みたいですね。 # httpd関係のファイルは/etc/apache2の下…なんですかねぇ……。 >提示されたページは教授から提示されたので、よくわかりません。 であれば…その教授にも確認してみるべきでしょう。 # 授業料払っているんですし。 # ここみたいな何の責任も負ってくれない回答者からの回答よりはマシかと思われます。
>「お魚くん」を「焼き魚くん」 であれば、REPLACEを使うとよいかと UPDATE wp_postmeta SET meta_value=REPLACE(meta_value,'お魚','焼き魚') WHERE meta_key LIKE '%koubutsu%'; ただし絞り込みを入れた方が効率的かもしれないのでこっちの方がよいかも UPDATE wp_postmeta SET meta_value=REPLACE(meta_value,'お魚','焼き魚') WHERE meta_value LIKE '%お魚%' AND meta_key LIKE '%koubutsu%';
できるような表記はないですね エンジンの特性のようですしあきらめた方がよいかもしれません。 むしろなぜ行ロックの必要があるのでしょうか？ http://dev.mysql.com/doc/refman/5.1/ja/internal-locking.html
バージョンが書いていないのでなんともいえませんが 「MySQL character set」でググってみてください
そもそもキャッシュも含めてSQLの性能かと思います、むしろキャッシュのない SQLなんて実際の運用とかけ離れていて計測の意味がないかと。 どうしてもキャッシュをはずしたいならSQL実行前に MySQLのサービスを再起動してしてみるとよいでしょう また」キャッシュも含めて良いなら、数回～数十回SQLを走らせて 平均をとるなどで実際の運用速度を計測するのが妥当です >SQLが短時間に大量に どんなタスクでも大量に処理すれば負荷があがるのはどうしようもないかと とはいえ、よく使われる集計項目にあわせた中間テーブルをつくっておけば むだな集計が省くことができたりします たとえば特定の粗データを日次データや月次データに集計すれば 効率としては何十～何百分の一にすることもできます。
なんの場合でもそうですが旧コンピュータ名でアクセスしていた サービスがあるなら、接続できなくなります MySQLサーバー自体は、自サーバー名を参照するケースはあまりなく localhostなどで参照するのでほとんどの場合問題ないとおもいます
>Tomcat内のcommon\lib内にmysql-connector-java-5.1.22-binを導入し、環境変数でパスを通しています。 Tomcat内に入れれば、Tomcat上で実行されるプログラムからは認識されますが、Eclipseからは認識されません。EclipseはTomcat上で動いていませんから。またPathを設定してもJavaのクラスパスとして認識されていなければJava内からは利用できません。 Tomcat内ではなく、Eclipseが使用しているJDKのlib内にドライバのJarを入れてやればEclipseでも利用できるはずです。 JDKのフォルダ\jre\lib\ext　←　ここです。
物件データ登録時に数字項目に何も入力されなければ「NULL」、0を入力されている場合には「0」 本来の意図としては正しいはずです。 Nullは本来、どの値を入れればいいのかわからない値ということなので、 数字がわからない＝何も入力していない　ということで、Nullを指定するのは正しいはずです。 しかし、 実際に使うときには、Nullは実に不自由なので、 Nullは使うなという話がでてきます。 ## 私なら、入力区分 0=未入力、1=入力　と　数値（未入力は０）と別々に持つかもしれません。 というのは例えば、 金額 100万以上の物件は何件？ というSQLに対して、100件と答えがでて、 金額 100万未満の物件は何件？ というSQLに対して、50件と答えがでたとします。 じゃあ、全物件は？・・・172件だったりします。 何故？⇒Nullが22件だったためです。 （Nullは0とは違い、どちらの検索条件にも含まれません。） ・・・この不自由さを回避するために数値項目に、Not Null制約をつけることが多いです。
元のテーブルの主キーが「個人ID」単独だったと仮定すると正規化では有りません。単にテーブルを分けているだけです。 考えにくいですが、元のテーブルが複合主キーだった場合は第2正規化ともいえます。そうだとしても、主キーが「個人ID」だけのテーブルを作り、そこに「郵便番号」「都道府県」などの属性を移せば良いだけです。「郵便番号」「都道府県」などで分割する必要は無いです。 第2正規化は部分関数従属性の解消、つまり、複合主キーの中の一部にカラムだけで確定する属性を、単一の属性の主キーを持つテーブルに分割することです。 憶測ですが、下記の様に書こうとして書き間違えたのではないでしょうか？ ・郵便番号IDを主キーとする「郵便番号テーブル」を作る ・都道府県IDを主キーとする「都道府県テーブル」を作る 　　・ 　　・ 　　・ これだと、郵便番号IDなどを導入した上で、第3正規化を行ったという事になります。 ともあれ、「DB 正規化」などで検索すると参考となるページが多数ヒットしますので、これらを参考にご自身で検討されると良いかと。 http://www.techscore.com/tech/sql/SQL16/16_02.html/#sql163 http://www.atmarkit.co.jp/fdb/rensai/db_enginer03/db_enginer03_1.html http://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%AD%A3%E8%A6%8F%E5%8C%96 なお、この文章の中で主キーと書いたところは、厳密に言うと候補キーとなります。主キーは候補キーの一つですが、主キーで無い候補キーも有ります。気になったら「候補キー」などで検索して下さい。
なかなか骨のある課題でしたが、下記のSQLでいけると思います。 version 5.5.8 で確認しました。 SELECT man, MAX(sum_amount) AS ans FROM ( SELECT man, (SELECT SUM(amt) FROM t_lental b WHERE start_date <= target_date AND end_date >= target_date AND a.man = b.man) AS sum_amount FROM ( SELECT DISTINCT man, start_date AS target_date FROM t_lental UNION SELECT DISTINCT man, end_date AS target_date FROM t_lental ) a ) c GROUP BY man; 別名aのサブクエリーで担当者ごとの全ての開始日と終了日の集合を取得しています。 その一つ外側で、各担当者ごとの全ての開始日と終了日について合計の個数を算出しています。 そして、一番外側で担当者ごとの合計の個数が一番多いものを抽出しています。
こんな感じでしょうか？ create table hoge (id int,user varchar(20),d date,num int); insert into hoge values (1,'A','2012/12/25',100), (2,'B','2012/12/24',200), (3,'A','2012/12/24',100), (4,'C','2012/12/23',500), (5,'A','2012/12/23',300), (6,'B','2012/12/23',200); select t1.id,t1.user,t1.d,t1.num from hoge as t1 inner join ( select user,max(d) as max_d from hoge group by user ) as t2 on t1.user =t2.user order by max_d desc,user asc,d desc
試してませんが、以下のTO_DAYSを試してください http://www.limy.org/program/db/mysql/mysql_operators.html
No1です。 ざっと調べた感じですが、csvファイルの文字コードを変えてみる、とか"をはずしてみるとかいう記述がありました。 http://support.exxaxon.co.jp/index.php?topic=121.0 http://kurusugawa.jp/2009/04/07/mysql%E3%81%A7csv%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88/ http://ratememo.blog17.fc2.com/blog-entry-854.html すいません。 たぶん、これが私の限界になります。 お力になれず申し訳ございません。m(_ _)m
以下のSQLでいけると思います。 select max(C.name) as category_name, count(C.cid) as count_cid from (article_category A inner join (select aid from article_flag where display<>2) B on A.aid=B.aid) inner join category C on A.cid=C.cid group by A.cid
SELECT `hoge`, `fuga`, `piyo` from ( SELECT * FROM `table` WHERE `moge` = 'moge' ) S ORDER BY `fuga` DESC LIMIT 0, 5 のようにサブクエリを使っても動作は変わりませんか？
まず基本から 選択肢が複数ある条件分岐はIFよりCASE WHEN のほうがいいかも また偶数奇数だけの判定ならMOD処理はIFをつかわなくても処理できます select V1 ,1-MOD(V1,2) as FLG1 ,CASE WHEN V1>=20 THEN 'L' WHEN V1>=10 THEN 'M' WHEN V1>=0 THEN 'S' END as FLG2 from tbl1; これを単純にデータを確認したいだけならviewをつかえます create view view1 as select V1 ,1-MOD(V1,2) as FLG1 ,CASE WHEN V1>=20 THEN 'L' WHEN V1>=10 THEN 'M' WHEN V1>=0 THEN 'S' END as FLG2 from tbl1; select * from view1; アップデートするならこんな感じ update tbl1 set FLG1=1-MOD(V1,2) ,FLG2=CASE WHEN V1>=20 THEN 'L' WHEN V1>=10 THEN 'M' WHEN V1>=0 THEN 'S' END; select * from tbl1; なおストアドプロシージャなどで処理するともう少し効率的になりそうですが 今のスキルだとまだそこまでやるのは難しいかもしれませんね
Zip版では、MySQLの環境設定、サービスの登録等は自分で定義してやらなければいけません。 簡単にですが、MySQLのプロセス起動までの流れを記述しておきます。 １．Zipファイルを適当なフォルダに解凍します。（例）C:\MySQL等 ２．解凍先フォルダにmy.iniを作成。my-large.ini等をコピーして作成 ３．解凍先フォルダ\Bin\mysqld.exeを起動 ４．コマンドプロンプトからmysql.exe -u rootでMySQLにコネクト出来るか確認 my.iniファイルの細かな話は、MySQLのマニュアル等を参照して定義してください。
/usr/local/var/mysql/file:/localhost/ というディレクトリー指定では、アクセスできないでしょう。 client 側から見て /Users/uekikouji/excel/t.csv　にファイルがあるのなら、local もいれて、絶対パスを指定して下さい load data local infile '/Users/uekikouji/excel/t.csv' 後方指定省略
select Aテーブル.ID,MAX(TIME) from Aテーブル,Bテーブル where Aテーブル.ID=Bテーブル.ID group by Aテーブル.ID です。
＞後ろページの取得は上手くいきます であればソート順を逆にしてもう一度SQLを発行すればデータがとれるのでは？
ああ、ごめんなさい、中途半端なソースさらしてしまいましたね $sql = "select sum(c1) as c2 from (select count(*) as c1 from テーブル1 union all select count(*) from テーブル2 ) as sub"; $res = mysql_query($sql,$myLink); $rows = mysql_fetch_array($res,MYSQL_ASSOC); print $rows["c2"]; みたいな感じです。 ただし、いまはmysql_query()は使わないように指導されています。 別の方法を試した方がよいでしょう。 もしなにか参考にしている書籍があるならそれは古いのでもう少し 新しいものを用意した方がいいかもしれません。
MySQLでは、複合カラムindex をprimary keyとすることができます。 primary keyは、unique index のひとつであり、行を特定するのに必要十分なものとして定義します。 user_noとfavorite_item　でその行が特定されるなら、この２つのカラムによる複合indexをprimary keyとしてもよいと思います。 ただ、行特定のために必ず２つのカラム値を指定しなければならないので、他のカラム情報や他のtable との連携の都合によっては、もう一つカラムを加えて、一カラムで特定できるようにすることもあります。 myisam と innodb 比較については、複数クライアントからの同時更新がどのくらい発生するのか、などによるのでは？
そもそもSETをつかうならSETの選択肢にリンゴ、オレンジ・・・と 最初からキーワードをいれておけば済みます。 SETで別テーブルを参照する正規化は効率的ではないとおもいます。 逆にクライアント側からの入力を制限したいという目的であれば 外部キー制約の方がよいかと。 //まず果物テーブルを作り create table `kudamono`(`id` int,`kudamono` varchar(20),index(`id`)) engine=InnoDB; insert into `kudamono` values(1,'りんご'),(2,'オレンジ'),(3,'いちご'),(4,'メロン'),(11,'おまけ'); //外部キー制約付きで商品テーブルを作ります create table `shohin`(`group` varchar(20), `item` int ,foreign key(`item`) references `kudamono`(`id`),unique(`group`,`item`)) engine=InnoDB; //データはitemを個別に持たせます insert into `shohin` values('果物群A',1),('果物群A',3),('果物群B',2),('果物群B',4),('果物群C',2),('果物群C',11); //groupとitemの組み合わせを表示するにはこう select `group`,group_concat(cast(`item` as char)) as `items` from `shohin` group by `group`; //果物名を表示させるにはこう select `group`,group_concat(`kudamono`) as `kudamonos` from `shohin` as s inner join `kudamono` as k on k.id=s.item group by `group`;
mysql5.5で、serverのcharsetを指定するオプション名が変更になったので以下の様に記述します。 [mysqld] character-set-server=utf8 オプション名変更の詳細は、以下参照 http://d.hatena.ne.jp/sakaik/20100414/mysql533obsol
＞alter table table modify id varchar(10) binary ああ、そういうバイナリですか・・・ であればこんな感じで標準のutf8にしてはいかがでしょうか？ alter table `テーブル名` modify id varchar(10) character set utf8 collate utf8_general_ci （もしくはcollate utf8_unicode_ciなど）
SELECT * FROM db where (name,update,time) in (SELECT name,update,MAX(time) FROM db WHERE name LIKE \"%{$search}%\" GROUP BY name,update) じゃない？
削除の意味がよくわかりませんが UPDATE office set place=null WHERE place like '%東京%' and id < 5000; 的なデータベースの中身を削除するとか 単純に SELECT id,name FROM office WHERE place like '%東京%' and id < 5000 order by id asc; というようにplaceを読まない、もしくは読んでも無視するだけいいのでは？ まずは「SELECT *」を使うのをやめるところから
GETDATE関数、CONVERT関数？ もしかしてお使いのRDBMSはMS SQL Serverでは？ それなら select id,endtime from [テーブル名] where endtime>=getdate() MySQLなら select id,endtime from [テーブル名] where endtime>=now()
ANo1です。 ＜追加したい条件4＞ ・Bテーブル「created_at」カラムの値で、一番新しいレコードが複数あった場合、 Aテーブル「id」カラム(int型)が一番大きいレコードを1件返す ですけど、 ■前提 ・Aテーブルの1レコード(「id」カラム)に対して、0～複数のBテーブルレコード(「a_idカラム」)がある ・A.id = B.a_id からいうと、 一番新しいレコードが複数あった場合、 Aテーブル「id」カラム(int型)は同じ値になるはずですけど。 ★ひとつだけ2件重複取得されているレコードがありました。 というのが、まったく同じレコードが２件出てきたということなら、 当初の回答のselectの次にdistinctをいれればよい。 select distinct a.id,a.created_at as Acreated_at,a.area, b.a_id,b.created_at as Bcreated_at from Atable a left outer join Btable b on a.id = b.a_id and b.created_at = (select max(c.created_at) fron Btable c where c.a_id = b.a_id) ★この質問に挙げた仕様はサンプルレベルなので、実際には、Bテーブルのほかの項目もselectしている ならば、Bテーブルのほかの項目で判断しないと意味がないと思われます。 ・・・該当するほかの項目を挙げてもらえばSQLを直します。
SELECT `数量` ,COUNT(`商品ID`) FROM `売上げ明細` WHERE (`商品ID`, `単価`) IN (SELECT `商品ID`, MAX(`単価`) FROM `売上げ明細` GROUP BY `商品ID`) GROUP BY `数量`
今手元に環境がないので勘ですが… SELECTで出そうとしているカラムの名前がダブっているだけだと思います。 t_itemsの構造がわかりませんが、多分table.T1を作っているサブクエリの中の「SELECT *」の部分で *ではなく、一つづつカラムを指定してあげれば大丈夫かと。
＞テーブルAのanwserの値とテーブルBのuser_answerの値が同じ場合に、テーブルBのanswer_flagを0から1に変更する ご提示の命題と、サンプルの画像があってないですね choice3が一致していますが、question_idが違うのでご提示のデータは1にはなりません むしろ最終行のquestion_id=5のデータはchoice2なので合致します やりかたはこう UPDATE tbl_quiz_log as b INNER JOIN tbl_question as a ON a.question_id = b.question_id SET answer_flag = 1 WHERE a.answer=b.answer
> getTablesに関しては、jdbcのDatabaseMetadataに元からあるメソッドで、javadocは↓の通りです。 これは失礼しました(汗) デバッグできてなくてOKです… > コネクションに関しましては、一度つないだあと、使いまわす形になっています(使い回しはやはりまずかったのでしょうか…？) Class.forName("com.mysql.jdbc.Driver"); で使いまわしはあまり良くないです。 今Gistに上げられているソースは問題なさそうですねぇ。 では、問題を切り分けていきましょう！ まずはMySQLに「SHOW TABLES;」で 一覧が問題なく取得できるか確認します。 これで問題なく取得できればMySQL側は問題なしです。 次に、ソースを生のSQLではどうか試してみます。 以下のようなソースに書き換えてみてください。 （インデントがなくてすいません…） public ArrayList<Long> getExistsTable() { ArrayList<Long> existsTable = new ArrayList<Long>(); ResultSet rs = null; Connection connection = null; PreparedStatement ps = null; try { // ドライバクラスをロード Class.forName("com.mysql.jdbc.Driver"); // データベースへ接続 connection = DriverManager.getConnection("jdbc:mysql://localhost/" + "databaseName","userName","password"); } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (SQLException e) { e.printStackTrace(); } try { ps = connection.prepareStatement("SHOW TABLES"); rs = ps.executeQuery(); while(rs.next()){ try{ existsTable.add(rs.getLong(1)); }catch(NumberFormatException e){ // e.printStackTrace(); } } } catch (SQLException e) { e.printStackTrace(); } finally { try { if(rs != null){ rs.close(); } if(ps != null){ ps.close(); } if(connection != null){ connection.close(); } } catch (SQLException e) { e.printStackTrace(); } } System.out.println("size = " + existsTable.size()); return existsTable; } （本当はこんなチマチマ閉じなくていいのですが） これで問題なければ DatabaseMetaData metadata = connection.getMetaData(); がよくなかったということになります。 （たまにJavaでもバグはあるものです。） あとは25万件との話ですが、HDDの容量は大丈夫ですか？
phpMyAdminの検索は削除用ではないのでご希望の機能はありません 検索の際にオプションで１ページあたりのデータ件数を指定できるので 大きな数字を入れて検索してみてください 前にも書きましたがSQL欄でやるのが一番 検索のwhere句をコピペするだけなのだからなぜそれをしないのかが疑問
XAMPPは開発やテスト用と主眼に作成されています。 そのため、標準の状態ではセキュリティ関連の設定がなされていません。 そのままで本番環境として使用しないでください、という警告です。 XAMPPは修正したファイルの確認用に使用すると言うことで良いでしょうか？ であれば、問題は特にないかと思います。
>「kamedaの一番の得意科目(クラスでの相対順位が最上位)は英語で、クラス2位である」 >「kamedaの二番の得意科目は数学で、クラス4位である」 >「kamedaの三番の得意科目は国語で、クラス7位である」 とテーブルの更新内容が一致しなかったので、上記の結果を出すためのSELECT文です。 select 　t1.usr_id, t1.kyoka_name, count(t2.usr_id) + 1 my_rank,t1.kyoka_rank from 　(　select 　　　t1.usr_id, t1.kyoka_name,count(t2.usr_id) + 1 kyoka_rank 　　from seiseki2 t1 　　left join seiseki2 t2 on (t1.usr_id <> t2.usr_id and t1.kyoka_name = t2.kyoka_name and t1.point < t2.point) 　　group by t1.usr_id, t1.kyoka_name 　) t1 　left join 　(　select 　　　t1.usr_id, t1.kyoka_name,count(t2.usr_id) + 1 kyoka_rank 　　from seiseki2 t1 　　left join seseki2 t2 on (t1.usr_id <> t2.usr_id and t1.kyoka_name = t2.kyoka_name and t1.point < t2.point) 　　group by t1.usr_id, t1.kyoka_name 　) t2 on (t1.usr_id = t2.usr_id and t1.kyoka_name <> t2.kyoka_name and t1.kyoka_rank > t2.kyoka_rank) group by t1.usr_id, t1.kyoka_name,t1.kyoka_rank order by usr_id,my_rank ; 全角スペースでインデントしてあります。 mysqlの文法に合っていない箇所は適宜修正してください。
書き忘れましたが、 >これは、バッチ処理で行うようなかたちになろうかと存じますが、 バッチ処理は基本的には行いません。Windowsのバッチ処理やUNIIXのshellスクリプトも含めて、書くのが結構大変です。質問者さんは、PHPなどのスクリプト言語を書けるのですので、そこから命令を実行させて結果を受け取るのがずっと楽ですし、高機能なものができます。 実行環境としてLinuxも考えているのであれば、互換性の関係からPHPだけで書くのが良いと思います。 PHPの場合はshell_exec()などを使うようですね。
select * from TABLE_A where No1 + No2 + No3 >= 30;
空白ってなに？とまず突っ込まれる内容ですね キチンと型指定すれば空白はないとおもいますが create table hoge(id int not null default 0 primary key,data int null); insert into hoge value(1,1),(2,3),(3,''),(4,null),(5,null),(6,0); この場合、空白は0です そこで拡大解釈して0もカウントしないという命題だとすると 一般的にはsumを使う場合とcountをつかう場合があります (1)select sum(data is not null and data!=0) from hoge; →dataがnullじゃないかつdataが0じゃないものをカウントするのにsumをつかいます (2)select count(if(data=0,null,data) ) from hoge →dataが0だった場合nullだとみなします、この場合はcountでいけます
「SQL」を押して表示される入力欄にDELETE文をLIMIT文を省いて書けばいけるのでは？
「自身の主キー以外」を条件に付け加えるのが堅実でしょう。 更新作業を行うのであれば当然主キーまたはそれに相当する（レコードを一意に特定できる）キーをすでに持っているはずです。 where ... and id != myId または where ... and id <> myId など
惜しいところまで行ってるのだけど、1st_kyoka_name= kyoka_name WHERE　では、point_rankに存在しないカラム名を指定していることになるので、不可です。 1st_rank をだすときの select 文に kyoka_name カラムを加えたなら、それを from 句にいれて、もう一つ外側に select query を作って、１カラム１行を返すsubqueryを1st_kyoka_nameに代入とする必要があります。 usr_id を指定するには、２つ外となるupdate対象行のカラムを直接指定できないので、t1用のwhere句や order by句 limit句もさらに外側へ出すことになります。 同順のがあると、どちらの教科名になるかは、実行時の運しだい。 select 文で、point_rank と同じカラム構成のデータが作れたら、全カラム一度に insert 可能なので、以下の文で、いけそうです。 INSERT INTO point_rank (p_usr_id, 1st_rank, 1st_kyoka_name ) SELECT d1.id , min(d1.rank) AS top_rank , (select GROUP_CONCAT( kyoka ) from (SELECT t1.usr_id as id , t1.kyoka_name as kyoka ,( SELECT count( * ) +1 FROM seiseki2 AS t2 WHERE t2.point > t1.point AND t2.kyoka_name = t1.kyoka_name ) AS rank FROM seiseki2 AS t1 ) as d2 where d2.id=d1.id and d2.rank= top_rank group by d2.id ) AS kyoka FROM ( select t1.usr_id as id ,( SELECT count( * ) +1 FROM seiseki2 AS t2 WHERE t2.point > t1.point AND t2.kyoka_name = t1.kyoka_name ) AS rank FROM seiseki2 AS t1 ) as d1 group by d1.id ; mysql 5.1 以降なら GROUP_CONCAT() が使えるので、その生徒において、トップとなる教科が複数あれば、カンマで連結して表示するようにしました。 あと、細かいことを言えば、seiseki2のtable で、kyoka_name にindexを付けた方が速くなるのだけど、mysql では、text型にはindex を貼れません。それほど長い文字列が入るとも思えないので、 varchar(20) などで十分では？
データーの格納先のフィールドはＵＮＩＣＯＤＥ格納などの指定がされてないのでは？日本語はそういう指定をしないと化けますよ。どのＤＢでも。
こんにちは。 ＞＞すでにあれば作成するという すでにあれば作成しない・・・でした。 失礼しました。 ＞＞これはチェックをつけなくても、 ＞＞そこまで問題にならないものなのでしょうか？ 「IF NOT EXISTSを追加」 をチェックしなければ、ただの「CREATE TABLE ・・・」が出力されますから、 新規で作成する場合には問題にならないでしょう。 「完全なINSERT文を作成する」 と 「長いINSERT 文を作成する」 は、いずれかを指定する事になりますが、多分どちらかがデフォルトなんでしょうね・・・。 両方チェックしなければ、どちらかの型で出力されると思います。 なので、上記を理解して全てチェックを外すのは問題ありません。
Accessのほうで質問するべきではないでしょうか？ まあ3行なので答えますが ActiveX Data Object （ADO）を使ってmysqlを直接発行するか 合計を別に作り、UNIONクエリで結合するか 表示だけだったら、(レポート/フォーム)フッダーにSUM(colum名)でいいと思います。
おそらくGROUP BY句のWITH ROLLUPでいけるかと http://dev.mysql.com/doc/refman/5.1/ja/group-by-modifiers.html
元表のプライマリキーはどうなっているのでしょうか? nameをidにするとユニークを確保するのがかなり大変ですが大丈夫ですか？ //準備 create table seiseki(name varchar(20) primary key,school varchar(10),city varchar(10) null,point int not null,rank int null); insert into seiseki(name,school,point) values ('kameda','1高',345),('suzuki','2高',341),('kaneko','3高',332),('yosida','2高',321),('tanita','1高',310),('suyama','1高',310),('kisida','2高',301),('komine','1高',299),('tomita','2高',289),('sugita','1高',275); select * from seiseki; //nameごとのschool単位での順位 select name,(select count(*) +1 from seiseki as t2 where 1 and t2.point > t1.point and t2.school= t1.school ) as rank from seiseki as t1; //上を応用して、rankとcityを更新 update seiseki as t0 inner join (select name,(select count(*) +1 from seiseki as t2 where 1 and t2.point > t1.point and t2.school= t1.school ) as rank from seiseki AS t1 ) as t3 on t0.name=t3.name set t0.rank=t3.rank,t0.city='tokyo';
windows環境のsjisはwindowsの機種固有文字を含まないので今後は「cp932」を使用することをおすすめします。 ・my.iniの文字コードの指定をcp932にする。 ・mysqldump -uユーザ名 -pパスワード --default-character-set=cp932 データベース名 > ****.sql ・create databaseする際にCHARACTER SET cp932を指定 ・ダンプファイルの「CREATE TABLE文の「CHARACTER SET」を確認。SJISだったらcp932に変更。（エディタなどの一括変換が便利） ・リストアはmysqlコマンドです。コマンド実行時に文字コードを指定しても、ダンプファイルの中のCREATE TABLE文の文字コード指定、データ部分の文字コードは影響を受けないのであまり意味はないような気はします。
> ・char(0)て何でしょうか？ 「検索語にはありえない文字」です。char(0)は、文字コード0の文字。以下の説明では\0と書きます。 例えば、検索語が"%おか%"で、field1="あいうえお"で、field2="かきくけこ"だった場合、 concat(field1,field2)は"あいうえおかきくけこ"となり、検索条件にマッチします。 ところが、concat(field1, char(0), field2) は、"あいうえお\0かきくけこ"となるため、 こうしておけば"%おか%"はマッチしない、ということになります。 > ＞%データ%は全件を検索するため効率うんぬんを論ずるような仕組みではない > ・どういう意味でしょうか？ 前後にワイルドカードをつけたLIKE 検索(いわゆる「部分位置検索」)は、効率が非常に悪いからです。 通常の検索(完全一致や範囲指定などによる絞り込み)では、DBにインデックスをつけることで、条件に該当するレコードを高速に抽出することができます。 (LIKEを使う場合でも、後ろにだけワイルドカードをつけた「データ%」のような、いわゆる「前方一致検索」は、インデックスが使えるので問題ありません。) ところが、前にワイルドカードをつけた場合、インデックスが使えませんので、 DBの全レコードを1件ずつ読み込んで条件に合致するかチェックする必要がある、ということになります。 検索にはレコード数に比例した時間がかかるという、非常に効率が悪いものになってしまうのです。 > ・あるいは、データ規模が少なければ、LIKE検索を利用しても良いのでしょうか？ それが問題にならない程度の規模ならLIKEの前後ワイルドカード(部分一致検索)をしてもいいでしょう。 > ・全件検索する際は、LIKE検索を使わないのでしょうか？ 全文検索エンジン(?)を利用するのでしょうか？ 規模が大きくなった場合には、全文検索エンジンを使うのが基本です。 > ・全件検索しなければ(例えば2カラムだけ)、LIKE検索を利用しても良いのでしょうか？ 「例えば2カラムだけ」というのが意味不明ですが、 問題はチェック対象のレコード数(行数)です。カラム数(列数)は問題になりません。 全件検索でなくても、チェック対象のレコード数が多い場合にはLIKE部分一致検索はしない方がいいでしょう。 LIKE検索以外の条件で、チェック対象が十分に絞り込めているなら、LIKE部分一致検索をしても大丈夫ということになります。 > ＞本番ではこんなことはしませんがあくまでも遊びということで > ・どういう意味でしょうか？ 上述のように性能が出せないので、大規模業務システムではそんなものは使わない、ということです。 > ・あるいは、全件検索でLIKE検索を普通は使わない、ということでしょうか？ LIKE検索でも、「あるカラムのみをチェック対象(LIKEの左辺)」とし、「頭には%をつけない前方一致検索」を行うのであれば問題ありません。 > ・concatで LIKE 検索を普通はしない、ということでしょうか？ > ・それとも、LIKE 検索で、char(0)などのセパレータを挟まない、ということでしょうか？ LIKE対象の前に%をつける「部分一致検索」は普通はしない、ということです。 さらにいうと、あと、カラムそのものではなく、concat した文字列に対してのLIKE 検索だと、「データ%」のような前方一致検索でも、左辺側にインデックスが使えませんので、やっぱり効率が悪くなりますので使えません。
こう?
>db1とdb2は同じマシンの中にあります。 ああなるほど、では、出力の際に mysqldump -u root --add-drop-table=false --insert-ignore=false --no-create-info=true -p db1 > db1.sql としてみてはどうでしょうか？
マニュアルで書かれている構文フォーマットは、BNF likeな書き方なので斜体で書かれた文字列は、マニュアルの別ページで定義されていますよ。 http://ja.wikipedia.org/wiki/ABNF 例で出てきた、table_referencesの定義は、"JOIN構文"のところで定義がなされています。 http://dev.mysql.com/doc/refman/5.1/ja/join.html
ゴミが残る可能性があるのでリストアの観点からいえばdropした方が確実 たとえばバックアップ後、データ更新（追加・削除ふくむ）があった場合、 バックアップ時点にデータを戻したいなら各テーブルの中身が残っていると 不都合がある可能性がたかい
こういう質問をするなら、semi-sync-replication の有無より、レプリケーションとトリガーの組み合わせについて質問するなら、バイナリログのフォーマット設定も書き込むべきじゃないかな？ http://dev.mysql.com/doc/refman/5.5/en/replication-features-triggers.html MySQL 5.1のだけど、日本語ならここ http://dev.mysql.com/doc/refman/5.1/ja/stored-procedure-logging.html もうマニュアルに書かれていることだから説明するのも二度手間になるけど… row-basedなら、バイナリログでテーブルのデータが更新されてもトリガーがスレーブ側で実行されることは無いので、実行順序の問題は原理的に生じない。(トリガーで更新されたテーブルのデータもバイナリログに記録されてスレーブに反映される) statement-basedならスレーブでもトリガーが実行されるので、実行順序に関しての保障は無い。 というのが回答になります。 で、"これはお願いなのですが、～(省略)～実際に運用経験があり、正確な知識をお持ちの方にアドバイス頂きたいと思います。"こういう情報がほしければ、お金を払ってプロに頼んでください。
PHPをCUIで使う事もGUIで使う事もできます。 SQLをCUIで使う事もGUIで使う事もできます。 PHPでSQLを使う事もできます。 PHPは単にHTMLを出力することが多くてクライアントとしてGUIになる事が多いってだけです。 DBのメンテナンスにSQLを使うとき、CUIを使う事が多いってだけです。
動的にSQLを書き換えて実行することはMYSQL単体でも可能です。 （ストアドプロシジャとかで） 頻繁に入れ替えないのなら、それでもいいと思います。 しかし単純なUPDATE文で更新するのの100倍は時間がかかると思います。 （結構めんどくさいですし） そもそも、テーブルの設計に問題があるように思います。 常に4人のデータが入っているのならまだ、いいのですが NULL値などがあるとさらに上の処理が煩雑になります もし、テーブル設計を見直せるなら table pk, group, id, age, sex として insert時に idはgroupでグループ化し、count(pk)+1で取得 1つのグループが5人以上にならないようにトリガでチェックをかける というふうにすれば上のテーブルと同じデータが格納できます。 拡張性も高いです。 で、肝心のUPDATEですが ちょっとわかりません まず、3,1,2の順番から ・「1の数字が付いたカラムの値」を、「3の数字が付いたカラムの値」で更新したい ・「2の数字が付いたカラムの値」を、「1の数字が付いたカラムの値」で更新したい となるのがよくわかりません 予想ですが ・「3の数字が付いたカラムの値」を、「2の数字が付いたカラムの値」で更新したい というのを書き忘れていて、３次の巡回置換（３つの入換という意味）を表しているのか つまり１，２，３が３,１,２になるのか…(1) それとも１，２，３が３，３，３になるのか…(2) はたまた１，２，３が３，１，３になるのか…(3) たぶん(3)だと思うのですがそれって意味がないような…。 まあ、どれでもテーブル構造さえ見直せば結構簡単にかけるので テーブル設計を見直せるならやってみてください
>尚、PUT先の192.168.100.105　の/var/lib/mysql/の所有者はユーザー、グループともmysqlです。 >mysqlユーザーで行えばput可能のでしょうが、どのサイトを見てもreplication専用ユーザーを作って対応することとなっており、安全上の面からも機能限定のユーザーでputしたく考えております。 グループに書き込み権限がついていないだけ…とか言うことはありませんか？ ティストリビューションが何かは不明ですが…。
変数をエスケープしないで突っ込んでいる時点でアウトですが、Syataxエラーとは無関係なので、 直接のエラーの原因は文字列をクォートしていないことでしょう。
＞画像を呼び出す際に、この二つの方法によって ＞できる事やできない事、またメリットやデメリットというのもは できる事とできない事は、基本的には差はありません。 あとはざっとこんなところでしょうか？ 個人的には後者の方がお勧めですが、リソースに十分な余裕があるなら 前者でもいいかもしれません。 ○直接登録する方法 →メリット ファイルの削除や移動など気にせずにDBに保存されているものがすべてなので 整合性がとりやすい →デメリット データが集積するに伴いデータベースが肥大化する。 そもそもバイナリデータ自体SQLとしての検索の対象にならないので、 テーブルに収納すること自体が無駄。 （とくにG単位のムービーなどはオーバーヘッドが大きすぎる） ○ディレクトリに画像を格納 →メリット 出力がファイルI/Oに依存するためデータベースに問い合わせるより若干高速 管理者がファイル自体を直接見て内容を判断できる →デメリット idでのひも付けがきれたとき、ゴミがたまりやすい ファイル自体を直接編集してしまうと、DBの内容と差異が発生する データの取り扱いがやや煩雑
対象テーブル名が、県マスタテーブルで、その中の県名のフィールドが県名としたら、 UPDATE 県マスタテーブル SET 県名 = '東北' & 県名 WHERE 県名 in ('青森','岩手','秋田','宮城'); UPDATE 県マスタテーブル SET 県名 = '関東' & 県名 WHERE 県名 in ('東京','埼玉','群馬'); などといったSQL文になるでしょう。in( )内の該当県名は該当県名を網羅します。 SQLビューで当てはめた後、クエリビューで見てみるとよく分かると思います。
INSERT文は行データを追加するためのもので列データを追加するものではありません。 3_column列がrtableテーブルに存在するならUPDATE文を使用しましょう。 UPDATE `rtable` SET `3_column` = `2_column`; 3_column列がrtableテーブルに存在しないなら3_column列を追加後に上記のUPDATE文を流します。 列追加のためのSQLは以下の通りです。 ALTER TABLE `rtable` ADD `3_column` [データ型]; （[データ型]部分は3_columnのデータ型にする必要があります。 　INTならALTER TABLE `rtable` ADD `3_column` INT;）
MySQLは全然さわったことがないのですが、 http://dev.mysql.com/doc/refman/5.1/ja/alter-table.html を見る限り、プライマリーキーを追加するだけなら ALTER TABLE tbl_name ADD PRIMARY KEY(col_name1, col_name2); でいいのではないですか？
>table_cにcdがある場合は条件を指定し、 >ない場合は条件を指定しない table_c.cd = 'cd_1' or table_.cd is null 以下ざっとテスト create table table_a(id varchar(10),name varchar(10)); insert into table_a values('a1','aaa'),('a2','bbb'),('a3','ccc'); create table table_b(b_id varchar(10),a_id varchar(10),user_id int(5) unsigned zerofill not null,point int); insert into table_b values('b1','a1',1,5),('b2','a1',2,2),('b3','a3',7,10),('b4','a2',356,10); create table table_c(c_id varchar(10),user_id int(5) unsigned zerofill not null,cd varchar(10),bonus_point int); insert into table_c values('c1',1,'cd_1',1),('c2',7,'cd_2',1),('c3',356,'cd_1',1); //表示 SELECT b.user_id ,coalesce(b.point,0) + coalesce(c.bonus_point,0) as total_point FROM table_a as a INNER JOIN table_b as b ON a.id=b.a_id LEFT JOIN table_c as c ON b.user_id=c.user_id WHERE c.cd = 'cd_1' or c.cd is null ORDER BY total_point desc
No1です。 そのPHPファイル１つの中でトランザクションを完結させるという前提ということでしょうか？ でしたら、MySQLのDBをInnoDBで作成し、以下のような手順で行えば排他処理を実現できます。 １．start transactionを宣言 ２．更新対象テーブルに対して、select ～ for update（もしくは、select ～ lock in share mode）でレコードロックをかける ３．そのレコードに対して何かしらのupdate等のメイン処理 ４．commitし、トランザクション終了 InnoDB以外のトランザクションをサポートしてないエンジンを使用する場合、もしくは、複数のPHPファイル(複数のHTML)にまたがって処理を行いたい場合は、以下のような手順となります。 １．最初に更新対象となるレコードの値ををphpのセッションに保存 ２．何らかの処理を実施 ３．更新処理直前に、最初に保存した値をphpのセッションから取得、更新対象のデータを再度参照し、値が違っていたら更新処理を中断、同じであったら更新処理を実施 等のロジックがどうしても必要になります。 ※ちなみにですが、phpのセッションは、ブラウザや、ブラウザのタブ毎に必ず一意となるようになっているので、仮に１つのPCで複数のブラウザやタブを開いても、それらは、別なセッションとみなされます。 これで回答になってますでしょうか。
>使用できますか？ 大丈夫です。WordPress と EC-Cube のテーブル名も重なることはないので、「接頭辞」は付けなくても大丈夫ですが、付けておいたほうが方が良いでしょう。 最新バージョンではわかりませんが、私の経験では、EC-Cube を最初にインストールしないとEC-Cubeでエラーとなりました。 EC-Cube => WordPress の順にインストールすることをお勧めします。
No.1です。 時間帯について明確な回答が得られませんでした。 なので一般的なサーバはどのような感じ化回答しておきます。 日中帯はアクセス数が多くなり負荷が高くなっています。 夜間はバッチ処理が走っていたりオペレータが作業していたりで負荷が高くなっています。 比較的安全な時間帯を上げるならば早朝の時間帯でしょうか。 私の以前の職場ではそんな感じです。 また、商用環境ですとAM03時～AM05時くらいに切り替えやバージョンアップ作業が入ります。 アナウンスがあるとは思いますが、この時間も避けておくのが無難でしょう。 これらの時間帯を避けて作業を行ったうえで規制がなされたのであれば よほど規制が厳しいのだとお考えください。 その際は現在実施されている運用に戻せばいいでしょう。 もしくはDBの更新時のSQLをすべてバッグアップし手動で反映させるか・・・ 現在の運用方法のほうが簡単で手間もなく、安全だとは思います。
SQL文が変ですが、質問内容に対する回答はYESですね mysqlデータベースのuserテーブルにおけるhostは その特定ユーザーが任意のホストからアクセスする際の権限です。 SQLのいわゆるLIKEをつかったマッチングにあたるので 「%」は全てのホストという意味になります また別途hostテーブルでも制限されますのでご注意ください 詳しくは http://dev.mysql.com/doc/refman/5.1/ja/connection-access.html
>Wordpressを組み込むことはできるのでしょうか？ Wordpressのみで比較HPを作成することは難しいです。 ※そもそも、Wordpressはブログ（日記や写真・画像）をメインとしたHPを作成するのに適したツールなので、比較サイトなどの情報検索並びに情報提供メインのHP作成には向かないと思います。 Wordpress = ブログ作成並びにブログ更新ツールとご理解ください。 ぶっちゃけ、Wordpress なんぞ使わなくても、テキストエディタと文法チェックツールが有れば無難なく多種多様なページを作成できます。 話は戻りますが、クレジットカードの比較サイトを例にあげますと、 HP画面に表示するデータの内、DBから抽出するデータを決定 DBのテーブルで管理すべきデータを決定します。 　・クレジットカードの名称 　・クレジットカードの画像 　・そのクレジット他カード付属情報など DBから抽出するデータを元にDBテーブル設計 DBのテーブルで管理すべきデータを元にテーブル定義を決定します。 　・クレジットカードの名称→VARCHAR(255),キー項目に指定。 　・クレジットカードの画像→バイナリ項目に指定 DBテーブル作成 定義したテーブル定義(CREATE文)元にDBにテーブルを作成します。 DBにデータ登録 作成したテーブルにクレジットカードの名称や画像を登録します。 PHP作成 DBテーブルからクレジット情報をSQLで抽出しHTMLで出力する処理を PHPで組みます。
whereはfromの後、group byよりも前に記述。 SELECT COUNT(*) AS kazu FROM zaiko WHERE shohin='A' GROUP BY shohin ;
親子カテゴリーというか、その手のものは、さらに孫カテゴリーが出来て、ツリー型になるので、親子でtableを分離すると逆に面倒なことになる。 しかし、ツリー型をデータベースでうまく処理するには、こつが要る。 ３種類の方法があって、最終的にどんなデータの取り出し方をすることがおおいか、どのデータベースシステムを使うのか（サブクエリの使い勝手や、Oracleのように階層関係を簡単に処理できる関数を持ってるか）によって決めるとよいだろう。 http://makizou.com/1616/ に概略解説がある。 １．隣接リスト型　：　parent_id を持たせる方法 ２．経路列挙型：　ディレクトリーツリーのような表示形式で保持する方法 http://www.makizou.com/archives/1662 ３．入れ子集合型：　右値と左値を持たせて、子集合は、親の左右値内に入る様にする http://www.geocities.jp/mickindex/database/db_tree_ns.html まあ、単純一覧でぱっと見理解しやすいのは、２の列挙型かと思うけど、列挙形式記述にこつが要る。親側に変更があるときに面倒、プログラムで行えばどうということもないけど。 ３は、ぱっと見分け解りません。データ作成も手作業では間違うから、プログラムをうまく組む必要があります。でも、最終的に結構すっきりした構造になるという利点があります。 １は、データ作成は簡単だけど、取り出すときに、階層処理関数を持ってないmysqlでは一回で階層化できないことが多い。２階層しかないなら、あんまり問題にならないかもしれないけど。 「テーブルの正規化」は、ちょっと意味が違うので、ちゃんとそれを解説しているページを探して読んでください。
こんな感じです、sumを使うのがポイント create table hoge(科目 varchar(30),点数 int); insert into hoge values('英語',93),('英語',96),('英語',88),('独語',95),('独語',83),('仏語',84),('仏語',89); select 科目 ,sum(点数>=95) as 95up ,sum(点数>=90) as 90up ,sum(点数>=85) as 85up from hoge group by 科目;
SQLの実行はプログラムで処理しているのでしょうか？ （$iとか書いてあるし） その場合はPHPかなにかで処理していますか？ そうだとするとPHPからのデータ受け渡しはおかしくないですか？ もしくはphpMyAdminあたりでしょうか？ その場合は$iのところがどういう対応しているのかよくわかりませんが・・・
SQL Serverで作業しているものです。 多分、MySQLでも同じと思いますが、 mainとsubを取得するときに固定値を入れたら判断することができます。 質問のSQL文ですと、下のように書いたらできます。 （tablenameという名前の列を追加しています。） SELECT tablename, id, tom, best, center, dragon 　FROM ( 　　SELECT 'main' tablename, m.id, m.tom, m.best1, m.center, u.dragon FROM main m　←セレクト１ 　　　LEFT JOIN usa u ON m.usa_id = u.id 　　UNION ALL 　　SELECT 'sub' tablename, s.red_id, s.red_title, s.best2, s.center, u.dragon FROM sub s　←セレクト２ 　　　LEFT JOIN usa u ON s.usa_id = u.id 　) as PIYO
試してみたら当方の環境でも文字化けしました。 調べてみましたらこちらの手順でOKでした。 http://www.e-petlife.com/wordpress/category/tatsuya/wordpress-tatsuya/
こゆこと？ SELECT id, century, tom, best, center, dragon 　FROM ( 　　SELECT h.id, c.century, h.tom, h.best, h.center, u.dragon FROM hoge h 　　　LEFT JOIN usa u ON h.usa_id = u.id 　　　LEFT JOIN century c ON h.century_id = c.century_id 　　UNION ALL 　　SELECT r.red_id, c.century, r.red_title, r.best, r.center, u.dragon FROM red r 　　　LEFT JOIN usa u ON r.usa_id = u.id 　　　LEFT JOIN century c ON r.century_id = c.century_id 　) as PIYO
データの結合は相乗的にデータが増えるので、自己結合などで 条件設定を冗長にやっていると処理時間が膨大になったり メモリを食い過ぎたりなど当然想定しなくてはいけませんね ＞独学で、1，2か月 で、このレベルの質問ができるとすると、相当基礎的なスキルがあるかとは 思いますが、まずはSQLの基本である正規化について知識を深めて、 インデックスなどをためしながらexplainでテストしていく というのが流れになると思います。 また簡易なデータ参照についてはエンジンも思い切ってMyISAMなどで 処理することで高速化をはかるとか、データ更新がおおくなかったり 完全なリアルタイム性が必要でないものは中間テーブルをつくって 高速化することはできるかと思います。 プロジェクト管理についてはガントチャートやパートチャートの考え方を理解し、 プロジェクトのパートごとに人月設定をしたうえで、アサインするユーザーに 配分の係数を掛けていくと進捗がだせると思いますので プロジェクトテーブル、ユーザーテーブル、プロジェクト＝ユーザーアサインテーブル などに分けて処理すれば効率的にいけるかもしれません。 期間の処理はプロジェクトに寄せるか、さらに別テーブルで管理するかは 出力したい帳票によりますね
MAIN、SUBともに1件だとしても、レコードとしては2件抽出したんですよね？ MAINとSUBをそれぞれ独立して抽出するならば、結合などせずUNION ALLすればいいのでは。
MySQLに限らずSQL全般についてorder byにて任意にソートルールを指定しない限り 表示順は保障されません。
DELETE FROM 左表 右 WHERE EXISTS(SELECT 右.品番 FROM 右表 右 WHERE 左.品番=右.品番 AND 左.枝番=右.枝番)
＞id=2のレコードの中から1つだけマイナスしたいんです。。。 できるか否かをききたいなら、limitで制限すればできます update table set number=number-50 where id=2 limit 1; しかし、データを特定しないでアップデートをするなんて愚の骨頂です。 運用方法を改めた方がよいでしょう。
>ユーザ名、趣味名１、趣味名２、趣味名３を表示させたい 意図がよくわかりませんが5個登録されていても3つだけ表示したいということでしょうか？ もし単純に全ての趣味を表示してよいならこんな感じで //準備 create table user(uid int not null primary key,uname varchar(100)); insert into user values(1,"佐藤"),(2,"鈴木"),(3,"田中"),(4,"吉田"); create table hobby(hid int not null primary key ,hname varchar(100)); insert into hobby values(1,"テレビ"),(2,"ネット"),(3,"ゲーム"),(4,"ラジオ"),(5,"スポーツ"),(6,"スポーツ観戦"),(7,"映画鑑賞"),(8,"音楽鑑賞") create table user_hobby(uhid int not null primary key auto_increment,uid int,hid int,unique(uid,hid)); insert into user_hobby(uid,hid) values(1,1),(1,2),(1,3),(1,4),(1,5),(2,2),(2,5),(2,3),(2,1),(3,1),(4,2),(4,3),(4,5),(4,7),(4,8); //表示 select uname,group_concat(hname) as hnames from user as u inner join user_hobby as uh on u.uid=uh.uid inner join hobby as h on uh.hid=h.hid group by u.uid;
join の所を、right join　に変えてみてください。 これで、うまくいくと思いますけど。 解説： 　joinで、結合するには、両方のテーブルに結合条件に該当するレコードが存在することが必要です。 　片方のテーブルにだけ存在するデータも欲しい時には、 　　joinの左側に書いたテーブルのデータが全部欲しい→left join 　　joinの右側に書いたテーブルのデータが全部欲しい→right join 　　両方のテーブルのどちらか一つでもあれば全部欲しい→full join 　を使用します。 　使い方は全く同じ。結果が異なるだけです。
■質問1 SHOW TABLE STATUS WHERE Name = 'テーブル名' の結果で返却された、 Auto_incrementカラムの値が、 次回発行される「auto increment の値」です。 ■質問2 AUTO_INCREMENTが設定されているカラムに対しても値を自分で指定して設定することができますので、 削除した一番若い番号を利用することは可能です。 ↓ mysql> insert into autotest(id, name) values(15, 'DVDプレイヤー'); ■質問3 引き継がれます、AUTO_INCREMENT値500までデータがあればAUTO_INCREMENT値501からINSERTされます。
遷移先の ninsyou.php にて idとpassの値を取得 ↓ <?php $id = $_POST['id']; $pass = $_POST['pass']; ?> その値を利用してMySQLへSELECT問い合わせ ↓ SELECT * FROM TABLE名 WHERE id = '$id' AND pass = '$pass' これにてテーブルに情報があるかどうか確認出来ます。
T2のテーブル側のみハイフンが有る場合は SELECT * FROM T1 LEFT JOIN T2 ON T1.郵便番号=REPLACE(T2.郵便番号,'-','') です。
>「読み込み中です。」のような画面 この仕組みだと、2～3秒ならいいですが10秒くらいが待っていられる限界ですね ajaxでデータを呼び出し、readystateをチェックする流れだと思います もし30秒以上かかるような想定であれば、予約式にして 予約確認画面で作成状況を確認し、データができあがっていたら ダウンロードするような方式が現実的です
こんなかんじでしょうか SELECT ccoin, count(ccoin) FROM ( SELECT user_id, COUNT(coin) as ccoin FROM buy GROUP BY user_id ) as a GROUP BY ccoin;
(2)の手順で、エディターできちんとutf8 に変換してから、phpに読み込みさせると、php側は、何も変換しないで、MySQLへinsertして、表示も化けないのですから、 (1)の1ダウンロード後に、utf8に変換して、変換後ファイルを指定して、ファイルアップロードすれば問題ないと思うけど。filezillaが改行コードも変換してるなら、エディターでの保存時に改行コードもunix用\n にしてくれるエディターを使えば、ブラウザからのアップロードもfilezillaでやってるのと同じになるはず。 (3)は、どういうデータにどの時点で変換作業してるのか不明
mysql の場合、同じキーが有ったときにその行を書き換えるには、replace にします。 同じキーがなければ、replace は、insert と同じですので、最初のINSERT INTO を replace into にするだけで十分かと思います。 書き換えたくないカラムがあるのなら、ON DUPLICATE KEY UPDATE の出番ですが、今回は全カラム書き換えなのでreplaceで十分と思います。
SELECT DISTINCT t2_code,date FROM t1 INNER JOIN t2 ON t1_code=t2_code WHERE (t1_type,date) IN(SELECT t1_type,MAX(date) FROM t1 INNER JOIN t2 ON t1_code=t2_code GROUP BY t1_type) でどうでしょうか。
GROUP BY SUBSTRING(text_date, 8, 2)
INSERT INTO money_all(o_usr_id,g_money_all,n_money_all) SELECT o_usr_id,SUM(g_money),SUM(n_money) FROM (SELECT g_usr_id AS o_usr_id,g_money,0 AS n_money FROM money UNION ALL SELECT n_usr_id,0,n_money FROM money2) AS T GROUP BY o_usr_id です。
　実装としての外部キー制約と、モデリングをしている時の外部キーとしての表記は分けて考えましょう。 　モデリングをしている時に、属性間の関係を設計する時には、採用するデータベースシステムが外部キー制約をサポートしているかに関わらず、ちゃんと関係を明記するべきです。 　ＥＲ図に記載された関係を、実データベースで制約として明記できるかどうかは、実装の時に考えることで、これは、ＥＲ図が完成してから評価することです。 　外部キーの要件は、次の通り。 　・参照する側の属性に指定された値は、必ず参照される側の属性の値として存在しなくてはいけない。 　・参照する側の属性に指定された値で、必ず参照される側の列が一意に定まらなくてはならない。 　発注スタッフＩＤが存在するとは限らないと言うことは、一つ目の要件に反します。この関係が外部キー制約として実装されているとすると、そのような発注スタッフＩＤを持つレコードは、注文テーブルに登録することが出来ません。 　商品ＩＤについても同じように考えてください。
投稿データ[bbsTable]と会員マスタ[userTable]を結合するキーが bbsTable.postUserName　と　userTable.userName なんですかね？ ユーザーIDを用いてない投稿時のデータとマスタを関連付けできるのかな？という点が気になります。 投稿時のユーザー名と会員マスタのユーザー名が完全一致するものだけ、拾うはず。 （当然、検索結果の件数が減ります） select t1.postUserName, t1.postTitle, t1.postText, t1.postDate, t2.userType as postUserType from bbsTable t1 inner join userTable t2 on t1.postUserName = t2.userName order by t1.postDate desc; 投稿データ[bbsTable]はすべて選択させたいなら select t1.postUserName, t1.postTitle, t1.postText, t1.postDate, t2.userType as postUserType from bbsTable t1 left join userTable t2 on t1.postUserName = t2.userName order by t1.postDate desc; 結果を確認する間は t2.userType as postUserType　の行を t2.userName, t2.userType as postUserType　としたほうがよさそう。
>モジュールからサーバにアクセスして、サーバ側のローカルファイルなどに書き込むなどして >ログを残す といった箇所は全く経験がなく検討がつきません。 Apacheサーバーを含めて主要なサーバーアプリはアクセスがあったページのログを自動で残す機能がありますから 単純にダミーのページを一つつくってクライアント側から起動時にバックエンドでそのページにアクセスするように しておけばサーバー側でアクセスログから時間と起動した端末のIPアドレスが割り出せます。 もう少し詳細な情報を自前のデータベースに取り込みたい場合はPHPなどで動的ページを作成しページへの アクセス時のURLの「?」以降にパラメータを記載してサーバー側で情報を受け取って処理する方法があります。 例） http://xxx.xxx.xxx.xxx/index.php?cliant=xxx&state=xxxxxx ようするにクライアント側からは積極的にデータベースの更新には動かずページを見に行くだけに留め サーバー側でページを見に来た相手を記録してログとして残すわけです。 確実性という点では若干の不安が残りますがデータベースの接続、更新、切断の手間に比べれば手軽に実装できます。
SELECT文ですが、子カテゴリーの parent_id と親カテゴリーの category_id で自己結合するのが簡単かと。 なお、テーブルの行数が多いと性能的な問題が出てくるかも知れません。 例) ------------------------------------ SELECT cld.category_id AS child_category_id, cld.parent_id AS child_parent_id, cld.other_data AS child_other_data, ・ ・ ・ prt.category_id AS parent_category_id, prt.parent_id AS parent_parent_id, prt.other_data AS parent_other_data, ・ ・ ・ FROM category cld LEFT OUTER JOIN category prt ON cld.parent_id = prt.category_id WHERE cld.category_id = :category_id; ---------------------------------------- テーブル構造ですが、0～1の親を持つカテゴリー階層はツリー構造の一種ですから、下記の記事が参考になると思います。 http://www.geocities.jp/mickindex/database/db_tree_ns.html http://www.geocities.jp/mickindex/database/db_tree_pe.html http://gihyo.jp/dev/serial/01/sql_academy2/000601
多分こちらの件と同様かと思われますがどうでしょうか？ MySQLの UNIQUEなINDEXには長さ767byteまでしか使えない件と対策 http://d.hatena.ne.jp/tanamon/20090930/1254332746
SQLでは改行マークは文の区切りではないので普通に改行すればいいのでは？ create table hoge (id int,data varchar(100) default 'a b c'); insert into hoge(id) values(1),(2),(3); select * from hoge;
キーワード「mysql update」でGoogle検索してヒットする http://dev.mysql.com/ 公式サイトの次のリファレンスマニュアルを参照。 -------- MySQL バージョン 4.0.4 以降では、複数のテーブルに対する UPDATE 操作も実行可能です。 UPDATE items,month SET items.price=month.price WHERE items.id=month.id; （出典 http://dev.mysql.com/doc/refman/4.1/ja/update.html ） --------
CentOS5.xが現に稼動しており、CentOS6.xにマイグレーションしようとしているのですね。 CentOS5.xのphpMyAdminのインストール方法について特に明示はないようですが・・・ CentOS6.xをyumでインストールしているとの記載がありますので、同様にしてyumでインストールしたと推察します。 質問には、config.inc.phpの内容は明記されていますが、格納位置は明示されていません。 phpMyAdmin2では、config読み込みインスタンスは、 new PMA_Config('./config.inc.php') と、ハードコーディングしています。 これに対してphpMyAdmin-3.5.2では、間接指定となっています。 new PMA_Config(CONFIG_FILE); このCONFIG_FILEはどこで定義されているかと言うと、 libraries/vendor_config.php:define('CONFIG_DIR', '/etc/phpMyAdmin/'); libraries/vendor_config.php:define('CONFIG_FILE', CONFIG_DIR . 'config.inc.php'); という具合になっています。 従いまして、/usr/shere...ではなく /etc/phpMyAdmin/config.inc.php の内容をご確認ください。 ちなみに phppgadminは当初から /etc/phpPgAdmin においてあるので気が付かなかったのではないですか?
なんか勘違いしてませんか？ デフォルト値や設定を変えたからといって、すでに設定されているものは 変わりませんよ？ きちんとやるならdbを作るときに文字コードを意識してつくります。 CREATE DATABASE db_hoge DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci; またtableをつくるときにもテキスト系のカラムに文字コードを指定します CREATE TABLE db_hoge.tbl_fuga (id INT NOT NULL ,data VARCHAR(30) CHARACTER SET utf8 COLLATE utf8_unicode_ci); もうすでにlatin1で設定されているカラムに対してはalterで変更します ALTER TABLE tbl_fuga CHANGE data data VARCHAR(30) CHARACTER SET utf8 COLLATE utf8_general_ci
・どうやって、やるのでしょうか？ たぶん、 残念ながら手間がかかりますが、「<a href="○○">△△</a>」をすべて洗い出して 「[url=○○]△△[/url]」との対応を１個ずつ決めてから １個ずつ処理するしかないです。 というのは、正規表現で検索はできるけれど、正規表現で置き換えはできない場合が多いからです。 （秀丸は使っていないから未確認です。） 例えばエディタで置き換えで正規表現が使えるチェックをいれて（秀丸はチェックなどしなくてもいいかもしれませんが）、この文書で、「正規表現*でき」を「AAA*BB」にでも置き換えしてみてください。 「正規表現で検索はでき」が「AAA*BB」におきかわってしまい、「AAAで検索はBB」とはならないはず。 という前提の下、 selectで、<a href="○○">△△</a>を全部探し出して、リストを作って、 update　・・・ set entry = replace(entry,'<a href="○○">△△</a>','[url=○○]△△[/url]') を複数回実行するのが一番早いかなと思います。 （replaceは大文字小文字を区別しますので注意。whereはつけたほうが早いけどなくても大丈夫） ★！以下はもっと簡単な方法ですが特殊な前提が必要！★ <a href="○○" の○○"の部分が必ず・・・.html"で終わっていて、 他には.html"の文字列がないならば以下の方法が使えるかもしれません。 ※*.htmや*.php、*.jspで終わっているとしても同様。 update　・・・ set entry = replace(replace(replace(entry ,'<a href="'.'[url=') ,'.html">','.html]') ,'</a>','[/url]') の実行。(それぞれの要素を置き換える) ただし、<a>以外の要素で.html">が含まれていると完全にデータが潰れてしまいますので ！！！要注意！！！ （例えば、<iframe>や<form>等。 　<button>もscript埋め込みになっていてたまたま最後が.html">になっていたとかが 　ありえるので危ない。） ２つ目のreplaceを ,'">',']') とすれば.htmlだろうがなんだろうが<a>はうまくいくのにと思うかもしれませんが このために他が潰れるから使えないということでした。
http://shain.blog.conextivo.com/2007/10/phppdosqlite1.html http://codezine.jp/article/detail/433 http://keicode.com/cgi/using-sqlite-in-php.php http://d.hatena.ne.jp/fatwebstudy/20120804/1344040727 http://d.hatena.ne.jp/fatwebstudy/20120804/1344034675 http://www.phppro.jp/school/security/vol3/1 http://gihyo.jp/dev/serial/01/php-security?start=60 http://www.ipa.go.jp/security/awareness/vendor/programmingv1/b09_01_main.html http://www.ipa.go.jp/security/awareness/vendor/programmingv1/a01_03.html 関連がありそうなものをいくつか紹介します 何か不明な点があれば補足をお願いします
select B.商品名, B.数量 from ユーザーテーブル A, 商品テーブル B where A.ユーザーNO = B.ユーザーNO and A.ユーザーID = 'yamada'
＞ここでおっしゃっている源泉というのはどういった解釈をすればいいのでしょうか？ 源泉は、そのデータが発生したそもそもの要因と考えていました。 ＞ブラウザ上で表示したい内容は～～ 失礼しました。 売上の履歴も含めて表示させたいってことですね。 てっきり、１ユーザー１レコードで、出ポイントと入ポイントは それぞれ変動するたびに計算するデータ構造だと思い込んでました。 すみません。（Yahooや楽天の残ポイント表示みたいな感じ） select （ sum( 入ポイント ) - sum( 出ポイント) ） AS　残ポイント from ターゲットのテーブル group by ユーザーID こんなかんじで・・・ 履歴をそのまま表示させるということでしたら、 残ポイントがあったほうがいいかもしれませんねぇ・・・ ちなみに、私が上記設計をすると断見してしまったのは Yahooポイントの獲得情報を真似てのことでした。 Yahooの場合、 ◆合計表示場所 ----------------------------------- 利用可能ポイント：9999 ----------------------------------- ◆履歴 ----------------------------------- 取引日：9/1 1000 取引日：9/2 -500 取引日：9/3 2000 取引日：9/4 -600 取引日：9/5 -200 ----------------------------------- こんな感じで履歴部分と合算部分がわかれてます。 ユーザー数が半端ないので、履歴部分は月単位、合算部分は夜間のストアド等で計算していると 推測します。 画面設計が既に出来上がっていて、エンドユーザーがどうしてもそういった表示をしたい ということでしたら、後々のためにも残ポイント列を持たせておいたら安心ですね。 スタンダードというものを提示できずに申し訳ございません。
UNIONつまり集合演算子を使った場合、SELECTするカラム以外のソートはできません。 これは、MySQLに限った話ではなく、ANSI/ISO SQLそのものの仕様です。 postDate でソートするなら、SELECTするカラムに postDate が無くてはいけません。 （もちろんUNIONする全テーブルに無いとダメです） さて、ご質問に対しての回答は以上ですが、以下、Tritonn環境がないので、想像で書きます。 全文検索用のcommentIndex、これも各テーブルにあるものですよね？ だとしたら、ご質問の書き方だとこうなります。 table1→無条件に全表走査（遅い） table2→無条件に全表走査（遅い） table3→無条件に全表走査（遅い） table4→ここだけ全文検索（高速） 各テーブルから検索ワードで全文検索したいのであれば select text from table1 where match(commentIndex) against("検索ワード" in boolean mode) union all select comment from table2 where match(commentIndex) against("検索ワード" in boolean mode) union all select comment from table3 where match(commentIndex) against("検索ワード" in boolean mode) union all select comment from table4 where match(commentIndex) against("検索ワード" in boolean mode) にならないといけないと思います。 上記の書き方で初めて table1→全文検索（高速） table2→全文検索（高速） table3→全文検索（高速） table4→全文検索（高速） となるのでは？ 「それじゃsennaが4回も呼ばれるじゃないか」と思われるかもしれませんが、3回全表走査するよりは、よっぽど高速でしょう。 （各テーブルの件数にもよると思いますが） インラインビューを使えばsenna1回で書けますけど、せっかくの全文検索の意味がなくなる（却って劇遅になります）し、そもそも、インラインビューでsennaを使うと多分構文エラーになると思います。
>InnoDB: Error: auto-extending data file \xampp\mysql\data\ibdata1 is of a different size 設定ファイルの編集でも行ったのでしょうか？ エラーメッセージで検索すると、下記のページとか見つかります。 http://www.ilovex.co.jp/blog/system/projectandsystemdevelopment/mycnfinnodbmysql.html innodb_data_file_pathの設定はどうなっているのでしょう？ あとは…xamppがインストールされているパーティションの容量は十分にあるでしょうか？ innodb_data_file_pathで設定しているサイズよりパーティションの空き容量が小さい…ということはないですか？
http://www.phpmyadmin.net/home_page/index.php
